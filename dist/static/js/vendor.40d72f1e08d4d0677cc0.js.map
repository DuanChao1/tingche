{"version":3,"sources":["webpack:///static/js/vendor.40d72f1e08d4d0677cc0.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/vue-router/dist/vue-router.js","webpack:///./~/vue-style-loader/addStyles.js","webpack:///./~/vue/dist/vue.common.js"],"names":["webpackJsonp","5","module","exports","list","toString","result","i","this","length","item","push","join","modules","mediaQuery","alreadyImportedModules","id","21","__webpack_require__","global","factory","Target","path","matcher","delegate","Matcher","target","routes","children","generateMatch","startingPath","nestedCallback","fullPath","addRoute","routeArray","handler","len","l","substr","route","eachRoute","baseRoute","callback","binding","hasOwnProperty","slice","call","map","addRouteCallback","add","warn","msg","noWarning","console","error","tryDecode","uri","asComponent","decodeURIComponent","decodeURI","e","isArray","test","Object","prototype","StaticSegment","string","DynamicSegment","name","StarSegment","EpsilonSegment","parse","names","specificity","charAt","segments","split","results","val","match","segment","State","charSpec","nextStates","sortSolutions","states","sort","a","b","recognizeChar","ch","state","concat","RecognizeResults","queryParams","findHandler","handlers","regex","captures","currentCapture","params","j","m","isDynamic","addSegment","currentState","eachChar","put","decodeQueryParamPart","part","replace","warn$1","resolvePath","base","relative","append","query","stack","pop","unshift","isPromise","p","then","getRouteConfig","component","options","$options","resolveAsyncComponent","cb","resolver","components","_","resolve","exports$1","Vue","_resolveComponent","Component","mapParams","undefined","key","JSON","stringify","genQuery","canReuse","view","transition","childVM","canReuseFn","to","from","canDeactivate","next","fromComponent","hook","callHook","expectBoolean","canActivate","aborted","deactivate","callHooks","activate","depth","reuse","activateQueue","saveChildView","_bound","setComponent","activateHook","dataHook","waitForData","activated","loading","constructor","$loadingRouteData","unbuild","build","_meta","created","_routerView","keepAlive","cachedChildView","_keepAliveRouterView","childView","cleanup","$destroy","insert","router","_rendered","_transitionOnLoad","setCurrent","$before","anchor","afterData","afterActivate","loadData","postActivate","$emit","processData","data","promises","isPlainObject","keys","forEach","resolvedVal","$set","all","isPlainOjbect","toArray","Array","applyOverride","_Vue$util","util","extend","defineReactive","init","_init","root","_parent","parent","$router","$route","_children","_defineMeta","destroy","_destroy","_isBeingDestroyed","$remove","apply","arguments","strats","config","optionMergeStrategies","hooksToMergeRE","parentVal","childVal","ret","View","componentDef","directive","internalDirectives","viewDef","_isRouterView","bind","vm","_isDynamicLiteral","parentView","$parent","_rootView","_currentTransition","done","unbind","elementDirective","Link","sameOrigin","link","protocol","location","hostname","port","toggleClasses","el","fn","trim","indexOf","_bind","isObject","addClass","removeClass","onPriority","priority","LINK_UPDATE","activeId","_this","String","childLinks","querySelectorAll","existingId","getAttribute","value","setAttribute","$on","activeIds","updateClasses","$off","unwatch","$watch","onRouteUpdate","removeAttribute","tagName","onClick","addEventListener","update","exact","prevActiveClass","activeClass","metaKey","ctrlKey","shiftKey","defaultPrevented","button","preventDefault","go","parentNode","pathname","history","rootRE","newPath","stringifyPath","updateActiveMatch","updateHref","activeRE","RegExp","queryStringRE","regexEscapeRE","isAbsolute","href","mode","formatPath","_linkActiveClass","dest","trailingSlashRE","removeEventListener","guardComponent","comp","babelHelpers","classCallCheck","instance","Constructor","TypeError","willAddRoute","Error","addChild","contextEntered","specials","escapeRegex","validChars","generate","invalidChars","repeat","get","child","isEqual","chars","returned","oCreate","create","proto","F","splice","RouteRecognizer","rootState","allSegments","isEmpty","as","handlersFor","hasRoute","output","generateQueryString","pairs","pair","encodeURIComponent","arrayPair","parseQueryString","queryString","keyLength","recognize","silent","pathLen","queryStart","isSlashDropped","solutions","source","hashRE","HTML5History","_ref","onChange","baseEl","document","querySelector","start","listener","url","search","hash","window","stop","replaceState","pos","x","pageXOffset","y","pageYOffset","pushState","hashMatch","HashHistory","hashbang","self","raw","formattedPath","isAbsoloute","prefix","AbstractHistory","currentPath","RouteTransition","abort","abortingOnLoad","redirect","deactivateQueue","reverseDeactivateQueue","reverse","matched","reuseQueue","runQueue","_onTransitionValidated","_view","queue","step","index","context","_ref$expectBoolean","_ref$postActivate","nextCalled","onError","err","_suppress","onPromiseError","setTimeout","nextWithBoolean","res","ok","nextWithData","exposed","hooks","internalKeysRE","Route","_recognizer","reduce","prev","cur","_notFoundHandler","defineProperty","enumerable","freeze","historyBackends","abstract","html5","Router","_ref$hashbang","_ref$abstract","_ref$history","_ref$saveScrollPosition","saveScrollPosition","_ref$transitionOnLoad","transitionOnLoad","_ref$suppressTransitionError","suppressTransitionError","_ref$root","_ref$linkActiveClass","linkActiveClass","installed","app","_guardRecognizer","_started","_startCb","_currentRoute","_previousTransition","_notFoundRedirect","_beforeEachHooks","_afterEachHooks","_root","_abstract","_hashbang","hasPushState","_history","_historyFallback","inBrowser","History","_match","_saveScrollPosition","_map","on","rootPath","_notFound","_addRoute","_addRedirect","alias","_addAlias","beforeEach","afterEach","App","container","_appContainer","Ctor","_appConstructor","_location","assign","generatedPath","currentParams","targetParams","encodeURI","subRoutes","subPath","redirectPath","_addGuard","aliasPath","mappedPath","_handler","_this2","realPath","_checkGuard","_this3","currentRoute","currentTransition","_prevTransition","beforeHooks","startTransition","_postTransition","nextTick","scrollTo","getElementById","scrollX","offsetTop","install","externalVue","use","22","addStylesToDom","styles","domStyle","stylesInDom","refs","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","removeStyleElement","removeChild","idx","createStyleElement","createElement","type","obj","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","applyToTag","newObj","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","sources","btoa","unescape","memoize","memo","isOldIE","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","23","set","hasOwn","_isVue","_data","ob","__ob__","convert","dep","notify","vms","_proxy","_digest","del","_unproxy","isLiteral","exp","literalValueRE","isReserved","str","c","charCodeAt","_toString","toNumber","parsed","Number","isNaN","toBoolean","stripQuotes","camelize","camelizeRE","toUpper","toUpperCase","hyphenate","hyphenateRE","classify","classifyRE","ctx","OBJECT_STRING","def","writable","configurable","_debounce","func","wait","timeout","args","timestamp","later","last","Date","now","arr","cancellable","cancelled","cancel","looseEqual","isNative","Cache","limit","size","tail","_keymap","peek","eof","eatSpace","spaceChr","isStringStart","chr","doubleChr","singleChr","isExpStart","expStartChr","isExpEnd","expChrPair","parseString","stringQuote","escapeChr","parseSpecialExp","inExp","startChr","parseExpression","pipeChr","startState","filterArgState","filterState","filterNameState","parseFilterList","filters","parseFilter","parseFilterArguments","arg","processFilterArg","reservedArgRE","dynamic","stripped","parseDirective","s","hit","cache$1","dir","expression","compileRegex","open","delimiters","close","unsafeOpen","unsafeDelimiters","unsafeClose","tagRE","htmlRE","cache","parseText","text","html","first","oneTime","tokens","lastIndex","exec","tag","tokensToExp","token","formatToken","single","$eval","inlineFilters","filterRE","appendWithTransition","applyTransition","beforeWithTransition","before","removeWithTransition","direction","op","__v_trans","transitionEndEvent","_isCompiled","action","inDoc","node","doc","ownerDocument","documentElement","nodeType","contains","getAttr","_attr","getBindAttr","hasBindAttr","hasAttribute","after","prepend","replaceChild","event","useCapture","off","getClass","classname","className","baseVal","setClass","cls","isIE9","namespaceURI","classList","tar","extractContent","asFragment","rawContent","isTemplate","isFragment","content","hasChildNodes","trimNode","createDocumentFragment","isTrimmable","lastChild","createAnchor","persist","debug","createComment","__v_anchor","findRef","hasAttributes","attrs","attributes","refRE","mapNodeRange","end","removeNodeRange","frag","onRemoved","removed","nodes","getOuterHTML","outerHTML","cloneNode","innerHTML","checkComponentAttr","hasAttrs","commonTagRE","reservedTagRE","getIsBinding","resolveAsset","is","mergeData","toVal","fromVal","mergeAssets","guardArrayAssets","guardComponents","ids","guardProps","props","assets","asset","mergeOptions","mergeField","strat","defaultStrat","mixins","mixin","mixinOptions","warnMissing","camelizedId","Dep","uid$1","subs","withoutConversion","shouldConvert","Observer","augment","hasProto","protoAugment","copyAugment","arrayMethods","arrayKeys","observeArray","walk","src","__proto__","observe","isExtensible","addVm","property","getOwnPropertyDescriptor","getter","setter","childOb","depend","newVal","initMixin","$el","$root","$children","$refs","$els","_watchers","_directives","_uid","uid","_events","_eventsCount","_isFragment","_fragment","_fragmentStart","_fragmentEnd","_isDestroyed","_isReady","_isAttached","_vForRemoving","_unlinkFn","_context","_scope","_frag","_updateRef","_callHook","_initState","_initEvents","$mount","getPathCharType","code","formatSubPath","trimmed","maybeUnescapeQuote","nextChar","IN_SINGLE_QUOTE","IN_DOUBLE_QUOTE","newChar","actions","APPEND","typeMap","BEFORE_PATH","subPathDepth","PUSH","INC_SUB_PATH_DEPTH","PUSH_SUB_PATH","IN_SUB_PATH","pathStateMachine","ERROR","AFTER_PATH","parsePath","pathCache","getPath","parseExpression$1","setPath","original","noop","save","isString","saved","newlineRE","rewrite","allowedKeywordsRE","restoreRE","restore","compileGetter","improperKeywordsRE","body","saveRE","wsRE","identRE","makeGetterFn","Function","compileSetter","scope","needSet","expressionCache","isSimplePath","pathTestRE","literalValueRE$1","resetBatcherState","userQueue","has","circular","waiting","flushBatcherQueue","_again","runBatcherQueue","devtools","emit","watcher","run","pushWatcher","q","user","Watcher","expOrFn","isFn","uid$2","active","dirty","lazy","deps","newDeps","depIds","_Set","newDepIds","prevError","twoWay","queued","shallow","traverse","seen","seenObjects","clear","isA","isO","depId","isRealTemplate","stringToFragment","templateString","cacheKey","templateCache","tagMatch","tagRE$1","entityMatch","entityRE","commentMatch","commentRE","wrap","efault","suffix","nodeToFragment","textContent","clonedNode","cloned","hasBrokenTemplate","tempClone","hasTextareaCloneBug","parseTemplate","template","shouldClone","idSelectorCache","Fragment","linker","host","parentFrag","childFrags","inserted","unlink","singleBefore","singleRemove","multiBefore","multiRemove","__v_frag","withTransition","method","attach","shouldCallRemove","beforeRemove","detach","FragmentFactory","cid","cacheId","linkerCache","compile","findPrevFrag","previousSibling","forId","range","n","Math","floor","getTrackByKey","trackByKey","findVmFromFrag","__vue__","getValue","multi","selected","_value","indexOf$1","keyFilter","codes","charCode","parseInt","keyCodes","keyCode","stopFilter","stopPropagation","preventFilter","selfFilter","currentTarget","normalize","prop","propCache","camel","upper","testEl","prefixed","prefixes","style","kebab","camelPrefixes","normalize$1","_key","k","callActivateHooks","called","total","compileProps","propOptions","attr","propsData","empty","identRE$1","propBindingModes","ONE_WAY","TWO_WAY","ONE_TIME","optimizedLiteral","parentPath","makePropsLinkFn","_props","inlineProps","initProp","$get","_bindDir","propDef","processPropValue","rawValue","isSimple","getPropDefaultValue","coerceProp","coerced","assertProp","updateProp","required","valid","expectedTypes","assertedType","assertType","expectedType","validator","coerce","pushJob","job","queue$1","flush","f","offsetHeight","Transition","enterClass","leaveClass","pendingCssEvent","pendingCssCb","pendingJsCb","justEntered","entered","left","typeCache","isHidden","rect","getBoundingClientRect","width","height","offsetWidth","getClientRects","partial","nodeLinkFn","_asComponent","compileNode","childLinkFn","terminal","isScript","compileNodeList","dirs","linkAndCapture","makeUnlinkFn","originalDirCount","sortDirectives","groupedMap","priorities","descriptor","DEFAULT_PRIORITY","array","group","contextDirs","destroying","teardownDirs","_teardown","compileAndLinkProps","propsLinkFn","propDirs","compileRoot","contextOptions","contextLinkFn","replacerLinkFn","containerAttrs","_containerAttrs","replacerAttrs","_replacerAttrs","compileDirectives","selfDirs","compileTextNode","compileElement","skip","linkFn","checkTerminalDirectives","checkElementDirectives","checkComponent","_skip","removeText","wholeText","processTextToken","makeTextNodeLinkFn","setTokenType","directives","fragClone","nodeList","linkFns","makeChildLinkFn","childrenLinkFn","makeTerminalNodeLinkFn","ref","modifiers","literal","componentLinkFn","previousElementSibling","dirName","rawName","termDef","modifierRE","dirAttrRE","DEFAULT_TERMINAL_PRIORITY","parseModifiers","pushDir","interpTokens","hasOneTimeToken","hasOneTime","interp","dirDef","transitionRE","bindRE","onRE","makeNodeLinkFn","transclude","extractAttrs","_content","transcludeTemplate","replacer","mergeAttrs","specialCharRE","resolveSlots","contents","_slotContents","extractFragment","stateMixin","makeComputedGetter","owner","evaluate","newData","_setData","_initProps","_initMeta","_initMethods","_initData","_initComputed","_propsUnlinkFn","dataFn","oldData","removeVm","computed","userDef","methods","metas","eventsMixin","registerComponentEvents","eventRE","_fromParent","registerCallbacks","register","onAttached","callAttach","onDetached","callDetach","events","watch","_initDOMHooks","noop$1","Directive","_locked","_listeners","_host","lifecycleMixin","_compile","_initElement","rootLinker","contentLinkFn","ctor","_linkerCachable","rootUnlinkFn","contentUnlinkFn","deferCleanup","_cleanup","destroyReady","pendingRemoval","cleanupIfPossible","teardown","miscMixin","_applyFilters","oldValue","write","offset","read","resolved","requested","pendingCallbacks","cbs","reason","dataAPI","clean","asStatement","$arguments","$delete","deep","sync","immediate","filterRE$1","$interpolate","$log","log","domAPI","op1","op2","targetIsDetached","shouldCallHook","beforeWithCb","removeWithCb","$nextTick","$appendTo","$prependTo","$after","inDocument","realCb","eventsAPI","modifyListenerCount","count","hookRE","$once","isSource","shouldPropagate","hasParentCbs","some","$broadcast","$dispatch","lifecycleAPI","ready","$compile","limitBy","filterBy","delimiter","convertArray","$value","$key","orderBy","baseCompare","sortKeyIndex","sortKey","sortKeys","order","comparator","firstArg","installGlobalAPI","createClass","elementDirectives","transitions","partials","compiler","parsers","extendOptions","Super","isFirstExtend","_Ctor","Sub","_assetTypes","plugin","definition","__VUE_DEVTOOLS_GLOBAL_HOOK__","UA","isIE","isAndroid","isIOS","transitionProp","animationProp","animationEndEvent","isWebkitTrans","ontransitionend","onwebkittransitionend","isWebkitAnim","onanimationend","onwebkitanimationend","nextTickHandler","pending","copies","callbacks","timerFunc","Promise","MutationObserver","counter","observer","textNode","characterData","Set","entry","shift","newer","older","returnEntry","91","123","40","defineProperties","async","warnExpressionErrors","_delimitersChanged","_propBindingModes","_maxUpdateCount","instanceData","defaultData","attached","detached","beforeCompile","compiled","beforeDestroy","destroyed","addSub","sub","removeSub","addDep","arrayProto","getOwnPropertyNames","items","debounce","IN_PATH","BEFORE_IDENT","IN_IDENT","ws","ident","[",".","0","number","'","\"","]","else","allowedKeywords","improperKeywords","beforeGet","preProcess","postProcess","afterGet","forContext","$forContext","_withLock","$index","tmp","current","text$1","legend","tr","col","td","th","option","optgroup","thead","tbody","colgroup","caption","tfoot","g","defs","symbol","image","circle","ellipse","line","polygon","polyline","t","placeholder","swap","_watcher","ON","MODEL","BIND","TRANSITION","EL","COMPONENT","PARTIAL","IF","FOR","SLOT","uid$3","vFor","inMatch","itMatch","iterator","isOption","diff","updateRef","updateModel","primitive","convertedFromObject","fromObject","trackBy","oldFrags","frags","getCachedFrag","reused","fresh","removalIndex","totalRemoved","deleteCachedFrag","w","targetPrev","prevEl","currentPrev","insertionIndex","staggerCb","staggerAnchor","move","parentScope","cacheFrag","model","__v_model","forceUpdate","staggerAmount","getStagger","trans","stagger","_preProcess","_postProcess","vIf","invalid","nextElementSibling","elseEl","elseFrag","elseFactory","show","toggle","display","text$2","isRange","composing","focused","rawListener","hasjQuery","jQuery","afterBind","radio","checked","select","multiple","initValue","selectedIndex","checkbox","getBooleanValue","_trueValue","_falseValue","checkFilters","hasRead","hasWrite","_unbind","esc","tab","enter","space","delete","up","right","down","on$1","acceptStatement","iframeBind","contentWindow","capture","prevent","reset","importantRE","handleObject","handleSingle","isImportant","setProperty","xlinkNS","xlinkRE","disallowedInterpAttrRE","attrWithPropsRE","enumeratedAttrRE","modelProps","true-value","false-value","bind$1","attrValue","modelProp","setAttributeNS","cloak","for","if","vClass","prevKeys","inlineTemplate","pendingComponentCb","pendingRemovals","pendingRemovalCb","invalidatePending","resolveComponent","mountComponent","ComponentName","activateHooks","cached","getCached","newComponent","waitingFor","extraOptions","defer","_inactive","transitionMode","bindingModes","childKey","parentKey","parentWatcher","childWatcher","TYPE_TRANSITION","TYPE_ANIMATION","transDurationProp","animDurationProp","raf","requestAnimationFrame","waitForTransitionStart","p$1","cancelPending","callHookWithCb","enterCancelled","enterNextTick","enterDone","getCssTransitionType","setupCssCb","leave","leaveCancelled","leaveDone","leaveNextTick","hasPending","hidden","inlineStyles","computedStyles","getComputedStyle","transDuration","animDuration","onEnd","transition$1","oldId","class","_setupParams","_checkStatement","_update","oldVal","mappedKey","_setupParamWatcher","paramWatchers","_paramUnwatchFns","$event","listeners","unwatchFns","slot","fallback","elseBlock","digitsRE","json","indent","capitalize","uppercase","lowercase","currency","_currency","decimals","parseFloat","isFinite","stringified","abs","toFixed","_int","_float","sign","pluralize","delay","version"],"mappings":"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","file":"static/js/vendor.40d72f1e08d4d0677cc0.js","sourcesContent":["webpackJsonp([3,1],{\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n\n/***/ 21:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\r\n\t * vue-router v0.7.13\r\n\t * (c) 2016 Evan You\r\n\t * Released under the MIT License.\r\n\t */\r\n\t(function (global, factory) {\r\n\t   true ? module.exports = factory() :\r\n\t  typeof define === 'function' && define.amd ? define(factory) :\r\n\t  global.VueRouter = factory();\r\n\t}(this, function () { 'use strict';\r\n\t\r\n\t  var babelHelpers = {};\r\n\t\r\n\t  babelHelpers.classCallCheck = function (instance, Constructor) {\r\n\t    if (!(instance instanceof Constructor)) {\r\n\t      throw new TypeError(\"Cannot call a class as a function\");\r\n\t    }\r\n\t  };\r\n\t  function Target(path, matcher, delegate) {\r\n\t    this.path = path;\r\n\t    this.matcher = matcher;\r\n\t    this.delegate = delegate;\r\n\t  }\r\n\t\r\n\t  Target.prototype = {\r\n\t    to: function to(target, callback) {\r\n\t      var delegate = this.delegate;\r\n\t\r\n\t      if (delegate && delegate.willAddRoute) {\r\n\t        target = delegate.willAddRoute(this.matcher.target, target);\r\n\t      }\r\n\t\r\n\t      this.matcher.add(this.path, target);\r\n\t\r\n\t      if (callback) {\r\n\t        if (callback.length === 0) {\r\n\t          throw new Error(\"You must have an argument in the function passed to `to`\");\r\n\t        }\r\n\t        this.matcher.addChild(this.path, target, callback, this.delegate);\r\n\t      }\r\n\t      return this;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function Matcher(target) {\r\n\t    this.routes = {};\r\n\t    this.children = {};\r\n\t    this.target = target;\r\n\t  }\r\n\t\r\n\t  Matcher.prototype = {\r\n\t    add: function add(path, handler) {\r\n\t      this.routes[path] = handler;\r\n\t    },\r\n\t\r\n\t    addChild: function addChild(path, target, callback, delegate) {\r\n\t      var matcher = new Matcher(target);\r\n\t      this.children[path] = matcher;\r\n\t\r\n\t      var match = generateMatch(path, matcher, delegate);\r\n\t\r\n\t      if (delegate && delegate.contextEntered) {\r\n\t        delegate.contextEntered(target, match);\r\n\t      }\r\n\t\r\n\t      callback(match);\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function generateMatch(startingPath, matcher, delegate) {\r\n\t    return function (path, nestedCallback) {\r\n\t      var fullPath = startingPath + path;\r\n\t\r\n\t      if (nestedCallback) {\r\n\t        nestedCallback(generateMatch(fullPath, matcher, delegate));\r\n\t      } else {\r\n\t        return new Target(startingPath + path, matcher, delegate);\r\n\t      }\r\n\t    };\r\n\t  }\r\n\t\r\n\t  function addRoute(routeArray, path, handler) {\r\n\t    var len = 0;\r\n\t    for (var i = 0, l = routeArray.length; i < l; i++) {\r\n\t      len += routeArray[i].path.length;\r\n\t    }\r\n\t\r\n\t    path = path.substr(len);\r\n\t    var route = { path: path, handler: handler };\r\n\t    routeArray.push(route);\r\n\t  }\r\n\t\r\n\t  function eachRoute(baseRoute, matcher, callback, binding) {\r\n\t    var routes = matcher.routes;\r\n\t\r\n\t    for (var path in routes) {\r\n\t      if (routes.hasOwnProperty(path)) {\r\n\t        var routeArray = baseRoute.slice();\r\n\t        addRoute(routeArray, path, routes[path]);\r\n\t\r\n\t        if (matcher.children[path]) {\r\n\t          eachRoute(routeArray, matcher.children[path], callback, binding);\r\n\t        } else {\r\n\t          callback.call(binding, routeArray);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  function map (callback, addRouteCallback) {\r\n\t    var matcher = new Matcher();\r\n\t\r\n\t    callback(generateMatch(\"\", matcher, this.delegate));\r\n\t\r\n\t    eachRoute([], matcher, function (route) {\r\n\t      if (addRouteCallback) {\r\n\t        addRouteCallback(this, route);\r\n\t      } else {\r\n\t        this.add(route);\r\n\t      }\r\n\t    }, this);\r\n\t  }\r\n\t\r\n\t  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\r\n\t\r\n\t  var escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\r\n\t\r\n\t  var noWarning = false;\r\n\t  function warn(msg) {\r\n\t    if (!noWarning && typeof console !== 'undefined') {\r\n\t      console.error('[vue-router] ' + msg);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  function tryDecode(uri, asComponent) {\r\n\t    try {\r\n\t      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);\r\n\t    } catch (e) {\r\n\t      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  function isArray(test) {\r\n\t    return Object.prototype.toString.call(test) === \"[object Array]\";\r\n\t  }\r\n\t\r\n\t  // A Segment represents a segment in the original route description.\r\n\t  // Each Segment type provides an `eachChar` and `regex` method.\r\n\t  //\r\n\t  // The `eachChar` method invokes the callback with one or more character\r\n\t  // specifications. A character specification consumes one or more input\r\n\t  // characters.\r\n\t  //\r\n\t  // The `regex` method returns a regex fragment for the segment. If the\r\n\t  // segment is a dynamic of star segment, the regex fragment also includes\r\n\t  // a capture.\r\n\t  //\r\n\t  // A character specification contains:\r\n\t  //\r\n\t  // * `validChars`: a String with a list of all valid characters, or\r\n\t  // * `invalidChars`: a String with a list of all invalid characters\r\n\t  // * `repeat`: true if the character specification can repeat\r\n\t\r\n\t  function StaticSegment(string) {\r\n\t    this.string = string;\r\n\t  }\r\n\t  StaticSegment.prototype = {\r\n\t    eachChar: function eachChar(callback) {\r\n\t      var string = this.string,\r\n\t          ch;\r\n\t\r\n\t      for (var i = 0, l = string.length; i < l; i++) {\r\n\t        ch = string.charAt(i);\r\n\t        callback({ validChars: ch });\r\n\t      }\r\n\t    },\r\n\t\r\n\t    regex: function regex() {\r\n\t      return this.string.replace(escapeRegex, '\\\\$1');\r\n\t    },\r\n\t\r\n\t    generate: function generate() {\r\n\t      return this.string;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function DynamicSegment(name) {\r\n\t    this.name = name;\r\n\t  }\r\n\t  DynamicSegment.prototype = {\r\n\t    eachChar: function eachChar(callback) {\r\n\t      callback({ invalidChars: \"/\", repeat: true });\r\n\t    },\r\n\t\r\n\t    regex: function regex() {\r\n\t      return \"([^/]+)\";\r\n\t    },\r\n\t\r\n\t    generate: function generate(params) {\r\n\t      var val = params[this.name];\r\n\t      return val == null ? \":\" + this.name : val;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function StarSegment(name) {\r\n\t    this.name = name;\r\n\t  }\r\n\t  StarSegment.prototype = {\r\n\t    eachChar: function eachChar(callback) {\r\n\t      callback({ invalidChars: \"\", repeat: true });\r\n\t    },\r\n\t\r\n\t    regex: function regex() {\r\n\t      return \"(.+)\";\r\n\t    },\r\n\t\r\n\t    generate: function generate(params) {\r\n\t      var val = params[this.name];\r\n\t      return val == null ? \":\" + this.name : val;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function EpsilonSegment() {}\r\n\t  EpsilonSegment.prototype = {\r\n\t    eachChar: function eachChar() {},\r\n\t    regex: function regex() {\r\n\t      return \"\";\r\n\t    },\r\n\t    generate: function generate() {\r\n\t      return \"\";\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function parse(route, names, specificity) {\r\n\t    // normalize route as not starting with a \"/\". Recognition will\r\n\t    // also normalize.\r\n\t    if (route.charAt(0) === \"/\") {\r\n\t      route = route.substr(1);\r\n\t    }\r\n\t\r\n\t    var segments = route.split(\"/\"),\r\n\t        results = [];\r\n\t\r\n\t    // A routes has specificity determined by the order that its different segments\r\n\t    // appear in. This system mirrors how the magnitude of numbers written as strings\r\n\t    // works.\r\n\t    // Consider a number written as: \"abc\". An example would be \"200\". Any other number written\r\n\t    // \"xyz\" will be smaller than \"abc\" so long as `a > z`. For instance, \"199\" is smaller\r\n\t    // then \"200\", even though \"y\" and \"z\" (which are both 9) are larger than \"0\" (the value\r\n\t    // of (`b` and `c`). This is because the leading symbol, \"2\", is larger than the other\r\n\t    // leading symbol, \"1\".\r\n\t    // The rule is that symbols to the left carry more weight than symbols to the right\r\n\t    // when a number is written out as a string. In the above strings, the leading digit\r\n\t    // represents how many 100's are in the number, and it carries more weight than the middle\r\n\t    // number which represents how many 10's are in the number.\r\n\t    // This system of number magnitude works well for route specificity, too. A route written as\r\n\t    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than\r\n\t    // `x`, irrespective of the other parts.\r\n\t    // Because of this similarity, we assign each type of segment a number value written as a\r\n\t    // string. We can find the specificity of compound routes by concatenating these strings\r\n\t    // together, from left to right. After we have looped through all of the segments,\r\n\t    // we convert the string to a number.\r\n\t    specificity.val = '';\r\n\t\r\n\t    for (var i = 0, l = segments.length; i < l; i++) {\r\n\t      var segment = segments[i],\r\n\t          match;\r\n\t\r\n\t      if (match = segment.match(/^:([^\\/]+)$/)) {\r\n\t        results.push(new DynamicSegment(match[1]));\r\n\t        names.push(match[1]);\r\n\t        specificity.val += '3';\r\n\t      } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\r\n\t        results.push(new StarSegment(match[1]));\r\n\t        specificity.val += '2';\r\n\t        names.push(match[1]);\r\n\t      } else if (segment === \"\") {\r\n\t        results.push(new EpsilonSegment());\r\n\t        specificity.val += '1';\r\n\t      } else {\r\n\t        results.push(new StaticSegment(segment));\r\n\t        specificity.val += '4';\r\n\t      }\r\n\t    }\r\n\t\r\n\t    specificity.val = +specificity.val;\r\n\t\r\n\t    return results;\r\n\t  }\r\n\t\r\n\t  // A State has a character specification and (`charSpec`) and a list of possible\r\n\t  // subsequent states (`nextStates`).\r\n\t  //\r\n\t  // If a State is an accepting state, it will also have several additional\r\n\t  // properties:\r\n\t  //\r\n\t  // * `regex`: A regular expression that is used to extract parameters from paths\r\n\t  //   that reached this accepting state.\r\n\t  // * `handlers`: Information on how to convert the list of captures into calls\r\n\t  //   to registered handlers with the specified parameters\r\n\t  // * `types`: How many static, dynamic or star segments in this route. Used to\r\n\t  //   decide which route to use if multiple registered routes match a path.\r\n\t  //\r\n\t  // Currently, State is implemented naively by looping over `nextStates` and\r\n\t  // comparing a character specification against a character. A more efficient\r\n\t  // implementation would use a hash of keys pointing at one or more next states.\r\n\t\r\n\t  function State(charSpec) {\r\n\t    this.charSpec = charSpec;\r\n\t    this.nextStates = [];\r\n\t  }\r\n\t\r\n\t  State.prototype = {\r\n\t    get: function get(charSpec) {\r\n\t      var nextStates = this.nextStates;\r\n\t\r\n\t      for (var i = 0, l = nextStates.length; i < l; i++) {\r\n\t        var child = nextStates[i];\r\n\t\r\n\t        var isEqual = child.charSpec.validChars === charSpec.validChars;\r\n\t        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\r\n\t\r\n\t        if (isEqual) {\r\n\t          return child;\r\n\t        }\r\n\t      }\r\n\t    },\r\n\t\r\n\t    put: function put(charSpec) {\r\n\t      var state;\r\n\t\r\n\t      // If the character specification already exists in a child of the current\r\n\t      // state, just return that state.\r\n\t      if (state = this.get(charSpec)) {\r\n\t        return state;\r\n\t      }\r\n\t\r\n\t      // Make a new state for the character spec\r\n\t      state = new State(charSpec);\r\n\t\r\n\t      // Insert the new state as a child of the current state\r\n\t      this.nextStates.push(state);\r\n\t\r\n\t      // If this character specification repeats, insert the new state as a child\r\n\t      // of itself. Note that this will not trigger an infinite loop because each\r\n\t      // transition during recognition consumes a character.\r\n\t      if (charSpec.repeat) {\r\n\t        state.nextStates.push(state);\r\n\t      }\r\n\t\r\n\t      // Return the new state\r\n\t      return state;\r\n\t    },\r\n\t\r\n\t    // Find a list of child states matching the next character\r\n\t    match: function match(ch) {\r\n\t      // DEBUG \"Processing `\" + ch + \"`:\"\r\n\t      var nextStates = this.nextStates,\r\n\t          child,\r\n\t          charSpec,\r\n\t          chars;\r\n\t\r\n\t      // DEBUG \"  \" + debugState(this)\r\n\t      var returned = [];\r\n\t\r\n\t      for (var i = 0, l = nextStates.length; i < l; i++) {\r\n\t        child = nextStates[i];\r\n\t\r\n\t        charSpec = child.charSpec;\r\n\t\r\n\t        if (typeof (chars = charSpec.validChars) !== 'undefined') {\r\n\t          if (chars.indexOf(ch) !== -1) {\r\n\t            returned.push(child);\r\n\t          }\r\n\t        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\r\n\t          if (chars.indexOf(ch) === -1) {\r\n\t            returned.push(child);\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t      return returned;\r\n\t    }\r\n\t\r\n\t    /** IF DEBUG\r\n\t    , debug: function() {\r\n\t      var charSpec = this.charSpec,\r\n\t          debug = \"[\",\r\n\t          chars = charSpec.validChars || charSpec.invalidChars;\r\n\t       if (charSpec.invalidChars) { debug += \"^\"; }\r\n\t      debug += chars;\r\n\t      debug += \"]\";\r\n\t       if (charSpec.repeat) { debug += \"+\"; }\r\n\t       return debug;\r\n\t    }\r\n\t    END IF **/\r\n\t  };\r\n\t\r\n\t  /** IF DEBUG\r\n\t  function debug(log) {\r\n\t    console.log(log);\r\n\t  }\r\n\t\r\n\t  function debugState(state) {\r\n\t    return state.nextStates.map(function(n) {\r\n\t      if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\r\n\t      return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\r\n\t    }).join(\", \")\r\n\t  }\r\n\t  END IF **/\r\n\t\r\n\t  // Sort the routes by specificity\r\n\t  function sortSolutions(states) {\r\n\t    return states.sort(function (a, b) {\r\n\t      return b.specificity.val - a.specificity.val;\r\n\t    });\r\n\t  }\r\n\t\r\n\t  function recognizeChar(states, ch) {\r\n\t    var nextStates = [];\r\n\t\r\n\t    for (var i = 0, l = states.length; i < l; i++) {\r\n\t      var state = states[i];\r\n\t\r\n\t      nextStates = nextStates.concat(state.match(ch));\r\n\t    }\r\n\t\r\n\t    return nextStates;\r\n\t  }\r\n\t\r\n\t  var oCreate = Object.create || function (proto) {\r\n\t    function F() {}\r\n\t    F.prototype = proto;\r\n\t    return new F();\r\n\t  };\r\n\t\r\n\t  function RecognizeResults(queryParams) {\r\n\t    this.queryParams = queryParams || {};\r\n\t  }\r\n\t  RecognizeResults.prototype = oCreate({\r\n\t    splice: Array.prototype.splice,\r\n\t    slice: Array.prototype.slice,\r\n\t    push: Array.prototype.push,\r\n\t    length: 0,\r\n\t    queryParams: null\r\n\t  });\r\n\t\r\n\t  function findHandler(state, path, queryParams) {\r\n\t    var handlers = state.handlers,\r\n\t        regex = state.regex;\r\n\t    var captures = path.match(regex),\r\n\t        currentCapture = 1;\r\n\t    var result = new RecognizeResults(queryParams);\r\n\t\r\n\t    for (var i = 0, l = handlers.length; i < l; i++) {\r\n\t      var handler = handlers[i],\r\n\t          names = handler.names,\r\n\t          params = {};\r\n\t\r\n\t      for (var j = 0, m = names.length; j < m; j++) {\r\n\t        params[names[j]] = captures[currentCapture++];\r\n\t      }\r\n\t\r\n\t      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t  }\r\n\t\r\n\t  function addSegment(currentState, segment) {\r\n\t    segment.eachChar(function (ch) {\r\n\t      var state;\r\n\t\r\n\t      currentState = currentState.put(ch);\r\n\t    });\r\n\t\r\n\t    return currentState;\r\n\t  }\r\n\t\r\n\t  function decodeQueryParamPart(part) {\r\n\t    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\r\n\t    part = part.replace(/\\+/gm, '%20');\r\n\t    return tryDecode(part, true);\r\n\t  }\r\n\t\r\n\t  // The main interface\r\n\t\r\n\t  var RouteRecognizer = function RouteRecognizer() {\r\n\t    this.rootState = new State();\r\n\t    this.names = {};\r\n\t  };\r\n\t\r\n\t  RouteRecognizer.prototype = {\r\n\t    add: function add(routes, options) {\r\n\t      var currentState = this.rootState,\r\n\t          regex = \"^\",\r\n\t          specificity = {},\r\n\t          handlers = [],\r\n\t          allSegments = [],\r\n\t          name;\r\n\t\r\n\t      var isEmpty = true;\r\n\t\r\n\t      for (var i = 0, l = routes.length; i < l; i++) {\r\n\t        var route = routes[i],\r\n\t            names = [];\r\n\t\r\n\t        var segments = parse(route.path, names, specificity);\r\n\t\r\n\t        allSegments = allSegments.concat(segments);\r\n\t\r\n\t        for (var j = 0, m = segments.length; j < m; j++) {\r\n\t          var segment = segments[j];\r\n\t\r\n\t          if (segment instanceof EpsilonSegment) {\r\n\t            continue;\r\n\t          }\r\n\t\r\n\t          isEmpty = false;\r\n\t\r\n\t          // Add a \"/\" for the new segment\r\n\t          currentState = currentState.put({ validChars: \"/\" });\r\n\t          regex += \"/\";\r\n\t\r\n\t          // Add a representation of the segment to the NFA and regex\r\n\t          currentState = addSegment(currentState, segment);\r\n\t          regex += segment.regex();\r\n\t        }\r\n\t\r\n\t        var handler = { handler: route.handler, names: names };\r\n\t        handlers.push(handler);\r\n\t      }\r\n\t\r\n\t      if (isEmpty) {\r\n\t        currentState = currentState.put({ validChars: \"/\" });\r\n\t        regex += \"/\";\r\n\t      }\r\n\t\r\n\t      currentState.handlers = handlers;\r\n\t      currentState.regex = new RegExp(regex + \"$\");\r\n\t      currentState.specificity = specificity;\r\n\t\r\n\t      if (name = options && options.as) {\r\n\t        this.names[name] = {\r\n\t          segments: allSegments,\r\n\t          handlers: handlers\r\n\t        };\r\n\t      }\r\n\t    },\r\n\t\r\n\t    handlersFor: function handlersFor(name) {\r\n\t      var route = this.names[name],\r\n\t          result = [];\r\n\t      if (!route) {\r\n\t        throw new Error(\"There is no route named \" + name);\r\n\t      }\r\n\t\r\n\t      for (var i = 0, l = route.handlers.length; i < l; i++) {\r\n\t        result.push(route.handlers[i]);\r\n\t      }\r\n\t\r\n\t      return result;\r\n\t    },\r\n\t\r\n\t    hasRoute: function hasRoute(name) {\r\n\t      return !!this.names[name];\r\n\t    },\r\n\t\r\n\t    generate: function generate(name, params) {\r\n\t      var route = this.names[name],\r\n\t          output = \"\";\r\n\t      if (!route) {\r\n\t        throw new Error(\"There is no route named \" + name);\r\n\t      }\r\n\t\r\n\t      var segments = route.segments;\r\n\t\r\n\t      for (var i = 0, l = segments.length; i < l; i++) {\r\n\t        var segment = segments[i];\r\n\t\r\n\t        if (segment instanceof EpsilonSegment) {\r\n\t          continue;\r\n\t        }\r\n\t\r\n\t        output += \"/\";\r\n\t        output += segment.generate(params);\r\n\t      }\r\n\t\r\n\t      if (output.charAt(0) !== '/') {\r\n\t        output = '/' + output;\r\n\t      }\r\n\t\r\n\t      if (params && params.queryParams) {\r\n\t        output += this.generateQueryString(params.queryParams);\r\n\t      }\r\n\t\r\n\t      return output;\r\n\t    },\r\n\t\r\n\t    generateQueryString: function generateQueryString(params) {\r\n\t      var pairs = [];\r\n\t      var keys = [];\r\n\t      for (var key in params) {\r\n\t        if (params.hasOwnProperty(key)) {\r\n\t          keys.push(key);\r\n\t        }\r\n\t      }\r\n\t      keys.sort();\r\n\t      for (var i = 0, len = keys.length; i < len; i++) {\r\n\t        key = keys[i];\r\n\t        var value = params[key];\r\n\t        if (value == null) {\r\n\t          continue;\r\n\t        }\r\n\t        var pair = encodeURIComponent(key);\r\n\t        if (isArray(value)) {\r\n\t          for (var j = 0, l = value.length; j < l; j++) {\r\n\t            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\r\n\t            pairs.push(arrayPair);\r\n\t          }\r\n\t        } else {\r\n\t          pair += \"=\" + encodeURIComponent(value);\r\n\t          pairs.push(pair);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      if (pairs.length === 0) {\r\n\t        return '';\r\n\t      }\r\n\t\r\n\t      return \"?\" + pairs.join(\"&\");\r\n\t    },\r\n\t\r\n\t    parseQueryString: function parseQueryString(queryString) {\r\n\t      var pairs = queryString.split(\"&\"),\r\n\t          queryParams = {};\r\n\t      for (var i = 0; i < pairs.length; i++) {\r\n\t        var pair = pairs[i].split('='),\r\n\t            key = decodeQueryParamPart(pair[0]),\r\n\t            keyLength = key.length,\r\n\t            isArray = false,\r\n\t            value;\r\n\t        if (pair.length === 1) {\r\n\t          value = 'true';\r\n\t        } else {\r\n\t          //Handle arrays\r\n\t          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {\r\n\t            isArray = true;\r\n\t            key = key.slice(0, keyLength - 2);\r\n\t            if (!queryParams[key]) {\r\n\t              queryParams[key] = [];\r\n\t            }\r\n\t          }\r\n\t          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';\r\n\t        }\r\n\t        if (isArray) {\r\n\t          queryParams[key].push(value);\r\n\t        } else {\r\n\t          queryParams[key] = value;\r\n\t        }\r\n\t      }\r\n\t      return queryParams;\r\n\t    },\r\n\t\r\n\t    recognize: function recognize(path, silent) {\r\n\t      noWarning = silent;\r\n\t      var states = [this.rootState],\r\n\t          pathLen,\r\n\t          i,\r\n\t          l,\r\n\t          queryStart,\r\n\t          queryParams = {},\r\n\t          isSlashDropped = false;\r\n\t\r\n\t      queryStart = path.indexOf('?');\r\n\t      if (queryStart !== -1) {\r\n\t        var queryString = path.substr(queryStart + 1, path.length);\r\n\t        path = path.substr(0, queryStart);\r\n\t        if (queryString) {\r\n\t          queryParams = this.parseQueryString(queryString);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      path = tryDecode(path);\r\n\t      if (!path) return;\r\n\t\r\n\t      // DEBUG GROUP path\r\n\t\r\n\t      if (path.charAt(0) !== \"/\") {\r\n\t        path = \"/\" + path;\r\n\t      }\r\n\t\r\n\t      pathLen = path.length;\r\n\t      if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\r\n\t        path = path.substr(0, pathLen - 1);\r\n\t        isSlashDropped = true;\r\n\t      }\r\n\t\r\n\t      for (i = 0, l = path.length; i < l; i++) {\r\n\t        states = recognizeChar(states, path.charAt(i));\r\n\t        if (!states.length) {\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      // END DEBUG GROUP\r\n\t\r\n\t      var solutions = [];\r\n\t      for (i = 0, l = states.length; i < l; i++) {\r\n\t        if (states[i].handlers) {\r\n\t          solutions.push(states[i]);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      states = sortSolutions(solutions);\r\n\t\r\n\t      var state = solutions[0];\r\n\t\r\n\t      if (state && state.handlers) {\r\n\t        // if a trailing slash was dropped and a star segment is the last segment\r\n\t        // specified, put the trailing slash back\r\n\t        if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\r\n\t          path = path + \"/\";\r\n\t        }\r\n\t        return findHandler(state, path, queryParams);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  RouteRecognizer.prototype.map = map;\r\n\t\r\n\t  var genQuery = RouteRecognizer.prototype.generateQueryString;\r\n\t\r\n\t  // export default for holding the Vue reference\r\n\t  var exports$1 = {};\r\n\t  /**\r\n\t   * Warn stuff.\r\n\t   *\r\n\t   * @param {String} msg\r\n\t   */\r\n\t\r\n\t  function warn$1(msg) {\r\n\t    /* istanbul ignore next */\r\n\t    if (typeof console !== 'undefined') {\r\n\t      console.error('[vue-router] ' + msg);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Resolve a relative path.\r\n\t   *\r\n\t   * @param {String} base\r\n\t   * @param {String} relative\r\n\t   * @param {Boolean} append\r\n\t   * @return {String}\r\n\t   */\r\n\t\r\n\t  function resolvePath(base, relative, append) {\r\n\t    var query = base.match(/(\\?.*)$/);\r\n\t    if (query) {\r\n\t      query = query[1];\r\n\t      base = base.slice(0, -query.length);\r\n\t    }\r\n\t    // a query!\r\n\t    if (relative.charAt(0) === '?') {\r\n\t      return base + relative;\r\n\t    }\r\n\t    var stack = base.split('/');\r\n\t    // remove trailing segment if:\r\n\t    // - not appending\r\n\t    // - appending to trailing slash (last segment is empty)\r\n\t    if (!append || !stack[stack.length - 1]) {\r\n\t      stack.pop();\r\n\t    }\r\n\t    // resolve relative path\r\n\t    var segments = relative.replace(/^\\//, '').split('/');\r\n\t    for (var i = 0; i < segments.length; i++) {\r\n\t      var segment = segments[i];\r\n\t      if (segment === '.') {\r\n\t        continue;\r\n\t      } else if (segment === '..') {\r\n\t        stack.pop();\r\n\t      } else {\r\n\t        stack.push(segment);\r\n\t      }\r\n\t    }\r\n\t    // ensure leading slash\r\n\t    if (stack[0] !== '') {\r\n\t      stack.unshift('');\r\n\t    }\r\n\t    return stack.join('/');\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Forgiving check for a promise\r\n\t   *\r\n\t   * @param {Object} p\r\n\t   * @return {Boolean}\r\n\t   */\r\n\t\r\n\t  function isPromise(p) {\r\n\t    return p && typeof p.then === 'function';\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Retrive a route config field from a component instance\r\n\t   * OR a component contructor.\r\n\t   *\r\n\t   * @param {Function|Vue} component\r\n\t   * @param {String} name\r\n\t   * @return {*}\r\n\t   */\r\n\t\r\n\t  function getRouteConfig(component, name) {\r\n\t    var options = component && (component.$options || component.options);\r\n\t    return options && options.route && options.route[name];\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Resolve an async component factory. Have to do a dirty\r\n\t   * mock here because of Vue core's internal API depends on\r\n\t   * an ID check.\r\n\t   *\r\n\t   * @param {Object} handler\r\n\t   * @param {Function} cb\r\n\t   */\r\n\t\r\n\t  var resolver = undefined;\r\n\t\r\n\t  function resolveAsyncComponent(handler, cb) {\r\n\t    if (!resolver) {\r\n\t      resolver = {\r\n\t        resolve: exports$1.Vue.prototype._resolveComponent,\r\n\t        $options: {\r\n\t          components: {\r\n\t            _: handler.component\r\n\t          }\r\n\t        }\r\n\t      };\r\n\t    } else {\r\n\t      resolver.$options.components._ = handler.component;\r\n\t    }\r\n\t    resolver.resolve('_', function (Component) {\r\n\t      handler.component = Component;\r\n\t      cb(Component);\r\n\t    });\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Map the dynamic segments in a path to params.\r\n\t   *\r\n\t   * @param {String} path\r\n\t   * @param {Object} params\r\n\t   * @param {Object} query\r\n\t   */\r\n\t\r\n\t  function mapParams(path, params, query) {\r\n\t    if (params === undefined) params = {};\r\n\t\r\n\t    path = path.replace(/:([^\\/]+)/g, function (_, key) {\r\n\t      var val = params[key];\r\n\t      /* istanbul ignore if */\r\n\t      if (!val) {\r\n\t        warn$1('param \"' + key + '\" not found when generating ' + 'path for \"' + path + '\" with params ' + JSON.stringify(params));\r\n\t      }\r\n\t      return val || '';\r\n\t    });\r\n\t    if (query) {\r\n\t      path += genQuery(query);\r\n\t    }\r\n\t    return path;\r\n\t  }\r\n\t\r\n\t  var hashRE = /#.*$/;\r\n\t\r\n\t  var HTML5History = (function () {\r\n\t    function HTML5History(_ref) {\r\n\t      var root = _ref.root;\r\n\t      var onChange = _ref.onChange;\r\n\t      babelHelpers.classCallCheck(this, HTML5History);\r\n\t\r\n\t      if (root && root !== '/') {\r\n\t        // make sure there's the starting slash\r\n\t        if (root.charAt(0) !== '/') {\r\n\t          root = '/' + root;\r\n\t        }\r\n\t        // remove trailing slash\r\n\t        this.root = root.replace(/\\/$/, '');\r\n\t        this.rootRE = new RegExp('^\\\\' + this.root);\r\n\t      } else {\r\n\t        this.root = null;\r\n\t      }\r\n\t      this.onChange = onChange;\r\n\t      // check base tag\r\n\t      var baseEl = document.querySelector('base');\r\n\t      this.base = baseEl && baseEl.getAttribute('href');\r\n\t    }\r\n\t\r\n\t    HTML5History.prototype.start = function start() {\r\n\t      var _this = this;\r\n\t\r\n\t      this.listener = function (e) {\r\n\t        var url = location.pathname + location.search;\r\n\t        if (_this.root) {\r\n\t          url = url.replace(_this.rootRE, '');\r\n\t        }\r\n\t        _this.onChange(url, e && e.state, location.hash);\r\n\t      };\r\n\t      window.addEventListener('popstate', this.listener);\r\n\t      this.listener();\r\n\t    };\r\n\t\r\n\t    HTML5History.prototype.stop = function stop() {\r\n\t      window.removeEventListener('popstate', this.listener);\r\n\t    };\r\n\t\r\n\t    HTML5History.prototype.go = function go(path, replace, append) {\r\n\t      var url = this.formatPath(path, append);\r\n\t      if (replace) {\r\n\t        history.replaceState({}, '', url);\r\n\t      } else {\r\n\t        // record scroll position by replacing current state\r\n\t        history.replaceState({\r\n\t          pos: {\r\n\t            x: window.pageXOffset,\r\n\t            y: window.pageYOffset\r\n\t          }\r\n\t        }, '', location.href);\r\n\t        // then push new state\r\n\t        history.pushState({}, '', url);\r\n\t      }\r\n\t      var hashMatch = path.match(hashRE);\r\n\t      var hash = hashMatch && hashMatch[0];\r\n\t      path = url\r\n\t      // strip hash so it doesn't mess up params\r\n\t      .replace(hashRE, '')\r\n\t      // remove root before matching\r\n\t      .replace(this.rootRE, '');\r\n\t      this.onChange(path, null, hash);\r\n\t    };\r\n\t\r\n\t    HTML5History.prototype.formatPath = function formatPath(path, append) {\r\n\t      return path.charAt(0) === '/'\r\n\t      // absolute path\r\n\t      ? this.root ? this.root + '/' + path.replace(/^\\//, '') : path : resolvePath(this.base || location.pathname, path, append);\r\n\t    };\r\n\t\r\n\t    return HTML5History;\r\n\t  })();\r\n\t\r\n\t  var HashHistory = (function () {\r\n\t    function HashHistory(_ref) {\r\n\t      var hashbang = _ref.hashbang;\r\n\t      var onChange = _ref.onChange;\r\n\t      babelHelpers.classCallCheck(this, HashHistory);\r\n\t\r\n\t      this.hashbang = hashbang;\r\n\t      this.onChange = onChange;\r\n\t    }\r\n\t\r\n\t    HashHistory.prototype.start = function start() {\r\n\t      var self = this;\r\n\t      this.listener = function () {\r\n\t        var path = location.hash;\r\n\t        var raw = path.replace(/^#!?/, '');\r\n\t        // always\r\n\t        if (raw.charAt(0) !== '/') {\r\n\t          raw = '/' + raw;\r\n\t        }\r\n\t        var formattedPath = self.formatPath(raw);\r\n\t        if (formattedPath !== path) {\r\n\t          location.replace(formattedPath);\r\n\t          return;\r\n\t        }\r\n\t        // determine query\r\n\t        // note it's possible to have queries in both the actual URL\r\n\t        // and the hash fragment itself.\r\n\t        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;\r\n\t        self.onChange(path.replace(/^#!?/, '') + query);\r\n\t      };\r\n\t      window.addEventListener('hashchange', this.listener);\r\n\t      this.listener();\r\n\t    };\r\n\t\r\n\t    HashHistory.prototype.stop = function stop() {\r\n\t      window.removeEventListener('hashchange', this.listener);\r\n\t    };\r\n\t\r\n\t    HashHistory.prototype.go = function go(path, replace, append) {\r\n\t      path = this.formatPath(path, append);\r\n\t      if (replace) {\r\n\t        location.replace(path);\r\n\t      } else {\r\n\t        location.hash = path;\r\n\t      }\r\n\t    };\r\n\t\r\n\t    HashHistory.prototype.formatPath = function formatPath(path, append) {\r\n\t      var isAbsoloute = path.charAt(0) === '/';\r\n\t      var prefix = '#' + (this.hashbang ? '!' : '');\r\n\t      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);\r\n\t    };\r\n\t\r\n\t    return HashHistory;\r\n\t  })();\r\n\t\r\n\t  var AbstractHistory = (function () {\r\n\t    function AbstractHistory(_ref) {\r\n\t      var onChange = _ref.onChange;\r\n\t      babelHelpers.classCallCheck(this, AbstractHistory);\r\n\t\r\n\t      this.onChange = onChange;\r\n\t      this.currentPath = '/';\r\n\t    }\r\n\t\r\n\t    AbstractHistory.prototype.start = function start() {\r\n\t      this.onChange('/');\r\n\t    };\r\n\t\r\n\t    AbstractHistory.prototype.stop = function stop() {\r\n\t      // noop\r\n\t    };\r\n\t\r\n\t    AbstractHistory.prototype.go = function go(path, replace, append) {\r\n\t      path = this.currentPath = this.formatPath(path, append);\r\n\t      this.onChange(path);\r\n\t    };\r\n\t\r\n\t    AbstractHistory.prototype.formatPath = function formatPath(path, append) {\r\n\t      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);\r\n\t    };\r\n\t\r\n\t    return AbstractHistory;\r\n\t  })();\r\n\t\r\n\t  /**\r\n\t   * Determine the reusability of an existing router view.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   * @param {Object} handler\r\n\t   * @param {Transition} transition\r\n\t   */\r\n\t\r\n\t  function canReuse(view, handler, transition) {\r\n\t    var component = view.childVM;\r\n\t    if (!component || !handler) {\r\n\t      return false;\r\n\t    }\r\n\t    // important: check view.Component here because it may\r\n\t    // have been changed in activate hook\r\n\t    if (view.Component !== handler.component) {\r\n\t      return false;\r\n\t    }\r\n\t    var canReuseFn = getRouteConfig(component, 'canReuse');\r\n\t    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {\r\n\t      to: transition.to,\r\n\t      from: transition.from\r\n\t    }) : true; // defaults to true\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Check if a component can deactivate.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   * @param {Transition} transition\r\n\t   * @param {Function} next\r\n\t   */\r\n\t\r\n\t  function canDeactivate(view, transition, next) {\r\n\t    var fromComponent = view.childVM;\r\n\t    var hook = getRouteConfig(fromComponent, 'canDeactivate');\r\n\t    if (!hook) {\r\n\t      next();\r\n\t    } else {\r\n\t      transition.callHook(hook, fromComponent, next, {\r\n\t        expectBoolean: true\r\n\t      });\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Check if a component can activate.\r\n\t   *\r\n\t   * @param {Object} handler\r\n\t   * @param {Transition} transition\r\n\t   * @param {Function} next\r\n\t   */\r\n\t\r\n\t  function canActivate(handler, transition, next) {\r\n\t    resolveAsyncComponent(handler, function (Component) {\r\n\t      // have to check due to async-ness\r\n\t      if (transition.aborted) {\r\n\t        return;\r\n\t      }\r\n\t      // determine if this component can be activated\r\n\t      var hook = getRouteConfig(Component, 'canActivate');\r\n\t      if (!hook) {\r\n\t        next();\r\n\t      } else {\r\n\t        transition.callHook(hook, null, next, {\r\n\t          expectBoolean: true\r\n\t        });\r\n\t      }\r\n\t    });\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Call deactivate hooks for existing router-views.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   * @param {Transition} transition\r\n\t   * @param {Function} next\r\n\t   */\r\n\t\r\n\t  function deactivate(view, transition, next) {\r\n\t    var component = view.childVM;\r\n\t    var hook = getRouteConfig(component, 'deactivate');\r\n\t    if (!hook) {\r\n\t      next();\r\n\t    } else {\r\n\t      transition.callHooks(hook, component, next);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Activate / switch component for a router-view.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   * @param {Transition} transition\r\n\t   * @param {Number} depth\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  function activate(view, transition, depth, cb, reuse) {\r\n\t    var handler = transition.activateQueue[depth];\r\n\t    if (!handler) {\r\n\t      saveChildView(view);\r\n\t      if (view._bound) {\r\n\t        view.setComponent(null);\r\n\t      }\r\n\t      cb && cb();\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    var Component = view.Component = handler.component;\r\n\t    var activateHook = getRouteConfig(Component, 'activate');\r\n\t    var dataHook = getRouteConfig(Component, 'data');\r\n\t    var waitForData = getRouteConfig(Component, 'waitForData');\r\n\t\r\n\t    view.depth = depth;\r\n\t    view.activated = false;\r\n\t\r\n\t    var component = undefined;\r\n\t    var loading = !!(dataHook && !waitForData);\r\n\t\r\n\t    // \"reuse\" is a flag passed down when the parent view is\r\n\t    // either reused via keep-alive or as a child of a kept-alive view.\r\n\t    // of course we can only reuse if the current kept-alive instance\r\n\t    // is of the correct type.\r\n\t    reuse = reuse && view.childVM && view.childVM.constructor === Component;\r\n\t\r\n\t    if (reuse) {\r\n\t      // just reuse\r\n\t      component = view.childVM;\r\n\t      component.$loadingRouteData = loading;\r\n\t    } else {\r\n\t      saveChildView(view);\r\n\t\r\n\t      // unbuild current component. this step also destroys\r\n\t      // and removes all nested child views.\r\n\t      view.unbuild(true);\r\n\t\r\n\t      // build the new component. this will also create the\r\n\t      // direct child view of the current one. it will register\r\n\t      // itself as view.childView.\r\n\t      component = view.build({\r\n\t        _meta: {\r\n\t          $loadingRouteData: loading\r\n\t        },\r\n\t        created: function created() {\r\n\t          this._routerView = view;\r\n\t        }\r\n\t      });\r\n\t\r\n\t      // handle keep-alive.\r\n\t      // when a kept-alive child vm is restored, we need to\r\n\t      // add its cached child views into the router's view list,\r\n\t      // and also properly update current view's child view.\r\n\t      if (view.keepAlive) {\r\n\t        component.$loadingRouteData = loading;\r\n\t        var cachedChildView = component._keepAliveRouterView;\r\n\t        if (cachedChildView) {\r\n\t          view.childView = cachedChildView;\r\n\t          component._keepAliveRouterView = null;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // cleanup the component in case the transition is aborted\r\n\t    // before the component is ever inserted.\r\n\t    var cleanup = function cleanup() {\r\n\t      component.$destroy();\r\n\t    };\r\n\t\r\n\t    // actually insert the component and trigger transition\r\n\t    var insert = function insert() {\r\n\t      if (reuse) {\r\n\t        cb && cb();\r\n\t        return;\r\n\t      }\r\n\t      var router = transition.router;\r\n\t      if (router._rendered || router._transitionOnLoad) {\r\n\t        view.transition(component);\r\n\t      } else {\r\n\t        // no transition on first render, manual transition\r\n\t        /* istanbul ignore if */\r\n\t        if (view.setCurrent) {\r\n\t          // 0.12 compat\r\n\t          view.setCurrent(component);\r\n\t        } else {\r\n\t          // 1.0\r\n\t          view.childVM = component;\r\n\t        }\r\n\t        component.$before(view.anchor, null, false);\r\n\t      }\r\n\t      cb && cb();\r\n\t    };\r\n\t\r\n\t    var afterData = function afterData() {\r\n\t      // activate the child view\r\n\t      if (view.childView) {\r\n\t        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);\r\n\t      }\r\n\t      insert();\r\n\t    };\r\n\t\r\n\t    // called after activation hook is resolved\r\n\t    var afterActivate = function afterActivate() {\r\n\t      view.activated = true;\r\n\t      if (dataHook && waitForData) {\r\n\t        // wait until data loaded to insert\r\n\t        loadData(component, transition, dataHook, afterData, cleanup);\r\n\t      } else {\r\n\t        // load data and insert at the same time\r\n\t        if (dataHook) {\r\n\t          loadData(component, transition, dataHook);\r\n\t        }\r\n\t        afterData();\r\n\t      }\r\n\t    };\r\n\t\r\n\t    if (activateHook) {\r\n\t      transition.callHooks(activateHook, component, afterActivate, {\r\n\t        cleanup: cleanup,\r\n\t        postActivate: true\r\n\t      });\r\n\t    } else {\r\n\t      afterActivate();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Reuse a view, just reload data if necessary.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   * @param {Transition} transition\r\n\t   */\r\n\t\r\n\t  function reuse(view, transition) {\r\n\t    var component = view.childVM;\r\n\t    var dataHook = getRouteConfig(component, 'data');\r\n\t    if (dataHook) {\r\n\t      loadData(component, transition, dataHook);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Asynchronously load and apply data to component.\r\n\t   *\r\n\t   * @param {Vue} component\r\n\t   * @param {Transition} transition\r\n\t   * @param {Function} hook\r\n\t   * @param {Function} cb\r\n\t   * @param {Function} cleanup\r\n\t   */\r\n\t\r\n\t  function loadData(component, transition, hook, cb, cleanup) {\r\n\t    component.$loadingRouteData = true;\r\n\t    transition.callHooks(hook, component, function () {\r\n\t      component.$loadingRouteData = false;\r\n\t      component.$emit('route-data-loaded', component);\r\n\t      cb && cb();\r\n\t    }, {\r\n\t      cleanup: cleanup,\r\n\t      postActivate: true,\r\n\t      processData: function processData(data) {\r\n\t        // handle promise sugar syntax\r\n\t        var promises = [];\r\n\t        if (isPlainObject(data)) {\r\n\t          Object.keys(data).forEach(function (key) {\r\n\t            var val = data[key];\r\n\t            if (isPromise(val)) {\r\n\t              promises.push(val.then(function (resolvedVal) {\r\n\t                component.$set(key, resolvedVal);\r\n\t              }));\r\n\t            } else {\r\n\t              component.$set(key, val);\r\n\t            }\r\n\t          });\r\n\t        }\r\n\t        if (promises.length) {\r\n\t          return promises[0].constructor.all(promises);\r\n\t        }\r\n\t      }\r\n\t    });\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Save the child view for a kept-alive view so that\r\n\t   * we can restore it when it is switched back to.\r\n\t   *\r\n\t   * @param {Directive} view\r\n\t   */\r\n\t\r\n\t  function saveChildView(view) {\r\n\t    if (view.keepAlive && view.childVM && view.childView) {\r\n\t      view.childVM._keepAliveRouterView = view.childView;\r\n\t    }\r\n\t    view.childView = null;\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Check plain object.\r\n\t   *\r\n\t   * @param {*} val\r\n\t   */\r\n\t\r\n\t  function isPlainObject(val) {\r\n\t    return Object.prototype.toString.call(val) === '[object Object]';\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * A RouteTransition object manages the pipeline of a\r\n\t   * router-view switching process. This is also the object\r\n\t   * passed into user route hooks.\r\n\t   *\r\n\t   * @param {Router} router\r\n\t   * @param {Route} to\r\n\t   * @param {Route} from\r\n\t   */\r\n\t\r\n\t  var RouteTransition = (function () {\r\n\t    function RouteTransition(router, to, from) {\r\n\t      babelHelpers.classCallCheck(this, RouteTransition);\r\n\t\r\n\t      this.router = router;\r\n\t      this.to = to;\r\n\t      this.from = from;\r\n\t      this.next = null;\r\n\t      this.aborted = false;\r\n\t      this.done = false;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Abort current transition and return to previous location.\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.abort = function abort() {\r\n\t      if (!this.aborted) {\r\n\t        this.aborted = true;\r\n\t        // if the root path throws an error during validation\r\n\t        // on initial load, it gets caught in an infinite loop.\r\n\t        var abortingOnLoad = !this.from.path && this.to.path === '/';\r\n\t        if (!abortingOnLoad) {\r\n\t          this.router.replace(this.from.path || '/');\r\n\t        }\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Abort current transition and redirect to a new location.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.redirect = function redirect(path) {\r\n\t      if (!this.aborted) {\r\n\t        this.aborted = true;\r\n\t        if (typeof path === 'string') {\r\n\t          path = mapParams(path, this.to.params, this.to.query);\r\n\t        } else {\r\n\t          path.params = path.params || this.to.params;\r\n\t          path.query = path.query || this.to.query;\r\n\t        }\r\n\t        this.router.replace(path);\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * A router view transition's pipeline can be described as\r\n\t     * follows, assuming we are transitioning from an existing\r\n\t     * <router-view> chain [Component A, Component B] to a new\r\n\t     * chain [Component A, Component C]:\r\n\t     *\r\n\t     *  A    A\r\n\t     *  | => |\r\n\t     *  B    C\r\n\t     *\r\n\t     * 1. Reusablity phase:\r\n\t     *   -> canReuse(A, A)\r\n\t     *   -> canReuse(B, C)\r\n\t     *   -> determine new queues:\r\n\t     *      - deactivation: [B]\r\n\t     *      - activation: [C]\r\n\t     *\r\n\t     * 2. Validation phase:\r\n\t     *   -> canDeactivate(B)\r\n\t     *   -> canActivate(C)\r\n\t     *\r\n\t     * 3. Activation phase:\r\n\t     *   -> deactivate(B)\r\n\t     *   -> activate(C)\r\n\t     *\r\n\t     * Each of these steps can be asynchronous, and any\r\n\t     * step can potentially abort the transition.\r\n\t     *\r\n\t     * @param {Function} cb\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.start = function start(cb) {\r\n\t      var transition = this;\r\n\t\r\n\t      // determine the queue of views to deactivate\r\n\t      var deactivateQueue = [];\r\n\t      var view = this.router._rootView;\r\n\t      while (view) {\r\n\t        deactivateQueue.unshift(view);\r\n\t        view = view.childView;\r\n\t      }\r\n\t      var reverseDeactivateQueue = deactivateQueue.slice().reverse();\r\n\t\r\n\t      // determine the queue of route handlers to activate\r\n\t      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {\r\n\t        return match.handler;\r\n\t      });\r\n\t\r\n\t      // 1. Reusability phase\r\n\t      var i = undefined,\r\n\t          reuseQueue = undefined;\r\n\t      for (i = 0; i < reverseDeactivateQueue.length; i++) {\r\n\t        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t      if (i > 0) {\r\n\t        reuseQueue = reverseDeactivateQueue.slice(0, i);\r\n\t        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();\r\n\t        activateQueue = activateQueue.slice(i);\r\n\t      }\r\n\t\r\n\t      // 2. Validation phase\r\n\t      transition.runQueue(deactivateQueue, canDeactivate, function () {\r\n\t        transition.runQueue(activateQueue, canActivate, function () {\r\n\t          transition.runQueue(deactivateQueue, deactivate, function () {\r\n\t            // 3. Activation phase\r\n\t\r\n\t            // Update router current route\r\n\t            transition.router._onTransitionValidated(transition);\r\n\t\r\n\t            // trigger reuse for all reused views\r\n\t            reuseQueue && reuseQueue.forEach(function (view) {\r\n\t              return reuse(view, transition);\r\n\t            });\r\n\t\r\n\t            // the root of the chain that needs to be replaced\r\n\t            // is the top-most non-reusable view.\r\n\t            if (deactivateQueue.length) {\r\n\t              var _view = deactivateQueue[deactivateQueue.length - 1];\r\n\t              var depth = reuseQueue ? reuseQueue.length : 0;\r\n\t              activate(_view, transition, depth, cb);\r\n\t            } else {\r\n\t              cb();\r\n\t            }\r\n\t          });\r\n\t        });\r\n\t      });\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Asynchronously and sequentially apply a function to a\r\n\t     * queue.\r\n\t     *\r\n\t     * @param {Array} queue\r\n\t     * @param {Function} fn\r\n\t     * @param {Function} cb\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {\r\n\t      var transition = this;\r\n\t      step(0);\r\n\t      function step(index) {\r\n\t        if (index >= queue.length) {\r\n\t          cb();\r\n\t        } else {\r\n\t          fn(queue[index], transition, function () {\r\n\t            step(index + 1);\r\n\t          });\r\n\t        }\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Call a user provided route transition hook and handle\r\n\t     * the response (e.g. if the user returns a promise).\r\n\t     *\r\n\t     * If the user neither expects an argument nor returns a\r\n\t     * promise, the hook is assumed to be synchronous.\r\n\t     *\r\n\t     * @param {Function} hook\r\n\t     * @param {*} [context]\r\n\t     * @param {Function} [cb]\r\n\t     * @param {Object} [options]\r\n\t     *                 - {Boolean} expectBoolean\r\n\t     *                 - {Boolean} postActive\r\n\t     *                 - {Function} processData\r\n\t     *                 - {Function} cleanup\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {\r\n\t      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\r\n\t\r\n\t      var _ref$expectBoolean = _ref.expectBoolean;\r\n\t      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;\r\n\t      var _ref$postActivate = _ref.postActivate;\r\n\t      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;\r\n\t      var processData = _ref.processData;\r\n\t      var cleanup = _ref.cleanup;\r\n\t\r\n\t      var transition = this;\r\n\t      var nextCalled = false;\r\n\t\r\n\t      // abort the transition\r\n\t      var abort = function abort() {\r\n\t        cleanup && cleanup();\r\n\t        transition.abort();\r\n\t      };\r\n\t\r\n\t      // handle errors\r\n\t      var onError = function onError(err) {\r\n\t        postActivate ? next() : abort();\r\n\t        if (err && !transition.router._suppress) {\r\n\t          warn$1('Uncaught error during transition: ');\r\n\t          throw err instanceof Error ? err : new Error(err);\r\n\t        }\r\n\t      };\r\n\t\r\n\t      // since promise swallows errors, we have to\r\n\t      // throw it in the next tick...\r\n\t      var onPromiseError = function onPromiseError(err) {\r\n\t        try {\r\n\t          onError(err);\r\n\t        } catch (e) {\r\n\t          setTimeout(function () {\r\n\t            throw e;\r\n\t          }, 0);\r\n\t        }\r\n\t      };\r\n\t\r\n\t      // advance the transition to the next step\r\n\t      var next = function next() {\r\n\t        if (nextCalled) {\r\n\t          warn$1('transition.next() should be called only once.');\r\n\t          return;\r\n\t        }\r\n\t        nextCalled = true;\r\n\t        if (transition.aborted) {\r\n\t          cleanup && cleanup();\r\n\t          return;\r\n\t        }\r\n\t        cb && cb();\r\n\t      };\r\n\t\r\n\t      var nextWithBoolean = function nextWithBoolean(res) {\r\n\t        if (typeof res === 'boolean') {\r\n\t          res ? next() : abort();\r\n\t        } else if (isPromise(res)) {\r\n\t          res.then(function (ok) {\r\n\t            ok ? next() : abort();\r\n\t          }, onPromiseError);\r\n\t        } else if (!hook.length) {\r\n\t          next();\r\n\t        }\r\n\t      };\r\n\t\r\n\t      var nextWithData = function nextWithData(data) {\r\n\t        var res = undefined;\r\n\t        try {\r\n\t          res = processData(data);\r\n\t        } catch (err) {\r\n\t          return onError(err);\r\n\t        }\r\n\t        if (isPromise(res)) {\r\n\t          res.then(next, onPromiseError);\r\n\t        } else {\r\n\t          next();\r\n\t        }\r\n\t      };\r\n\t\r\n\t      // expose a clone of the transition object, so that each\r\n\t      // hook gets a clean copy and prevent the user from\r\n\t      // messing with the internals.\r\n\t      var exposed = {\r\n\t        to: transition.to,\r\n\t        from: transition.from,\r\n\t        abort: abort,\r\n\t        next: processData ? nextWithData : next,\r\n\t        redirect: function redirect() {\r\n\t          transition.redirect.apply(transition, arguments);\r\n\t        }\r\n\t      };\r\n\t\r\n\t      // actually call the hook\r\n\t      var res = undefined;\r\n\t      try {\r\n\t        res = hook.call(context, exposed);\r\n\t      } catch (err) {\r\n\t        return onError(err);\r\n\t      }\r\n\t\r\n\t      if (expectBoolean) {\r\n\t        // boolean hooks\r\n\t        nextWithBoolean(res);\r\n\t      } else if (isPromise(res)) {\r\n\t        // promise\r\n\t        if (processData) {\r\n\t          res.then(nextWithData, onPromiseError);\r\n\t        } else {\r\n\t          res.then(next, onPromiseError);\r\n\t        }\r\n\t      } else if (processData && isPlainOjbect(res)) {\r\n\t        // data promise sugar\r\n\t        nextWithData(res);\r\n\t      } else if (!hook.length) {\r\n\t        next();\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Call a single hook or an array of async hooks in series.\r\n\t     *\r\n\t     * @param {Array} hooks\r\n\t     * @param {*} context\r\n\t     * @param {Function} cb\r\n\t     * @param {Object} [options]\r\n\t     */\r\n\t\r\n\t    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {\r\n\t      var _this = this;\r\n\t\r\n\t      if (Array.isArray(hooks)) {\r\n\t        this.runQueue(hooks, function (hook, _, next) {\r\n\t          if (!_this.aborted) {\r\n\t            _this.callHook(hook, context, next, options);\r\n\t          }\r\n\t        }, cb);\r\n\t      } else {\r\n\t        this.callHook(hooks, context, cb, options);\r\n\t      }\r\n\t    };\r\n\t\r\n\t    return RouteTransition;\r\n\t  })();\r\n\t\r\n\t  function isPlainOjbect(val) {\r\n\t    return Object.prototype.toString.call(val) === '[object Object]';\r\n\t  }\r\n\t\r\n\t  function toArray(val) {\r\n\t    return val ? Array.prototype.slice.call(val) : [];\r\n\t  }\r\n\t\r\n\t  var internalKeysRE = /^(component|subRoutes|fullPath)$/;\r\n\t\r\n\t  /**\r\n\t   * Route Context Object\r\n\t   *\r\n\t   * @param {String} path\r\n\t   * @param {Router} router\r\n\t   */\r\n\t\r\n\t  var Route = function Route(path, router) {\r\n\t    var _this = this;\r\n\t\r\n\t    babelHelpers.classCallCheck(this, Route);\r\n\t\r\n\t    var matched = router._recognizer.recognize(path);\r\n\t    if (matched) {\r\n\t      // copy all custom fields from route configs\r\n\t      [].forEach.call(matched, function (match) {\r\n\t        for (var key in match.handler) {\r\n\t          if (!internalKeysRE.test(key)) {\r\n\t            _this[key] = match.handler[key];\r\n\t          }\r\n\t        }\r\n\t      });\r\n\t      // set query and params\r\n\t      this.query = matched.queryParams;\r\n\t      this.params = [].reduce.call(matched, function (prev, cur) {\r\n\t        if (cur.params) {\r\n\t          for (var key in cur.params) {\r\n\t            prev[key] = cur.params[key];\r\n\t          }\r\n\t        }\r\n\t        return prev;\r\n\t      }, {});\r\n\t    }\r\n\t    // expose path and router\r\n\t    this.path = path;\r\n\t    // for internal use\r\n\t    this.matched = matched || router._notFoundHandler;\r\n\t    // internal reference to router\r\n\t    Object.defineProperty(this, 'router', {\r\n\t      enumerable: false,\r\n\t      value: router\r\n\t    });\r\n\t    // Important: freeze self to prevent observation\r\n\t    Object.freeze(this);\r\n\t  };\r\n\t\r\n\t  function applyOverride (Vue) {\r\n\t    var _Vue$util = Vue.util;\r\n\t    var extend = _Vue$util.extend;\r\n\t    var isArray = _Vue$util.isArray;\r\n\t    var defineReactive = _Vue$util.defineReactive;\r\n\t\r\n\t    // override Vue's init and destroy process to keep track of router instances\r\n\t    var init = Vue.prototype._init;\r\n\t    Vue.prototype._init = function (options) {\r\n\t      options = options || {};\r\n\t      var root = options._parent || options.parent || this;\r\n\t      var router = root.$router;\r\n\t      var route = root.$route;\r\n\t      if (router) {\r\n\t        // expose router\r\n\t        this.$router = router;\r\n\t        router._children.push(this);\r\n\t        /* istanbul ignore if */\r\n\t        if (this._defineMeta) {\r\n\t          // 0.12\r\n\t          this._defineMeta('$route', route);\r\n\t        } else {\r\n\t          // 1.0\r\n\t          defineReactive(this, '$route', route);\r\n\t        }\r\n\t      }\r\n\t      init.call(this, options);\r\n\t    };\r\n\t\r\n\t    var destroy = Vue.prototype._destroy;\r\n\t    Vue.prototype._destroy = function () {\r\n\t      if (!this._isBeingDestroyed && this.$router) {\r\n\t        this.$router._children.$remove(this);\r\n\t      }\r\n\t      destroy.apply(this, arguments);\r\n\t    };\r\n\t\r\n\t    // 1.0 only: enable route mixins\r\n\t    var strats = Vue.config.optionMergeStrategies;\r\n\t    var hooksToMergeRE = /^(data|activate|deactivate)$/;\r\n\t\r\n\t    if (strats) {\r\n\t      strats.route = function (parentVal, childVal) {\r\n\t        if (!childVal) return parentVal;\r\n\t        if (!parentVal) return childVal;\r\n\t        var ret = {};\r\n\t        extend(ret, parentVal);\r\n\t        for (var key in childVal) {\r\n\t          var a = ret[key];\r\n\t          var b = childVal[key];\r\n\t          // for data, activate and deactivate, we need to merge them into\r\n\t          // arrays similar to lifecycle hooks.\r\n\t          if (a && hooksToMergeRE.test(key)) {\r\n\t            ret[key] = (isArray(a) ? a : [a]).concat(b);\r\n\t          } else {\r\n\t            ret[key] = b;\r\n\t          }\r\n\t        }\r\n\t        return ret;\r\n\t      };\r\n\t    }\r\n\t  }\r\n\t\r\n\t  function View (Vue) {\r\n\t\r\n\t    var _ = Vue.util;\r\n\t    var componentDef =\r\n\t    // 0.12\r\n\t    Vue.directive('_component') ||\r\n\t    // 1.0\r\n\t    Vue.internalDirectives.component;\r\n\t    // <router-view> extends the internal component directive\r\n\t    var viewDef = _.extend({}, componentDef);\r\n\t\r\n\t    // with some overrides\r\n\t    _.extend(viewDef, {\r\n\t\r\n\t      _isRouterView: true,\r\n\t\r\n\t      bind: function bind() {\r\n\t        var route = this.vm.$route;\r\n\t        /* istanbul ignore if */\r\n\t        if (!route) {\r\n\t          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');\r\n\t          return;\r\n\t        }\r\n\t        // force dynamic directive so v-component doesn't\r\n\t        // attempt to build right now\r\n\t        this._isDynamicLiteral = true;\r\n\t        // finally, init by delegating to v-component\r\n\t        componentDef.bind.call(this);\r\n\t\r\n\t        // locate the parent view\r\n\t        var parentView = undefined;\r\n\t        var parent = this.vm;\r\n\t        while (parent) {\r\n\t          if (parent._routerView) {\r\n\t            parentView = parent._routerView;\r\n\t            break;\r\n\t          }\r\n\t          parent = parent.$parent;\r\n\t        }\r\n\t        if (parentView) {\r\n\t          // register self as a child of the parent view,\r\n\t          // instead of activating now. This is so that the\r\n\t          // child's activate hook is called after the\r\n\t          // parent's has resolved.\r\n\t          this.parentView = parentView;\r\n\t          parentView.childView = this;\r\n\t        } else {\r\n\t          // this is the root view!\r\n\t          var router = route.router;\r\n\t          router._rootView = this;\r\n\t        }\r\n\t\r\n\t        // handle late-rendered view\r\n\t        // two possibilities:\r\n\t        // 1. root view rendered after transition has been\r\n\t        //    validated;\r\n\t        // 2. child view rendered after parent view has been\r\n\t        //    activated.\r\n\t        var transition = route.router._currentTransition;\r\n\t        if (!parentView && transition.done || parentView && parentView.activated) {\r\n\t          var depth = parentView ? parentView.depth + 1 : 0;\r\n\t          activate(this, transition, depth);\r\n\t        }\r\n\t      },\r\n\t\r\n\t      unbind: function unbind() {\r\n\t        if (this.parentView) {\r\n\t          this.parentView.childView = null;\r\n\t        }\r\n\t        componentDef.unbind.call(this);\r\n\t      }\r\n\t    });\r\n\t\r\n\t    Vue.elementDirective('router-view', viewDef);\r\n\t  }\r\n\t\r\n\t  var trailingSlashRE = /\\/$/;\r\n\t  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n\t  var queryStringRE = /\\?.*$/;\r\n\t\r\n\t  // install v-link, which provides navigation support for\r\n\t  // HTML5 history mode\r\n\t  function Link (Vue) {\r\n\t    var _Vue$util = Vue.util;\r\n\t    var _bind = _Vue$util.bind;\r\n\t    var isObject = _Vue$util.isObject;\r\n\t    var addClass = _Vue$util.addClass;\r\n\t    var removeClass = _Vue$util.removeClass;\r\n\t\r\n\t    var onPriority = Vue.directive('on').priority;\r\n\t    var LINK_UPDATE = '__vue-router-link-update__';\r\n\t\r\n\t    var activeId = 0;\r\n\t\r\n\t    Vue.directive('link-active', {\r\n\t      priority: 9999,\r\n\t      bind: function bind() {\r\n\t        var _this = this;\r\n\t\r\n\t        var id = String(activeId++);\r\n\t        // collect v-links contained within this element.\r\n\t        // we need do this here before the parent-child relationship\r\n\t        // gets messed up by terminal directives (if, for, components)\r\n\t        var childLinks = this.el.querySelectorAll('[v-link]');\r\n\t        for (var i = 0, l = childLinks.length; i < l; i++) {\r\n\t          var link = childLinks[i];\r\n\t          var existingId = link.getAttribute(LINK_UPDATE);\r\n\t          var value = existingId ? existingId + ',' + id : id;\r\n\t          // leave a mark on the link element which can be persisted\r\n\t          // through fragment clones.\r\n\t          link.setAttribute(LINK_UPDATE, value);\r\n\t        }\r\n\t        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {\r\n\t          if (link.activeIds.indexOf(id) > -1) {\r\n\t            link.updateClasses(path, _this.el);\r\n\t          }\r\n\t        });\r\n\t      },\r\n\t      unbind: function unbind() {\r\n\t        this.vm.$off(LINK_UPDATE, this.cb);\r\n\t      }\r\n\t    });\r\n\t\r\n\t    Vue.directive('link', {\r\n\t      priority: onPriority - 2,\r\n\t\r\n\t      bind: function bind() {\r\n\t        var vm = this.vm;\r\n\t        /* istanbul ignore if */\r\n\t        if (!vm.$route) {\r\n\t          warn$1('v-link can only be used inside a router-enabled app.');\r\n\t          return;\r\n\t        }\r\n\t        this.router = vm.$route.router;\r\n\t        // update things when the route changes\r\n\t        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));\r\n\t        // check v-link-active ids\r\n\t        var activeIds = this.el.getAttribute(LINK_UPDATE);\r\n\t        if (activeIds) {\r\n\t          this.el.removeAttribute(LINK_UPDATE);\r\n\t          this.activeIds = activeIds.split(',');\r\n\t        }\r\n\t        // no need to handle click if link expects to be opened\r\n\t        // in a new window/tab.\r\n\t        /* istanbul ignore if */\r\n\t        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {\r\n\t          return;\r\n\t        }\r\n\t        // handle click\r\n\t        this.handler = _bind(this.onClick, this);\r\n\t        this.el.addEventListener('click', this.handler);\r\n\t      },\r\n\t\r\n\t      update: function update(target) {\r\n\t        this.target = target;\r\n\t        if (isObject(target)) {\r\n\t          this.append = target.append;\r\n\t          this.exact = target.exact;\r\n\t          this.prevActiveClass = this.activeClass;\r\n\t          this.activeClass = target.activeClass;\r\n\t        }\r\n\t        this.onRouteUpdate(this.vm.$route);\r\n\t      },\r\n\t\r\n\t      onClick: function onClick(e) {\r\n\t        // don't redirect with control keys\r\n\t        /* istanbul ignore if */\r\n\t        if (e.metaKey || e.ctrlKey || e.shiftKey) return;\r\n\t        // don't redirect when preventDefault called\r\n\t        /* istanbul ignore if */\r\n\t        if (e.defaultPrevented) return;\r\n\t        // don't redirect on right click\r\n\t        /* istanbul ignore if */\r\n\t        if (e.button !== 0) return;\r\n\t\r\n\t        var target = this.target;\r\n\t        if (target) {\r\n\t          // v-link with expression, just go\r\n\t          e.preventDefault();\r\n\t          this.router.go(target);\r\n\t        } else {\r\n\t          // no expression, delegate for an <a> inside\r\n\t          var el = e.target;\r\n\t          while (el.tagName !== 'A' && el !== this.el) {\r\n\t            el = el.parentNode;\r\n\t          }\r\n\t          if (el.tagName === 'A' && sameOrigin(el)) {\r\n\t            e.preventDefault();\r\n\t            var path = el.pathname;\r\n\t            if (this.router.history.root) {\r\n\t              path = path.replace(this.router.history.rootRE, '');\r\n\t            }\r\n\t            this.router.go({\r\n\t              path: path,\r\n\t              replace: target && target.replace,\r\n\t              append: target && target.append\r\n\t            });\r\n\t          }\r\n\t        }\r\n\t      },\r\n\t\r\n\t      onRouteUpdate: function onRouteUpdate(route) {\r\n\t        // router.stringifyPath is dependent on current route\r\n\t        // and needs to be called again whenver route changes.\r\n\t        var newPath = this.router.stringifyPath(this.target);\r\n\t        if (this.path !== newPath) {\r\n\t          this.path = newPath;\r\n\t          this.updateActiveMatch();\r\n\t          this.updateHref();\r\n\t        }\r\n\t        if (this.activeIds) {\r\n\t          this.vm.$emit(LINK_UPDATE, this, route.path);\r\n\t        } else {\r\n\t          this.updateClasses(route.path, this.el);\r\n\t        }\r\n\t      },\r\n\t\r\n\t      updateActiveMatch: function updateActiveMatch() {\r\n\t        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\\\$&') + '(\\\\/|$)') : null;\r\n\t      },\r\n\t\r\n\t      updateHref: function updateHref() {\r\n\t        if (this.el.tagName !== 'A') {\r\n\t          return;\r\n\t        }\r\n\t        var path = this.path;\r\n\t        var router = this.router;\r\n\t        var isAbsolute = path.charAt(0) === '/';\r\n\t        // do not format non-hash relative paths\r\n\t        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;\r\n\t        if (href) {\r\n\t          this.el.href = href;\r\n\t        } else {\r\n\t          this.el.removeAttribute('href');\r\n\t        }\r\n\t      },\r\n\t\r\n\t      updateClasses: function updateClasses(path, el) {\r\n\t        var activeClass = this.activeClass || this.router._linkActiveClass;\r\n\t        // clear old class\r\n\t        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {\r\n\t          toggleClasses(el, this.prevActiveClass, removeClass);\r\n\t        }\r\n\t        // remove query string before matching\r\n\t        var dest = this.path.replace(queryStringRE, '');\r\n\t        path = path.replace(queryStringRE, '');\r\n\t        // add new class\r\n\t        if (this.exact) {\r\n\t          if (dest === path ||\r\n\t          // also allow additional trailing slash\r\n\t          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {\r\n\t            toggleClasses(el, activeClass, addClass);\r\n\t          } else {\r\n\t            toggleClasses(el, activeClass, removeClass);\r\n\t          }\r\n\t        } else {\r\n\t          if (this.activeRE && this.activeRE.test(path)) {\r\n\t            toggleClasses(el, activeClass, addClass);\r\n\t          } else {\r\n\t            toggleClasses(el, activeClass, removeClass);\r\n\t          }\r\n\t        }\r\n\t      },\r\n\t\r\n\t      unbind: function unbind() {\r\n\t        this.el.removeEventListener('click', this.handler);\r\n\t        this.unwatch && this.unwatch();\r\n\t      }\r\n\t    });\r\n\t\r\n\t    function sameOrigin(link) {\r\n\t      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;\r\n\t    }\r\n\t\r\n\t    // this function is copied from v-bind:class implementation until\r\n\t    // we properly expose it...\r\n\t    function toggleClasses(el, key, fn) {\r\n\t      key = key.trim();\r\n\t      if (key.indexOf(' ') === -1) {\r\n\t        fn(el, key);\r\n\t        return;\r\n\t      }\r\n\t      var keys = key.split(/\\s+/);\r\n\t      for (var i = 0, l = keys.length; i < l; i++) {\r\n\t        fn(el, keys[i]);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var historyBackends = {\r\n\t    abstract: AbstractHistory,\r\n\t    hash: HashHistory,\r\n\t    html5: HTML5History\r\n\t  };\r\n\t\r\n\t  // late bind during install\r\n\t  var Vue = undefined;\r\n\t\r\n\t  /**\r\n\t   * Router constructor\r\n\t   *\r\n\t   * @param {Object} [options]\r\n\t   */\r\n\t\r\n\t  var Router = (function () {\r\n\t    function Router() {\r\n\t      var _this = this;\r\n\t\r\n\t      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\t\r\n\t      var _ref$hashbang = _ref.hashbang;\r\n\t      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;\r\n\t      var _ref$abstract = _ref.abstract;\r\n\t      var abstract = _ref$abstract === undefined ? false : _ref$abstract;\r\n\t      var _ref$history = _ref.history;\r\n\t      var history = _ref$history === undefined ? false : _ref$history;\r\n\t      var _ref$saveScrollPosition = _ref.saveScrollPosition;\r\n\t      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;\r\n\t      var _ref$transitionOnLoad = _ref.transitionOnLoad;\r\n\t      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;\r\n\t      var _ref$suppressTransitionError = _ref.suppressTransitionError;\r\n\t      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;\r\n\t      var _ref$root = _ref.root;\r\n\t      var root = _ref$root === undefined ? null : _ref$root;\r\n\t      var _ref$linkActiveClass = _ref.linkActiveClass;\r\n\t      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;\r\n\t      babelHelpers.classCallCheck(this, Router);\r\n\t\r\n\t      /* istanbul ignore if */\r\n\t      if (!Router.installed) {\r\n\t        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');\r\n\t      }\r\n\t\r\n\t      // Vue instances\r\n\t      this.app = null;\r\n\t      this._children = [];\r\n\t\r\n\t      // route recognizer\r\n\t      this._recognizer = new RouteRecognizer();\r\n\t      this._guardRecognizer = new RouteRecognizer();\r\n\t\r\n\t      // state\r\n\t      this._started = false;\r\n\t      this._startCb = null;\r\n\t      this._currentRoute = {};\r\n\t      this._currentTransition = null;\r\n\t      this._previousTransition = null;\r\n\t      this._notFoundHandler = null;\r\n\t      this._notFoundRedirect = null;\r\n\t      this._beforeEachHooks = [];\r\n\t      this._afterEachHooks = [];\r\n\t\r\n\t      // trigger transition on initial render?\r\n\t      this._rendered = false;\r\n\t      this._transitionOnLoad = transitionOnLoad;\r\n\t\r\n\t      // history mode\r\n\t      this._root = root;\r\n\t      this._abstract = abstract;\r\n\t      this._hashbang = hashbang;\r\n\t\r\n\t      // check if HTML5 history is available\r\n\t      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;\r\n\t      this._history = history && hasPushState;\r\n\t      this._historyFallback = history && !hasPushState;\r\n\t\r\n\t      // create history object\r\n\t      var inBrowser = Vue.util.inBrowser;\r\n\t      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';\r\n\t\r\n\t      var History = historyBackends[this.mode];\r\n\t      this.history = new History({\r\n\t        root: root,\r\n\t        hashbang: this._hashbang,\r\n\t        onChange: function onChange(path, state, anchor) {\r\n\t          _this._match(path, state, anchor);\r\n\t        }\r\n\t      });\r\n\t\r\n\t      // other options\r\n\t      this._saveScrollPosition = saveScrollPosition;\r\n\t      this._linkActiveClass = linkActiveClass;\r\n\t      this._suppress = suppressTransitionError;\r\n\t    }\r\n\t\r\n\t    /**\r\n\t     * Allow directly passing components to a route\r\n\t     * definition.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @param {Object} handler\r\n\t     */\r\n\t\r\n\t    // API ===================================================\r\n\t\r\n\t    /**\r\n\t    * Register a map of top-level paths.\r\n\t    *\r\n\t    * @param {Object} map\r\n\t    */\r\n\t\r\n\t    Router.prototype.map = function map(_map) {\r\n\t      for (var route in _map) {\r\n\t        this.on(route, _map[route]);\r\n\t      }\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Register a single root-level path\r\n\t     *\r\n\t     * @param {String} rootPath\r\n\t     * @param {Object} handler\r\n\t     *                 - {String} component\r\n\t     *                 - {Object} [subRoutes]\r\n\t     *                 - {Boolean} [forceRefresh]\r\n\t     *                 - {Function} [before]\r\n\t     *                 - {Function} [after]\r\n\t     */\r\n\t\r\n\t    Router.prototype.on = function on(rootPath, handler) {\r\n\t      if (rootPath === '*') {\r\n\t        this._notFound(handler);\r\n\t      } else {\r\n\t        this._addRoute(rootPath, handler, []);\r\n\t      }\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set redirects.\r\n\t     *\r\n\t     * @param {Object} map\r\n\t     */\r\n\t\r\n\t    Router.prototype.redirect = function redirect(map) {\r\n\t      for (var path in map) {\r\n\t        this._addRedirect(path, map[path]);\r\n\t      }\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set aliases.\r\n\t     *\r\n\t     * @param {Object} map\r\n\t     */\r\n\t\r\n\t    Router.prototype.alias = function alias(map) {\r\n\t      for (var path in map) {\r\n\t        this._addAlias(path, map[path]);\r\n\t      }\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set global before hook.\r\n\t     *\r\n\t     * @param {Function} fn\r\n\t     */\r\n\t\r\n\t    Router.prototype.beforeEach = function beforeEach(fn) {\r\n\t      this._beforeEachHooks.push(fn);\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set global after hook.\r\n\t     *\r\n\t     * @param {Function} fn\r\n\t     */\r\n\t\r\n\t    Router.prototype.afterEach = function afterEach(fn) {\r\n\t      this._afterEachHooks.push(fn);\r\n\t      return this;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Navigate to a given path.\r\n\t     * The path can be an object describing a named path in\r\n\t     * the format of { name: '...', params: {}, query: {}}\r\n\t     * The path is assumed to be already decoded, and will\r\n\t     * be resolved against root (if provided)\r\n\t     *\r\n\t     * @param {String|Object} path\r\n\t     * @param {Boolean} [replace]\r\n\t     */\r\n\t\r\n\t    Router.prototype.go = function go(path) {\r\n\t      var replace = false;\r\n\t      var append = false;\r\n\t      if (Vue.util.isObject(path)) {\r\n\t        replace = path.replace;\r\n\t        append = path.append;\r\n\t      }\r\n\t      path = this.stringifyPath(path);\r\n\t      if (path) {\r\n\t        this.history.go(path, replace, append);\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Short hand for replacing current path\r\n\t     *\r\n\t     * @param {String} path\r\n\t     */\r\n\t\r\n\t    Router.prototype.replace = function replace(path) {\r\n\t      if (typeof path === 'string') {\r\n\t        path = { path: path };\r\n\t      }\r\n\t      path.replace = true;\r\n\t      this.go(path);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Start the router.\r\n\t     *\r\n\t     * @param {VueConstructor} App\r\n\t     * @param {String|Element} container\r\n\t     * @param {Function} [cb]\r\n\t     */\r\n\t\r\n\t    Router.prototype.start = function start(App, container, cb) {\r\n\t      /* istanbul ignore if */\r\n\t      if (this._started) {\r\n\t        warn$1('already started.');\r\n\t        return;\r\n\t      }\r\n\t      this._started = true;\r\n\t      this._startCb = cb;\r\n\t      if (!this.app) {\r\n\t        /* istanbul ignore if */\r\n\t        if (!App || !container) {\r\n\t          throw new Error('Must start vue-router with a component and a ' + 'root container.');\r\n\t        }\r\n\t        /* istanbul ignore if */\r\n\t        if (App instanceof Vue) {\r\n\t          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');\r\n\t        }\r\n\t        this._appContainer = container;\r\n\t        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);\r\n\t        // give it a name for better debugging\r\n\t        Ctor.options.name = Ctor.options.name || 'RouterApp';\r\n\t      }\r\n\t\r\n\t      // handle history fallback in browsers that do not\r\n\t      // support HTML5 history API\r\n\t      if (this._historyFallback) {\r\n\t        var _location = window.location;\r\n\t        var _history = new HTML5History({ root: this._root });\r\n\t        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;\r\n\t        if (path && path !== '/') {\r\n\t          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);\r\n\t          return;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      this.history.start();\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Stop listening to route changes.\r\n\t     */\r\n\t\r\n\t    Router.prototype.stop = function stop() {\r\n\t      this.history.stop();\r\n\t      this._started = false;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Normalize named route object / string paths into\r\n\t     * a string.\r\n\t     *\r\n\t     * @param {Object|String|Number} path\r\n\t     * @return {String}\r\n\t     */\r\n\t\r\n\t    Router.prototype.stringifyPath = function stringifyPath(path) {\r\n\t      var generatedPath = '';\r\n\t      if (path && typeof path === 'object') {\r\n\t        if (path.name) {\r\n\t          var extend = Vue.util.extend;\r\n\t          var currentParams = this._currentTransition && this._currentTransition.to.params;\r\n\t          var targetParams = path.params || {};\r\n\t          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;\r\n\t          generatedPath = encodeURI(this._recognizer.generate(path.name, params));\r\n\t        } else if (path.path) {\r\n\t          generatedPath = encodeURI(path.path);\r\n\t        }\r\n\t        if (path.query) {\r\n\t          // note: the generated query string is pre-URL-encoded by the recognizer\r\n\t          var query = this._recognizer.generateQueryString(path.query);\r\n\t          if (generatedPath.indexOf('?') > -1) {\r\n\t            generatedPath += '&' + query.slice(1);\r\n\t          } else {\r\n\t            generatedPath += query;\r\n\t          }\r\n\t        }\r\n\t      } else {\r\n\t        generatedPath = encodeURI(path ? path + '' : '');\r\n\t      }\r\n\t      return generatedPath;\r\n\t    };\r\n\t\r\n\t    // Internal methods ======================================\r\n\t\r\n\t    /**\r\n\t    * Add a route containing a list of segments to the internal\r\n\t    * route recognizer. Will be called recursively to add all\r\n\t    * possible sub-routes.\r\n\t    *\r\n\t    * @param {String} path\r\n\t    * @param {Object} handler\r\n\t    * @param {Array} segments\r\n\t    */\r\n\t\r\n\t    Router.prototype._addRoute = function _addRoute(path, handler, segments) {\r\n\t      guardComponent(path, handler);\r\n\t      handler.path = path;\r\n\t      handler.fullPath = (segments.reduce(function (path, segment) {\r\n\t        return path + segment.path;\r\n\t      }, '') + path).replace('//', '/');\r\n\t      segments.push({\r\n\t        path: path,\r\n\t        handler: handler\r\n\t      });\r\n\t      this._recognizer.add(segments, {\r\n\t        as: handler.name\r\n\t      });\r\n\t      // add sub routes\r\n\t      if (handler.subRoutes) {\r\n\t        for (var subPath in handler.subRoutes) {\r\n\t          // recursively walk all sub routes\r\n\t          this._addRoute(subPath, handler.subRoutes[subPath],\r\n\t          // pass a copy in recursion to avoid mutating\r\n\t          // across branches\r\n\t          segments.slice());\r\n\t        }\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set the notFound route handler.\r\n\t     *\r\n\t     * @param {Object} handler\r\n\t     */\r\n\t\r\n\t    Router.prototype._notFound = function _notFound(handler) {\r\n\t      guardComponent('*', handler);\r\n\t      this._notFoundHandler = [{ handler: handler }];\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add a redirect record.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @param {String} redirectPath\r\n\t     */\r\n\t\r\n\t    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {\r\n\t      if (path === '*') {\r\n\t        this._notFoundRedirect = redirectPath;\r\n\t      } else {\r\n\t        this._addGuard(path, redirectPath, this.replace);\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add an alias record.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @param {String} aliasPath\r\n\t     */\r\n\t\r\n\t    Router.prototype._addAlias = function _addAlias(path, aliasPath) {\r\n\t      this._addGuard(path, aliasPath, this._match);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Add a path guard.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @param {String} mappedPath\r\n\t     * @param {Function} handler\r\n\t     */\r\n\t\r\n\t    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {\r\n\t      var _this2 = this;\r\n\t\r\n\t      this._guardRecognizer.add([{\r\n\t        path: path,\r\n\t        handler: function handler(match, query) {\r\n\t          var realPath = mapParams(mappedPath, match.params, query);\r\n\t          _handler.call(_this2, realPath);\r\n\t        }\r\n\t      }]);\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Check if a path matches any redirect records.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @return {Boolean} - if true, will skip normal match.\r\n\t     */\r\n\t\r\n\t    Router.prototype._checkGuard = function _checkGuard(path) {\r\n\t      var matched = this._guardRecognizer.recognize(path, true);\r\n\t      if (matched) {\r\n\t        matched[0].handler(matched[0], matched.queryParams);\r\n\t        return true;\r\n\t      } else if (this._notFoundRedirect) {\r\n\t        matched = this._recognizer.recognize(path);\r\n\t        if (!matched) {\r\n\t          this.replace(this._notFoundRedirect);\r\n\t          return true;\r\n\t        }\r\n\t      }\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Match a URL path and set the route context on vm,\r\n\t     * triggering view updates.\r\n\t     *\r\n\t     * @param {String} path\r\n\t     * @param {Object} [state]\r\n\t     * @param {String} [anchor]\r\n\t     */\r\n\t\r\n\t    Router.prototype._match = function _match(path, state, anchor) {\r\n\t      var _this3 = this;\r\n\t\r\n\t      if (this._checkGuard(path)) {\r\n\t        return;\r\n\t      }\r\n\t\r\n\t      var currentRoute = this._currentRoute;\r\n\t      var currentTransition = this._currentTransition;\r\n\t\r\n\t      if (currentTransition) {\r\n\t        if (currentTransition.to.path === path) {\r\n\t          // do nothing if we have an active transition going to the same path\r\n\t          return;\r\n\t        } else if (currentRoute.path === path) {\r\n\t          // We are going to the same path, but we also have an ongoing but\r\n\t          // not-yet-validated transition. Abort that transition and reset to\r\n\t          // prev transition.\r\n\t          currentTransition.aborted = true;\r\n\t          this._currentTransition = this._prevTransition;\r\n\t          return;\r\n\t        } else {\r\n\t          // going to a totally different path. abort ongoing transition.\r\n\t          currentTransition.aborted = true;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      // construct new route and transition context\r\n\t      var route = new Route(path, this);\r\n\t      var transition = new RouteTransition(this, route, currentRoute);\r\n\t\r\n\t      // current transition is updated right now.\r\n\t      // however, current route will only be updated after the transition has\r\n\t      // been validated.\r\n\t      this._prevTransition = currentTransition;\r\n\t      this._currentTransition = transition;\r\n\t\r\n\t      if (!this.app) {\r\n\t        (function () {\r\n\t          // initial render\r\n\t          var router = _this3;\r\n\t          _this3.app = new _this3._appConstructor({\r\n\t            el: _this3._appContainer,\r\n\t            created: function created() {\r\n\t              this.$router = router;\r\n\t            },\r\n\t            _meta: {\r\n\t              $route: route\r\n\t            }\r\n\t          });\r\n\t        })();\r\n\t      }\r\n\t\r\n\t      // check global before hook\r\n\t      var beforeHooks = this._beforeEachHooks;\r\n\t      var startTransition = function startTransition() {\r\n\t        transition.start(function () {\r\n\t          _this3._postTransition(route, state, anchor);\r\n\t        });\r\n\t      };\r\n\t\r\n\t      if (beforeHooks.length) {\r\n\t        transition.runQueue(beforeHooks, function (hook, _, next) {\r\n\t          if (transition === _this3._currentTransition) {\r\n\t            transition.callHook(hook, null, next, {\r\n\t              expectBoolean: true\r\n\t            });\r\n\t          }\r\n\t        }, startTransition);\r\n\t      } else {\r\n\t        startTransition();\r\n\t      }\r\n\t\r\n\t      if (!this._rendered && this._startCb) {\r\n\t        this._startCb.call(null);\r\n\t      }\r\n\t\r\n\t      // HACK:\r\n\t      // set rendered to true after the transition start, so\r\n\t      // that components that are acitvated synchronously know\r\n\t      // whether it is the initial render.\r\n\t      this._rendered = true;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Set current to the new transition.\r\n\t     * This is called by the transition object when the\r\n\t     * validation of a route has succeeded.\r\n\t     *\r\n\t     * @param {Transition} transition\r\n\t     */\r\n\t\r\n\t    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {\r\n\t      // set current route\r\n\t      var route = this._currentRoute = transition.to;\r\n\t      // update route context for all children\r\n\t      if (this.app.$route !== route) {\r\n\t        this.app.$route = route;\r\n\t        this._children.forEach(function (child) {\r\n\t          child.$route = route;\r\n\t        });\r\n\t      }\r\n\t      // call global after hook\r\n\t      if (this._afterEachHooks.length) {\r\n\t        this._afterEachHooks.forEach(function (hook) {\r\n\t          return hook.call(null, {\r\n\t            to: transition.to,\r\n\t            from: transition.from\r\n\t          });\r\n\t        });\r\n\t      }\r\n\t      this._currentTransition.done = true;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Handle stuff after the transition.\r\n\t     *\r\n\t     * @param {Route} route\r\n\t     * @param {Object} [state]\r\n\t     * @param {String} [anchor]\r\n\t     */\r\n\t\r\n\t    Router.prototype._postTransition = function _postTransition(route, state, anchor) {\r\n\t      // handle scroll positions\r\n\t      // saved scroll positions take priority\r\n\t      // then we check if the path has an anchor\r\n\t      var pos = state && state.pos;\r\n\t      if (pos && this._saveScrollPosition) {\r\n\t        Vue.nextTick(function () {\r\n\t          window.scrollTo(pos.x, pos.y);\r\n\t        });\r\n\t      } else if (anchor) {\r\n\t        Vue.nextTick(function () {\r\n\t          var el = document.getElementById(anchor.slice(1));\r\n\t          if (el) {\r\n\t            window.scrollTo(window.scrollX, el.offsetTop);\r\n\t          }\r\n\t        });\r\n\t      }\r\n\t    };\r\n\t\r\n\t    return Router;\r\n\t  })();\r\n\t\r\n\t  function guardComponent(path, handler) {\r\n\t    var comp = handler.component;\r\n\t    if (Vue.util.isPlainObject(comp)) {\r\n\t      comp = handler.component = Vue.extend(comp);\r\n\t    }\r\n\t    /* istanbul ignore if */\r\n\t    if (typeof comp !== 'function') {\r\n\t      handler.component = null;\r\n\t      warn$1('invalid component for route \"' + path + '\".');\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /* Installation */\r\n\t\r\n\t  Router.installed = false;\r\n\t\r\n\t  /**\r\n\t   * Installation interface.\r\n\t   * Install the necessary directives.\r\n\t   */\r\n\t\r\n\t  Router.install = function (externalVue) {\r\n\t    /* istanbul ignore if */\r\n\t    if (Router.installed) {\r\n\t      warn$1('already installed.');\r\n\t      return;\r\n\t    }\r\n\t    Vue = externalVue;\r\n\t    applyOverride(Vue);\r\n\t    View(Vue);\r\n\t    Link(Vue);\r\n\t    exports$1.Vue = Vue;\r\n\t    Router.installed = true;\r\n\t  };\r\n\t\r\n\t  // auto install\r\n\t  /* istanbul ignore if */\r\n\t  if (typeof window !== 'undefined' && window.Vue) {\r\n\t    window.Vue.use(Router);\r\n\t  }\r\n\t\r\n\t  return Router;\r\n\t\r\n\t}));\n\n/***/ },\n\n/***/ 22:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif (media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media);\r\n\t\t}\r\n\t\r\n\t\tif (sourceMap) {\r\n\t\t\t// https://developer.chrome.com/devtools/docs/javascript-debugging\r\n\t\t\t// this makes source maps inside style tags work properly in Chrome\r\n\t\t\tcss += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */';\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\n\n/***/ },\n\n/***/ 23:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\r\n\t * Vue.js v1.0.28\r\n\t * (c) 2016 Evan You\r\n\t * Released under the MIT License.\r\n\t */\r\n\t'use strict';\r\n\t\r\n\tfunction set(obj, key, val) {\r\n\t  if (hasOwn(obj, key)) {\r\n\t    obj[key] = val;\r\n\t    return;\r\n\t  }\r\n\t  if (obj._isVue) {\r\n\t    set(obj._data, key, val);\r\n\t    return;\r\n\t  }\r\n\t  var ob = obj.__ob__;\r\n\t  if (!ob) {\r\n\t    obj[key] = val;\r\n\t    return;\r\n\t  }\r\n\t  ob.convert(key, val);\r\n\t  ob.dep.notify();\r\n\t  if (ob.vms) {\r\n\t    var i = ob.vms.length;\r\n\t    while (i--) {\r\n\t      var vm = ob.vms[i];\r\n\t      vm._proxy(key);\r\n\t      vm._digest();\r\n\t    }\r\n\t  }\r\n\t  return val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Delete a property and trigger change if necessary.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String} key\r\n\t */\r\n\t\r\n\tfunction del(obj, key) {\r\n\t  if (!hasOwn(obj, key)) {\r\n\t    return;\r\n\t  }\r\n\t  delete obj[key];\r\n\t  var ob = obj.__ob__;\r\n\t  if (!ob) {\r\n\t    if (obj._isVue) {\r\n\t      delete obj._data[key];\r\n\t      obj._digest();\r\n\t    }\r\n\t    return;\r\n\t  }\r\n\t  ob.dep.notify();\r\n\t  if (ob.vms) {\r\n\t    var i = ob.vms.length;\r\n\t    while (i--) {\r\n\t      var vm = ob.vms[i];\r\n\t      vm._unproxy(key);\r\n\t      vm._digest();\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\t/**\r\n\t * Check whether the object has the property.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String} key\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction hasOwn(obj, key) {\r\n\t  return hasOwnProperty.call(obj, key);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an expression is a literal value.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\r\n\t\r\n\tfunction isLiteral(exp) {\r\n\t  return literalValueRE.test(exp);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if a string starts with $ or _\r\n\t *\r\n\t * @param {String} str\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isReserved(str) {\r\n\t  var c = (str + '').charCodeAt(0);\r\n\t  return c === 0x24 || c === 0x5F;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Guard text output, make sure undefined outputs\r\n\t * empty string\r\n\t *\r\n\t * @param {*} value\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction _toString(value) {\r\n\t  return value == null ? '' : value.toString();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check and convert possible numeric strings to numbers\r\n\t * before setting back to data\r\n\t *\r\n\t * @param {*} value\r\n\t * @return {*|Number}\r\n\t */\r\n\t\r\n\tfunction toNumber(value) {\r\n\t  if (typeof value !== 'string') {\r\n\t    return value;\r\n\t  } else {\r\n\t    var parsed = Number(value);\r\n\t    return isNaN(parsed) ? value : parsed;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Convert string boolean literals into real booleans.\r\n\t *\r\n\t * @param {*} value\r\n\t * @return {*|Boolean}\r\n\t */\r\n\t\r\n\tfunction toBoolean(value) {\r\n\t  return value === 'true' ? true : value === 'false' ? false : value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Strip quotes from a string\r\n\t *\r\n\t * @param {String} str\r\n\t * @return {String | false}\r\n\t */\r\n\t\r\n\tfunction stripQuotes(str) {\r\n\t  var a = str.charCodeAt(0);\r\n\t  var b = str.charCodeAt(str.length - 1);\r\n\t  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Camelize a hyphen-delimited string.\r\n\t *\r\n\t * @param {String} str\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tvar camelizeRE = /-(\\w)/g;\r\n\t\r\n\tfunction camelize(str) {\r\n\t  return str.replace(camelizeRE, toUpper);\r\n\t}\r\n\t\r\n\tfunction toUpper(_, c) {\r\n\t  return c ? c.toUpperCase() : '';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Hyphenate a camelCase string.\r\n\t *\r\n\t * @param {String} str\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tvar hyphenateRE = /([^-])([A-Z])/g;\r\n\t\r\n\tfunction hyphenate(str) {\r\n\t  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Converts hyphen/underscore/slash delimitered names into\r\n\t * camelized classNames.\r\n\t *\r\n\t * e.g. my-component => MyComponent\r\n\t *      some_else    => SomeElse\r\n\t *      some/comp    => SomeComp\r\n\t *\r\n\t * @param {String} str\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\r\n\t\r\n\tfunction classify(str) {\r\n\t  return str.replace(classifyRE, toUpper);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Simple bind, faster than native\r\n\t *\r\n\t * @param {Function} fn\r\n\t * @param {Object} ctx\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction bind(fn, ctx) {\r\n\t  return function (a) {\r\n\t    var l = arguments.length;\r\n\t    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Convert an Array-like object to a real Array.\r\n\t *\r\n\t * @param {Array-like} list\r\n\t * @param {Number} [start] - start index\r\n\t * @return {Array}\r\n\t */\r\n\t\r\n\tfunction toArray(list, start) {\r\n\t  start = start || 0;\r\n\t  var i = list.length - start;\r\n\t  var ret = new Array(i);\r\n\t  while (i--) {\r\n\t    ret[i] = list[i + start];\r\n\t  }\r\n\t  return ret;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Mix properties into target object.\r\n\t *\r\n\t * @param {Object} to\r\n\t * @param {Object} from\r\n\t */\r\n\t\r\n\tfunction extend(to, from) {\r\n\t  var keys = Object.keys(from);\r\n\t  var i = keys.length;\r\n\t  while (i--) {\r\n\t    to[keys[i]] = from[keys[i]];\r\n\t  }\r\n\t  return to;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Quick object check - this is primarily used to tell\r\n\t * Objects from primitive values when we know the value\r\n\t * is a JSON-compliant type.\r\n\t *\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isObject(obj) {\r\n\t  return obj !== null && typeof obj === 'object';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Strict object type check. Only returns true\r\n\t * for plain JavaScript objects.\r\n\t *\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tvar toString = Object.prototype.toString;\r\n\tvar OBJECT_STRING = '[object Object]';\r\n\t\r\n\tfunction isPlainObject(obj) {\r\n\t  return toString.call(obj) === OBJECT_STRING;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Array type check.\r\n\t *\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tvar isArray = Array.isArray;\r\n\t\r\n\t/**\r\n\t * Define a property.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String} key\r\n\t * @param {*} val\r\n\t * @param {Boolean} [enumerable]\r\n\t */\r\n\t\r\n\tfunction def(obj, key, val, enumerable) {\r\n\t  Object.defineProperty(obj, key, {\r\n\t    value: val,\r\n\t    enumerable: !!enumerable,\r\n\t    writable: true,\r\n\t    configurable: true\r\n\t  });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Debounce a function so it only gets called after the\r\n\t * input stops arriving after the given wait period.\r\n\t *\r\n\t * @param {Function} func\r\n\t * @param {Number} wait\r\n\t * @return {Function} - the debounced function\r\n\t */\r\n\t\r\n\tfunction _debounce(func, wait) {\r\n\t  var timeout, args, context, timestamp, result;\r\n\t  var later = function later() {\r\n\t    var last = Date.now() - timestamp;\r\n\t    if (last < wait && last >= 0) {\r\n\t      timeout = setTimeout(later, wait - last);\r\n\t    } else {\r\n\t      timeout = null;\r\n\t      result = func.apply(context, args);\r\n\t      if (!timeout) context = args = null;\r\n\t    }\r\n\t  };\r\n\t  return function () {\r\n\t    context = this;\r\n\t    args = arguments;\r\n\t    timestamp = Date.now();\r\n\t    if (!timeout) {\r\n\t      timeout = setTimeout(later, wait);\r\n\t    }\r\n\t    return result;\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Manual indexOf because it's slightly faster than\r\n\t * native.\r\n\t *\r\n\t * @param {Array} arr\r\n\t * @param {*} obj\r\n\t */\r\n\t\r\n\tfunction indexOf(arr, obj) {\r\n\t  var i = arr.length;\r\n\t  while (i--) {\r\n\t    if (arr[i] === obj) return i;\r\n\t  }\r\n\t  return -1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Make a cancellable version of an async callback.\r\n\t *\r\n\t * @param {Function} fn\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction cancellable(fn) {\r\n\t  var cb = function cb() {\r\n\t    if (!cb.cancelled) {\r\n\t      return fn.apply(this, arguments);\r\n\t    }\r\n\t  };\r\n\t  cb.cancel = function () {\r\n\t    cb.cancelled = true;\r\n\t  };\r\n\t  return cb;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if two values are loosely equal - that is,\r\n\t * if they are plain objects, do they have the same shape?\r\n\t *\r\n\t * @param {*} a\r\n\t * @param {*} b\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction looseEqual(a, b) {\r\n\t  /* eslint-disable eqeqeq */\r\n\t  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\r\n\t  /* eslint-enable eqeqeq */\r\n\t}\r\n\t\r\n\tvar hasProto = ('__proto__' in {});\r\n\t\r\n\t// Browser environment sniffing\r\n\tvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\r\n\t\r\n\t// detect devtools\r\n\tvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n\t\r\n\t// UA sniffing for working around browser-specific quirks\r\n\tvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\n\tvar isIE = UA && UA.indexOf('trident') > 0;\r\n\tvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\n\tvar isAndroid = UA && UA.indexOf('android') > 0;\r\n\tvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\r\n\t\r\n\tvar transitionProp = undefined;\r\n\tvar transitionEndEvent = undefined;\r\n\tvar animationProp = undefined;\r\n\tvar animationEndEvent = undefined;\r\n\t\r\n\t// Transition property/event sniffing\r\n\tif (inBrowser && !isIE9) {\r\n\t  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\r\n\t  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\r\n\t  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\r\n\t  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\r\n\t  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\r\n\t  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\r\n\t}\r\n\t\r\n\t/* istanbul ignore next */\r\n\tfunction isNative(Ctor) {\r\n\t  return (/native code/.test(Ctor.toString())\r\n\t  );\r\n\t}\r\n\t\r\n\t/**\r\n\t * Defer a task to execute it asynchronously. Ideally this\r\n\t * should be executed as a microtask, so we leverage\r\n\t * MutationObserver if it's available, and fallback to\r\n\t * setTimeout(0).\r\n\t *\r\n\t * @param {Function} cb\r\n\t * @param {Object} ctx\r\n\t */\r\n\t\r\n\tvar nextTick = (function () {\r\n\t  var callbacks = [];\r\n\t  var pending = false;\r\n\t  var timerFunc = undefined;\r\n\t\r\n\t  function nextTickHandler() {\r\n\t    pending = false;\r\n\t    var copies = callbacks.slice(0);\r\n\t    callbacks.length = 0;\r\n\t    for (var i = 0; i < copies.length; i++) {\r\n\t      copies[i]();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  // the nextTick behavior leverages the microtask queue, which can be accessed\r\n\t  // via either native Promise.then or MutationObserver.\r\n\t  // MutationObserver has wider support, however it is seriously bugged in\r\n\t  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n\t  // completely stops working after triggering a few times... so, if native\r\n\t  // Promise is available, we will use it:\r\n\t  /* istanbul ignore if */\r\n\t  if (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n\t    var p = Promise.resolve();\r\n\t    var noop = function noop() {};\r\n\t    timerFunc = function () {\r\n\t      p.then(nextTickHandler);\r\n\t      // in problematic UIWebViews, Promise.then doesn't completely break, but\r\n\t      // it can get stuck in a weird state where callbacks are pushed into the\r\n\t      // microtask queue but the queue isn't being flushed, until the browser\r\n\t      // needs to do some other work, e.g. handle a timer. Therefore we can\r\n\t      // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n\t      if (isIOS) setTimeout(noop);\r\n\t    };\r\n\t  } else if (typeof MutationObserver !== 'undefined') {\r\n\t    // use MutationObserver where native Promise is not available,\r\n\t    // e.g. IE11, iOS7, Android 4.4\r\n\t    var counter = 1;\r\n\t    var observer = new MutationObserver(nextTickHandler);\r\n\t    var textNode = document.createTextNode(String(counter));\r\n\t    observer.observe(textNode, {\r\n\t      characterData: true\r\n\t    });\r\n\t    timerFunc = function () {\r\n\t      counter = (counter + 1) % 2;\r\n\t      textNode.data = String(counter);\r\n\t    };\r\n\t  } else {\r\n\t    // fallback to setTimeout\r\n\t    /* istanbul ignore next */\r\n\t    timerFunc = setTimeout;\r\n\t  }\r\n\t\r\n\t  return function (cb, ctx) {\r\n\t    var func = ctx ? function () {\r\n\t      cb.call(ctx);\r\n\t    } : cb;\r\n\t    callbacks.push(func);\r\n\t    if (pending) return;\r\n\t    pending = true;\r\n\t    timerFunc(nextTickHandler, 0);\r\n\t  };\r\n\t})();\r\n\t\r\n\tvar _Set = undefined;\r\n\t/* istanbul ignore if */\r\n\tif (typeof Set !== 'undefined' && isNative(Set)) {\r\n\t  // use native Set when available.\r\n\t  _Set = Set;\r\n\t} else {\r\n\t  // a non-standard Set polyfill that only works with primitive keys.\r\n\t  _Set = function () {\r\n\t    this.set = Object.create(null);\r\n\t  };\r\n\t  _Set.prototype.has = function (key) {\r\n\t    return this.set[key] !== undefined;\r\n\t  };\r\n\t  _Set.prototype.add = function (key) {\r\n\t    this.set[key] = 1;\r\n\t  };\r\n\t  _Set.prototype.clear = function () {\r\n\t    this.set = Object.create(null);\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction Cache(limit) {\r\n\t  this.size = 0;\r\n\t  this.limit = limit;\r\n\t  this.head = this.tail = undefined;\r\n\t  this._keymap = Object.create(null);\r\n\t}\r\n\t\r\n\tvar p = Cache.prototype;\r\n\t\r\n\t/**\r\n\t * Put <value> into the cache associated with <key>.\r\n\t * Returns the entry which was removed to make room for\r\n\t * the new entry. Otherwise undefined is returned.\r\n\t * (i.e. if there was enough room already).\r\n\t *\r\n\t * @param {String} key\r\n\t * @param {*} value\r\n\t * @return {Entry|undefined}\r\n\t */\r\n\t\r\n\tp.put = function (key, value) {\r\n\t  var removed;\r\n\t\r\n\t  var entry = this.get(key, true);\r\n\t  if (!entry) {\r\n\t    if (this.size === this.limit) {\r\n\t      removed = this.shift();\r\n\t    }\r\n\t    entry = {\r\n\t      key: key\r\n\t    };\r\n\t    this._keymap[key] = entry;\r\n\t    if (this.tail) {\r\n\t      this.tail.newer = entry;\r\n\t      entry.older = this.tail;\r\n\t    } else {\r\n\t      this.head = entry;\r\n\t    }\r\n\t    this.tail = entry;\r\n\t    this.size++;\r\n\t  }\r\n\t  entry.value = value;\r\n\t\r\n\t  return removed;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Purge the least recently used (oldest) entry from the\r\n\t * cache. Returns the removed entry or undefined if the\r\n\t * cache was empty.\r\n\t */\r\n\t\r\n\tp.shift = function () {\r\n\t  var entry = this.head;\r\n\t  if (entry) {\r\n\t    this.head = this.head.newer;\r\n\t    this.head.older = undefined;\r\n\t    entry.newer = entry.older = undefined;\r\n\t    this._keymap[entry.key] = undefined;\r\n\t    this.size--;\r\n\t  }\r\n\t  return entry;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get and register recent use of <key>. Returns the value\r\n\t * associated with <key> or undefined if not in cache.\r\n\t *\r\n\t * @param {String} key\r\n\t * @param {Boolean} returnEntry\r\n\t * @return {Entry|*}\r\n\t */\r\n\t\r\n\tp.get = function (key, returnEntry) {\r\n\t  var entry = this._keymap[key];\r\n\t  if (entry === undefined) return;\r\n\t  if (entry === this.tail) {\r\n\t    return returnEntry ? entry : entry.value;\r\n\t  }\r\n\t  // HEAD--------------TAIL\r\n\t  //   <.older   .newer>\r\n\t  //  <--- add direction --\r\n\t  //   A  B  C  <D>  E\r\n\t  if (entry.newer) {\r\n\t    if (entry === this.head) {\r\n\t      this.head = entry.newer;\r\n\t    }\r\n\t    entry.newer.older = entry.older; // C <-- E.\r\n\t  }\r\n\t  if (entry.older) {\r\n\t    entry.older.newer = entry.newer; // C. --> E\r\n\t  }\r\n\t  entry.newer = undefined; // D --x\r\n\t  entry.older = this.tail; // D. --> E\r\n\t  if (this.tail) {\r\n\t    this.tail.newer = entry; // E. <-- D\r\n\t  }\r\n\t  this.tail = entry;\r\n\t  return returnEntry ? entry : entry.value;\r\n\t};\r\n\t\r\n\tvar cache$1 = new Cache(1000);\r\n\tvar reservedArgRE = /^in$|^-?\\d+/;\r\n\t\r\n\t/**\r\n\t * Parser state\r\n\t */\r\n\t\r\n\tvar str;\r\n\tvar dir;\r\n\tvar len;\r\n\tvar index;\r\n\tvar chr;\r\n\tvar state;\r\n\tvar startState = 0;\r\n\tvar filterState = 1;\r\n\tvar filterNameState = 2;\r\n\tvar filterArgState = 3;\r\n\t\r\n\tvar doubleChr = 0x22;\r\n\tvar singleChr = 0x27;\r\n\tvar pipeChr = 0x7C;\r\n\tvar escapeChr = 0x5C;\r\n\tvar spaceChr = 0x20;\r\n\t\r\n\tvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\r\n\tvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\r\n\t\r\n\tfunction peek() {\r\n\t  return str.charCodeAt(index + 1);\r\n\t}\r\n\t\r\n\tfunction next() {\r\n\t  return str.charCodeAt(++index);\r\n\t}\r\n\t\r\n\tfunction eof() {\r\n\t  return index >= len;\r\n\t}\r\n\t\r\n\tfunction eatSpace() {\r\n\t  while (peek() === spaceChr) {\r\n\t    next();\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction isStringStart(chr) {\r\n\t  return chr === doubleChr || chr === singleChr;\r\n\t}\r\n\t\r\n\tfunction isExpStart(chr) {\r\n\t  return expStartChr[chr];\r\n\t}\r\n\t\r\n\tfunction isExpEnd(start, chr) {\r\n\t  return expChrPair[start] === chr;\r\n\t}\r\n\t\r\n\tfunction parseString() {\r\n\t  var stringQuote = next();\r\n\t  var chr;\r\n\t  while (!eof()) {\r\n\t    chr = next();\r\n\t    // escape char\r\n\t    if (chr === escapeChr) {\r\n\t      next();\r\n\t    } else if (chr === stringQuote) {\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction parseSpecialExp(chr) {\r\n\t  var inExp = 0;\r\n\t  var startChr = chr;\r\n\t\r\n\t  while (!eof()) {\r\n\t    chr = peek();\r\n\t    if (isStringStart(chr)) {\r\n\t      parseString();\r\n\t      continue;\r\n\t    }\r\n\t\r\n\t    if (startChr === chr) {\r\n\t      inExp++;\r\n\t    }\r\n\t    if (isExpEnd(startChr, chr)) {\r\n\t      inExp--;\r\n\t    }\r\n\t\r\n\t    next();\r\n\t\r\n\t    if (inExp === 0) {\r\n\t      break;\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * syntax:\r\n\t * expression | filterName  [arg  arg [| filterName arg arg]]\r\n\t */\r\n\t\r\n\tfunction parseExpression() {\r\n\t  var start = index;\r\n\t  while (!eof()) {\r\n\t    chr = peek();\r\n\t    if (isStringStart(chr)) {\r\n\t      parseString();\r\n\t    } else if (isExpStart(chr)) {\r\n\t      parseSpecialExp(chr);\r\n\t    } else if (chr === pipeChr) {\r\n\t      next();\r\n\t      chr = peek();\r\n\t      if (chr === pipeChr) {\r\n\t        next();\r\n\t      } else {\r\n\t        if (state === startState || state === filterArgState) {\r\n\t          state = filterState;\r\n\t        }\r\n\t        break;\r\n\t      }\r\n\t    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\r\n\t      eatSpace();\r\n\t      break;\r\n\t    } else {\r\n\t      if (state === filterState) {\r\n\t        state = filterNameState;\r\n\t      }\r\n\t      next();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  return str.slice(start + 1, index) || null;\r\n\t}\r\n\t\r\n\tfunction parseFilterList() {\r\n\t  var filters = [];\r\n\t  while (!eof()) {\r\n\t    filters.push(parseFilter());\r\n\t  }\r\n\t  return filters;\r\n\t}\r\n\t\r\n\tfunction parseFilter() {\r\n\t  var filter = {};\r\n\t  var args;\r\n\t\r\n\t  state = filterState;\r\n\t  filter.name = parseExpression().trim();\r\n\t\r\n\t  state = filterArgState;\r\n\t  args = parseFilterArguments();\r\n\t\r\n\t  if (args.length) {\r\n\t    filter.args = args;\r\n\t  }\r\n\t  return filter;\r\n\t}\r\n\t\r\n\tfunction parseFilterArguments() {\r\n\t  var args = [];\r\n\t  while (!eof() && state !== filterState) {\r\n\t    var arg = parseExpression();\r\n\t    if (!arg) {\r\n\t      break;\r\n\t    }\r\n\t    args.push(processFilterArg(arg));\r\n\t  }\r\n\t\r\n\t  return args;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an argument is dynamic and strip quotes.\r\n\t *\r\n\t * @param {String} arg\r\n\t * @return {Object}\r\n\t */\r\n\t\r\n\tfunction processFilterArg(arg) {\r\n\t  if (reservedArgRE.test(arg)) {\r\n\t    return {\r\n\t      value: toNumber(arg),\r\n\t      dynamic: false\r\n\t    };\r\n\t  } else {\r\n\t    var stripped = stripQuotes(arg);\r\n\t    var dynamic = stripped === arg;\r\n\t    return {\r\n\t      value: dynamic ? arg : stripped,\r\n\t      dynamic: dynamic\r\n\t    };\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parse a directive value and extract the expression\r\n\t * and its filters into a descriptor.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * \"a + 1 | uppercase\" will yield:\r\n\t * {\r\n\t *   expression: 'a + 1',\r\n\t *   filters: [\r\n\t *     { name: 'uppercase', args: null }\r\n\t *   ]\r\n\t * }\r\n\t *\r\n\t * @param {String} s\r\n\t * @return {Object}\r\n\t */\r\n\t\r\n\tfunction parseDirective(s) {\r\n\t  var hit = cache$1.get(s);\r\n\t  if (hit) {\r\n\t    return hit;\r\n\t  }\r\n\t\r\n\t  // reset parser state\r\n\t  str = s;\r\n\t  dir = {};\r\n\t  len = str.length;\r\n\t  index = -1;\r\n\t  chr = '';\r\n\t  state = startState;\r\n\t\r\n\t  var filters;\r\n\t\r\n\t  if (str.indexOf('|') < 0) {\r\n\t    dir.expression = str.trim();\r\n\t  } else {\r\n\t    dir.expression = parseExpression().trim();\r\n\t    filters = parseFilterList();\r\n\t    if (filters.length) {\r\n\t      dir.filters = filters;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  cache$1.put(s, dir);\r\n\t  return dir;\r\n\t}\r\n\t\r\n\tvar directive = Object.freeze({\r\n\t  parseDirective: parseDirective\r\n\t});\r\n\t\r\n\tvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n\tvar cache = undefined;\r\n\tvar tagRE = undefined;\r\n\tvar htmlRE = undefined;\r\n\t/**\r\n\t * Escape a string so it can be used in a RegExp\r\n\t * constructor.\r\n\t *\r\n\t * @param {String} str\r\n\t */\r\n\t\r\n\tfunction escapeRegex(str) {\r\n\t  return str.replace(regexEscapeRE, '\\\\$&');\r\n\t}\r\n\t\r\n\tfunction compileRegex() {\r\n\t  var open = escapeRegex(config.delimiters[0]);\r\n\t  var close = escapeRegex(config.delimiters[1]);\r\n\t  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\r\n\t  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\r\n\t  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\r\n\t  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\r\n\t  // reset cache\r\n\t  cache = new Cache(1000);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parse a template text string into an array of tokens.\r\n\t *\r\n\t * @param {String} text\r\n\t * @return {Array<Object> | null}\r\n\t *               - {String} type\r\n\t *               - {String} value\r\n\t *               - {Boolean} [html]\r\n\t *               - {Boolean} [oneTime]\r\n\t */\r\n\t\r\n\tfunction parseText(text) {\r\n\t  if (!cache) {\r\n\t    compileRegex();\r\n\t  }\r\n\t  var hit = cache.get(text);\r\n\t  if (hit) {\r\n\t    return hit;\r\n\t  }\r\n\t  if (!tagRE.test(text)) {\r\n\t    return null;\r\n\t  }\r\n\t  var tokens = [];\r\n\t  var lastIndex = tagRE.lastIndex = 0;\r\n\t  var match, index, html, value, first, oneTime;\r\n\t  /* eslint-disable no-cond-assign */\r\n\t  while (match = tagRE.exec(text)) {\r\n\t    /* eslint-enable no-cond-assign */\r\n\t    index = match.index;\r\n\t    // push text token\r\n\t    if (index > lastIndex) {\r\n\t      tokens.push({\r\n\t        value: text.slice(lastIndex, index)\r\n\t      });\r\n\t    }\r\n\t    // tag token\r\n\t    html = htmlRE.test(match[0]);\r\n\t    value = html ? match[1] : match[2];\r\n\t    first = value.charCodeAt(0);\r\n\t    oneTime = first === 42; // *\r\n\t    value = oneTime ? value.slice(1) : value;\r\n\t    tokens.push({\r\n\t      tag: true,\r\n\t      value: value.trim(),\r\n\t      html: html,\r\n\t      oneTime: oneTime\r\n\t    });\r\n\t    lastIndex = index + match[0].length;\r\n\t  }\r\n\t  if (lastIndex < text.length) {\r\n\t    tokens.push({\r\n\t      value: text.slice(lastIndex)\r\n\t    });\r\n\t  }\r\n\t  cache.put(text, tokens);\r\n\t  return tokens;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format a list of tokens into an expression.\r\n\t * e.g. tokens parsed from 'a {{b}} c' can be serialized\r\n\t * into one single expression as '\"a \" + b + \" c\"'.\r\n\t *\r\n\t * @param {Array} tokens\r\n\t * @param {Vue} [vm]\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction tokensToExp(tokens, vm) {\r\n\t  if (tokens.length > 1) {\r\n\t    return tokens.map(function (token) {\r\n\t      return formatToken(token, vm);\r\n\t    }).join('+');\r\n\t  } else {\r\n\t    return formatToken(tokens[0], vm, true);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format a single token.\r\n\t *\r\n\t * @param {Object} token\r\n\t * @param {Vue} [vm]\r\n\t * @param {Boolean} [single]\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction formatToken(token, vm, single) {\r\n\t  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\r\n\t}\r\n\t\r\n\t/**\r\n\t * For an attribute with multiple interpolation tags,\r\n\t * e.g. attr=\"some-{{thing | filter}}\", in order to combine\r\n\t * the whole thing into a single watchable expression, we\r\n\t * have to inline those filters. This function does exactly\r\n\t * that. This is a bit hacky but it avoids heavy changes\r\n\t * to directive parser and watcher mechanism.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @param {Boolean} single\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tvar filterRE = /[^|]\\|[^|]/;\r\n\tfunction inlineFilters(exp, single) {\r\n\t  if (!filterRE.test(exp)) {\r\n\t    return single ? exp : '(' + exp + ')';\r\n\t  } else {\r\n\t    var dir = parseDirective(exp);\r\n\t    if (!dir.filters) {\r\n\t      return '(' + exp + ')';\r\n\t    } else {\r\n\t      return 'this._applyFilters(' + dir.expression + // value\r\n\t      ',null,' + // oldValue (null for read)\r\n\t      JSON.stringify(dir.filters) + // filter descriptors\r\n\t      ',false)'; // write?\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tvar text = Object.freeze({\r\n\t  compileRegex: compileRegex,\r\n\t  parseText: parseText,\r\n\t  tokensToExp: tokensToExp\r\n\t});\r\n\t\r\n\tvar delimiters = ['{{', '}}'];\r\n\tvar unsafeDelimiters = ['{{{', '}}}'];\r\n\t\r\n\tvar config = Object.defineProperties({\r\n\t\r\n\t  /**\r\n\t   * Whether to print debug messages.\r\n\t   * Also enables stack trace for warnings.\r\n\t   *\r\n\t   * @type {Boolean}\r\n\t   */\r\n\t\r\n\t  debug: false,\r\n\t\r\n\t  /**\r\n\t   * Whether to suppress warnings.\r\n\t   *\r\n\t   * @type {Boolean}\r\n\t   */\r\n\t\r\n\t  silent: false,\r\n\t\r\n\t  /**\r\n\t   * Whether to use async rendering.\r\n\t   */\r\n\t\r\n\t  async: true,\r\n\t\r\n\t  /**\r\n\t   * Whether to warn against errors caught when evaluating\r\n\t   * expressions.\r\n\t   */\r\n\t\r\n\t  warnExpressionErrors: true,\r\n\t\r\n\t  /**\r\n\t   * Whether to allow devtools inspection.\r\n\t   * Disabled by default in production builds.\r\n\t   */\r\n\t\r\n\t  devtools: (\"production\") !== 'production',\r\n\t\r\n\t  /**\r\n\t   * Internal flag to indicate the delimiters have been\r\n\t   * changed.\r\n\t   *\r\n\t   * @type {Boolean}\r\n\t   */\r\n\t\r\n\t  _delimitersChanged: true,\r\n\t\r\n\t  /**\r\n\t   * List of asset types that a component can own.\r\n\t   *\r\n\t   * @type {Array}\r\n\t   */\r\n\t\r\n\t  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\r\n\t\r\n\t  /**\r\n\t   * prop binding modes\r\n\t   */\r\n\t\r\n\t  _propBindingModes: {\r\n\t    ONE_WAY: 0,\r\n\t    TWO_WAY: 1,\r\n\t    ONE_TIME: 2\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Max circular updates allowed in a batcher flush cycle.\r\n\t   */\r\n\t\r\n\t  _maxUpdateCount: 100\r\n\t\r\n\t}, {\r\n\t  delimiters: { /**\r\n\t                 * Interpolation delimiters. Changing these would trigger\r\n\t                 * the text parser to re-compile the regular expressions.\r\n\t                 *\r\n\t                 * @type {Array<String>}\r\n\t                 */\r\n\t\r\n\t    get: function get() {\r\n\t      return delimiters;\r\n\t    },\r\n\t    set: function set(val) {\r\n\t      delimiters = val;\r\n\t      compileRegex();\r\n\t    },\r\n\t    configurable: true,\r\n\t    enumerable: true\r\n\t  },\r\n\t  unsafeDelimiters: {\r\n\t    get: function get() {\r\n\t      return unsafeDelimiters;\r\n\t    },\r\n\t    set: function set(val) {\r\n\t      unsafeDelimiters = val;\r\n\t      compileRegex();\r\n\t    },\r\n\t    configurable: true,\r\n\t    enumerable: true\r\n\t  }\r\n\t});\r\n\t\r\n\tvar warn = undefined;\r\n\tvar formatComponentName = undefined;\r\n\t\r\n\tif (false) {\r\n\t  (function () {\r\n\t    var hasConsole = typeof console !== 'undefined';\r\n\t\r\n\t    warn = function (msg, vm) {\r\n\t      if (hasConsole && !config.silent) {\r\n\t        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\r\n\t      }\r\n\t    };\r\n\t\r\n\t    formatComponentName = function (vm) {\r\n\t      var name = vm._isVue ? vm.$options.name : vm.name;\r\n\t      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\r\n\t    };\r\n\t  })();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Append with transition.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Element} target\r\n\t * @param {Vue} vm\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tfunction appendWithTransition(el, target, vm, cb) {\r\n\t  applyTransition(el, 1, function () {\r\n\t    target.appendChild(el);\r\n\t  }, vm, cb);\r\n\t}\r\n\t\r\n\t/**\r\n\t * InsertBefore with transition.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Element} target\r\n\t * @param {Vue} vm\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tfunction beforeWithTransition(el, target, vm, cb) {\r\n\t  applyTransition(el, 1, function () {\r\n\t    before(el, target);\r\n\t  }, vm, cb);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove with transition.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Vue} vm\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tfunction removeWithTransition(el, vm, cb) {\r\n\t  applyTransition(el, -1, function () {\r\n\t    remove(el);\r\n\t  }, vm, cb);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Apply transitions with an operation callback.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Number} direction\r\n\t *                  1: enter\r\n\t *                 -1: leave\r\n\t * @param {Function} op - the actual DOM operation\r\n\t * @param {Vue} vm\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tfunction applyTransition(el, direction, op, vm, cb) {\r\n\t  var transition = el.__v_trans;\r\n\t  if (!transition ||\r\n\t  // skip if there are no js hooks and CSS transition is\r\n\t  // not supported\r\n\t  !transition.hooks && !transitionEndEvent ||\r\n\t  // skip transitions for initial compile\r\n\t  !vm._isCompiled ||\r\n\t  // if the vm is being manipulated by a parent directive\r\n\t  // during the parent's compilation phase, skip the\r\n\t  // animation.\r\n\t  vm.$parent && !vm.$parent._isCompiled) {\r\n\t    op();\r\n\t    if (cb) cb();\r\n\t    return;\r\n\t  }\r\n\t  var action = direction > 0 ? 'enter' : 'leave';\r\n\t  transition[action](op, cb);\r\n\t}\r\n\t\r\n\tvar transition = Object.freeze({\r\n\t  appendWithTransition: appendWithTransition,\r\n\t  beforeWithTransition: beforeWithTransition,\r\n\t  removeWithTransition: removeWithTransition,\r\n\t  applyTransition: applyTransition\r\n\t});\r\n\t\r\n\t/**\r\n\t * Query an element selector if it's not an element already.\r\n\t *\r\n\t * @param {String|Element} el\r\n\t * @return {Element}\r\n\t */\r\n\t\r\n\tfunction query(el) {\r\n\t  if (typeof el === 'string') {\r\n\t    var selector = el;\r\n\t    el = document.querySelector(el);\r\n\t    if (!el) {\r\n\t      (\"production\") !== 'production' && warn('Cannot find element: ' + selector);\r\n\t    }\r\n\t  }\r\n\t  return el;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if a node is in the document.\r\n\t * Note: document.documentElement.contains should work here\r\n\t * but always returns false for comment nodes in phantomjs,\r\n\t * making unit tests difficult. This is fixed by doing the\r\n\t * contains() check on the node's parentNode instead of\r\n\t * the node itself.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction inDoc(node) {\r\n\t  if (!node) return false;\r\n\t  var doc = node.ownerDocument.documentElement;\r\n\t  var parent = node.parentNode;\r\n\t  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get and remove an attribute from a node.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {String} _attr\r\n\t */\r\n\t\r\n\tfunction getAttr(node, _attr) {\r\n\t  var val = node.getAttribute(_attr);\r\n\t  if (val !== null) {\r\n\t    node.removeAttribute(_attr);\r\n\t  }\r\n\t  return val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get an attribute with colon or v-bind: prefix.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {String} name\r\n\t * @return {String|null}\r\n\t */\r\n\t\r\n\tfunction getBindAttr(node, name) {\r\n\t  var val = getAttr(node, ':' + name);\r\n\t  if (val === null) {\r\n\t    val = getAttr(node, 'v-bind:' + name);\r\n\t  }\r\n\t  return val;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check the presence of a bind attribute.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {String} name\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction hasBindAttr(node, name) {\r\n\t  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Insert el before target\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Element} target\r\n\t */\r\n\t\r\n\tfunction before(el, target) {\r\n\t  target.parentNode.insertBefore(el, target);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Insert el after target\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Element} target\r\n\t */\r\n\t\r\n\tfunction after(el, target) {\r\n\t  if (target.nextSibling) {\r\n\t    before(el, target.nextSibling);\r\n\t  } else {\r\n\t    target.parentNode.appendChild(el);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove el from DOM\r\n\t *\r\n\t * @param {Element} el\r\n\t */\r\n\t\r\n\tfunction remove(el) {\r\n\t  el.parentNode.removeChild(el);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Prepend el to target\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Element} target\r\n\t */\r\n\t\r\n\tfunction prepend(el, target) {\r\n\t  if (target.firstChild) {\r\n\t    before(el, target.firstChild);\r\n\t  } else {\r\n\t    target.appendChild(el);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Replace target with el\r\n\t *\r\n\t * @param {Element} target\r\n\t * @param {Element} el\r\n\t */\r\n\t\r\n\tfunction replace(target, el) {\r\n\t  var parent = target.parentNode;\r\n\t  if (parent) {\r\n\t    parent.replaceChild(el, target);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add event listener shorthand.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} event\r\n\t * @param {Function} cb\r\n\t * @param {Boolean} [useCapture]\r\n\t */\r\n\t\r\n\tfunction on(el, event, cb, useCapture) {\r\n\t  el.addEventListener(event, cb, useCapture);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove event listener shorthand.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} event\r\n\t * @param {Function} cb\r\n\t */\r\n\t\r\n\tfunction off(el, event, cb) {\r\n\t  el.removeEventListener(event, cb);\r\n\t}\r\n\t\r\n\t/**\r\n\t * For IE9 compat: when both class and :class are present\r\n\t * getAttribute('class') returns wrong value...\r\n\t *\r\n\t * @param {Element} el\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction getClass(el) {\r\n\t  var classname = el.className;\r\n\t  if (typeof classname === 'object') {\r\n\t    classname = classname.baseVal || '';\r\n\t  }\r\n\t  return classname;\r\n\t}\r\n\t\r\n\t/**\r\n\t * In IE9, setAttribute('class') will result in empty class\r\n\t * if the element also has the :class attribute; However in\r\n\t * PhantomJS, setting `className` does not work on SVG elements...\r\n\t * So we have to do a conditional check here.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} cls\r\n\t */\r\n\t\r\n\tfunction setClass(el, cls) {\r\n\t  /* istanbul ignore if */\r\n\t  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\r\n\t    el.className = cls;\r\n\t  } else {\r\n\t    el.setAttribute('class', cls);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add class with compatibility for IE & SVG\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} cls\r\n\t */\r\n\t\r\n\tfunction addClass(el, cls) {\r\n\t  if (el.classList) {\r\n\t    el.classList.add(cls);\r\n\t  } else {\r\n\t    var cur = ' ' + getClass(el) + ' ';\r\n\t    if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n\t      setClass(el, (cur + cls).trim());\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove class with compatibility for IE & SVG\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} cls\r\n\t */\r\n\t\r\n\tfunction removeClass(el, cls) {\r\n\t  if (el.classList) {\r\n\t    el.classList.remove(cls);\r\n\t  } else {\r\n\t    var cur = ' ' + getClass(el) + ' ';\r\n\t    var tar = ' ' + cls + ' ';\r\n\t    while (cur.indexOf(tar) >= 0) {\r\n\t      cur = cur.replace(tar, ' ');\r\n\t    }\r\n\t    setClass(el, cur.trim());\r\n\t  }\r\n\t  if (!el.className) {\r\n\t    el.removeAttribute('class');\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Extract raw content inside an element into a temporary\r\n\t * container div\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Boolean} asFragment\r\n\t * @return {Element|DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction extractContent(el, asFragment) {\r\n\t  var child;\r\n\t  var rawContent;\r\n\t  /* istanbul ignore if */\r\n\t  if (isTemplate(el) && isFragment(el.content)) {\r\n\t    el = el.content;\r\n\t  }\r\n\t  if (el.hasChildNodes()) {\r\n\t    trimNode(el);\r\n\t    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\r\n\t    /* eslint-disable no-cond-assign */\r\n\t    while (child = el.firstChild) {\r\n\t      /* eslint-enable no-cond-assign */\r\n\t      rawContent.appendChild(child);\r\n\t    }\r\n\t  }\r\n\t  return rawContent;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Trim possible empty head/tail text and comment\r\n\t * nodes inside a parent.\r\n\t *\r\n\t * @param {Node} node\r\n\t */\r\n\t\r\n\tfunction trimNode(node) {\r\n\t  var child;\r\n\t  /* eslint-disable no-sequences */\r\n\t  while ((child = node.firstChild, isTrimmable(child))) {\r\n\t    node.removeChild(child);\r\n\t  }\r\n\t  while ((child = node.lastChild, isTrimmable(child))) {\r\n\t    node.removeChild(child);\r\n\t  }\r\n\t  /* eslint-enable no-sequences */\r\n\t}\r\n\t\r\n\tfunction isTrimmable(node) {\r\n\t  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an element is a template tag.\r\n\t * Note if the template appears inside an SVG its tagName\r\n\t * will be in lowercase.\r\n\t *\r\n\t * @param {Element} el\r\n\t */\r\n\t\r\n\tfunction isTemplate(el) {\r\n\t  return el.tagName && el.tagName.toLowerCase() === 'template';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create an \"anchor\" for performing dom insertion/removals.\r\n\t * This is used in a number of scenarios:\r\n\t * - fragment instance\r\n\t * - v-html\r\n\t * - v-if\r\n\t * - v-for\r\n\t * - component\r\n\t *\r\n\t * @param {String} content\r\n\t * @param {Boolean} persist - IE trashes empty textNodes on\r\n\t *                            cloneNode(true), so in certain\r\n\t *                            cases the anchor needs to be\r\n\t *                            non-empty to be persisted in\r\n\t *                            templates.\r\n\t * @return {Comment|Text}\r\n\t */\r\n\t\r\n\tfunction createAnchor(content, persist) {\r\n\t  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\r\n\t  anchor.__v_anchor = true;\r\n\t  return anchor;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Find a component ref attribute that starts with $.\r\n\t *\r\n\t * @param {Element} node\r\n\t * @return {String|undefined}\r\n\t */\r\n\t\r\n\tvar refRE = /^v-ref:/;\r\n\t\r\n\tfunction findRef(node) {\r\n\t  if (node.hasAttributes()) {\r\n\t    var attrs = node.attributes;\r\n\t    for (var i = 0, l = attrs.length; i < l; i++) {\r\n\t      var name = attrs[i].name;\r\n\t      if (refRE.test(name)) {\r\n\t        return camelize(name.replace(refRE, ''));\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Map a function to a range of nodes .\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {Node} end\r\n\t * @param {Function} op\r\n\t */\r\n\t\r\n\tfunction mapNodeRange(node, end, op) {\r\n\t  var next;\r\n\t  while (node !== end) {\r\n\t    next = node.nextSibling;\r\n\t    op(node);\r\n\t    node = next;\r\n\t  }\r\n\t  op(end);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove a range of nodes with transition, store\r\n\t * the nodes in a fragment with correct ordering,\r\n\t * and call callback when done.\r\n\t *\r\n\t * @param {Node} start\r\n\t * @param {Node} end\r\n\t * @param {Vue} vm\r\n\t * @param {DocumentFragment} frag\r\n\t * @param {Function} cb\r\n\t */\r\n\t\r\n\tfunction removeNodeRange(start, end, vm, frag, cb) {\r\n\t  var done = false;\r\n\t  var removed = 0;\r\n\t  var nodes = [];\r\n\t  mapNodeRange(start, end, function (node) {\r\n\t    if (node === end) done = true;\r\n\t    nodes.push(node);\r\n\t    removeWithTransition(node, vm, onRemoved);\r\n\t  });\r\n\t  function onRemoved() {\r\n\t    removed++;\r\n\t    if (done && removed >= nodes.length) {\r\n\t      for (var i = 0; i < nodes.length; i++) {\r\n\t        frag.appendChild(nodes[i]);\r\n\t      }\r\n\t      cb && cb();\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if a node is a DocumentFragment.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isFragment(node) {\r\n\t  return node && node.nodeType === 11;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get outerHTML of elements, taking care\r\n\t * of SVG elements in IE as well.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction getOuterHTML(el) {\r\n\t  if (el.outerHTML) {\r\n\t    return el.outerHTML;\r\n\t  } else {\r\n\t    var container = document.createElement('div');\r\n\t    container.appendChild(el.cloneNode(true));\r\n\t    return container.innerHTML;\r\n\t  }\r\n\t}\r\n\t\r\n\tvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\r\n\tvar reservedTagRE = /^(slot|partial|component)$/i;\r\n\t\r\n\tvar isUnknownElement = undefined;\r\n\tif (false) {\r\n\t  isUnknownElement = function (el, tag) {\r\n\t    if (tag.indexOf('-') > -1) {\r\n\t      // http://stackoverflow.com/a/28210364/1070244\r\n\t      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\r\n\t    } else {\r\n\t      return (/HTMLUnknownElement/.test(el.toString()) &&\r\n\t        // Chrome returns unknown for several HTML5 elements.\r\n\t        // https://code.google.com/p/chromium/issues/detail?id=540526\r\n\t        // Firefox returns unknown for some \"Interactive elements.\"\r\n\t        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\r\n\t      );\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an element is a component, if yes return its\r\n\t * component id.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Object|undefined}\r\n\t */\r\n\t\r\n\tfunction checkComponentAttr(el, options) {\r\n\t  var tag = el.tagName.toLowerCase();\r\n\t  var hasAttrs = el.hasAttributes();\r\n\t  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\r\n\t    if (resolveAsset(options, 'components', tag)) {\r\n\t      return { id: tag };\r\n\t    } else {\r\n\t      var is = hasAttrs && getIsBinding(el, options);\r\n\t      if (is) {\r\n\t        return is;\r\n\t      } else if (false) {\r\n\t        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\r\n\t        if (expectedTag) {\r\n\t          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\r\n\t        } else if (isUnknownElement(el, tag)) {\r\n\t          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  } else if (hasAttrs) {\r\n\t    return getIsBinding(el, options);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get \"is\" binding from an element.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Object|undefined}\r\n\t */\r\n\t\r\n\tfunction getIsBinding(el, options) {\r\n\t  // dynamic syntax\r\n\t  var exp = el.getAttribute('is');\r\n\t  if (exp != null) {\r\n\t    if (resolveAsset(options, 'components', exp)) {\r\n\t      el.removeAttribute('is');\r\n\t      return { id: exp };\r\n\t    }\r\n\t  } else {\r\n\t    exp = getBindAttr(el, 'is');\r\n\t    if (exp != null) {\r\n\t      return { id: exp, dynamic: true };\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Option overwriting strategies are functions that handle\r\n\t * how to merge a parent option value and a child option\r\n\t * value into the final value.\r\n\t *\r\n\t * All strategy functions follow the same signature:\r\n\t *\r\n\t * @param {*} parentVal\r\n\t * @param {*} childVal\r\n\t * @param {Vue} [vm]\r\n\t */\r\n\t\r\n\tvar strats = config.optionMergeStrategies = Object.create(null);\r\n\t\r\n\t/**\r\n\t * Helper that recursively merges two data objects together.\r\n\t */\r\n\t\r\n\tfunction mergeData(to, from) {\r\n\t  var key, toVal, fromVal;\r\n\t  for (key in from) {\r\n\t    toVal = to[key];\r\n\t    fromVal = from[key];\r\n\t    if (!hasOwn(to, key)) {\r\n\t      set(to, key, fromVal);\r\n\t    } else if (isObject(toVal) && isObject(fromVal)) {\r\n\t      mergeData(toVal, fromVal);\r\n\t    }\r\n\t  }\r\n\t  return to;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Data\r\n\t */\r\n\t\r\n\tstrats.data = function (parentVal, childVal, vm) {\r\n\t  if (!vm) {\r\n\t    // in a Vue.extend merge, both should be functions\r\n\t    if (!childVal) {\r\n\t      return parentVal;\r\n\t    }\r\n\t    if (typeof childVal !== 'function') {\r\n\t      (\"production\") !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\r\n\t      return parentVal;\r\n\t    }\r\n\t    if (!parentVal) {\r\n\t      return childVal;\r\n\t    }\r\n\t    // when parentVal & childVal are both present,\r\n\t    // we need to return a function that returns the\r\n\t    // merged result of both functions... no need to\r\n\t    // check if parentVal is a function here because\r\n\t    // it has to be a function to pass previous merges.\r\n\t    return function mergedDataFn() {\r\n\t      return mergeData(childVal.call(this), parentVal.call(this));\r\n\t    };\r\n\t  } else if (parentVal || childVal) {\r\n\t    return function mergedInstanceDataFn() {\r\n\t      // instance merge\r\n\t      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\r\n\t      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\r\n\t      if (instanceData) {\r\n\t        return mergeData(instanceData, defaultData);\r\n\t      } else {\r\n\t        return defaultData;\r\n\t      }\r\n\t    };\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * El\r\n\t */\r\n\t\r\n\tstrats.el = function (parentVal, childVal, vm) {\r\n\t  if (!vm && childVal && typeof childVal !== 'function') {\r\n\t    (\"production\") !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\r\n\t    return;\r\n\t  }\r\n\t  var ret = childVal || parentVal;\r\n\t  // invoke the element factory if this is instance merge\r\n\t  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Hooks and param attributes are merged as arrays.\r\n\t */\r\n\t\r\n\tstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\r\n\t  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Assets\r\n\t *\r\n\t * When a vm is present (instance creation), we need to do\r\n\t * a three-way merge between constructor options, instance\r\n\t * options and parent options.\r\n\t */\r\n\t\r\n\tfunction mergeAssets(parentVal, childVal) {\r\n\t  var res = Object.create(parentVal || null);\r\n\t  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\r\n\t}\r\n\t\r\n\tconfig._assetTypes.forEach(function (type) {\r\n\t  strats[type + 's'] = mergeAssets;\r\n\t});\r\n\t\r\n\t/**\r\n\t * Events & Watchers.\r\n\t *\r\n\t * Events & watchers hashes should not overwrite one\r\n\t * another, so we merge them as arrays.\r\n\t */\r\n\t\r\n\tstrats.watch = strats.events = function (parentVal, childVal) {\r\n\t  if (!childVal) return parentVal;\r\n\t  if (!parentVal) return childVal;\r\n\t  var ret = {};\r\n\t  extend(ret, parentVal);\r\n\t  for (var key in childVal) {\r\n\t    var parent = ret[key];\r\n\t    var child = childVal[key];\r\n\t    if (parent && !isArray(parent)) {\r\n\t      parent = [parent];\r\n\t    }\r\n\t    ret[key] = parent ? parent.concat(child) : [child];\r\n\t  }\r\n\t  return ret;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Other object hashes.\r\n\t */\r\n\t\r\n\tstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\r\n\t  if (!childVal) return parentVal;\r\n\t  if (!parentVal) return childVal;\r\n\t  var ret = Object.create(null);\r\n\t  extend(ret, parentVal);\r\n\t  extend(ret, childVal);\r\n\t  return ret;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Default strategy.\r\n\t */\r\n\t\r\n\tvar defaultStrat = function defaultStrat(parentVal, childVal) {\r\n\t  return childVal === undefined ? parentVal : childVal;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Make sure component options get converted to actual\r\n\t * constructors.\r\n\t *\r\n\t * @param {Object} options\r\n\t */\r\n\t\r\n\tfunction guardComponents(options) {\r\n\t  if (options.components) {\r\n\t    var components = options.components = guardArrayAssets(options.components);\r\n\t    var ids = Object.keys(components);\r\n\t    var def;\r\n\t    if (false) {\r\n\t      var map = options._componentNameMap = {};\r\n\t    }\r\n\t    for (var i = 0, l = ids.length; i < l; i++) {\r\n\t      var key = ids[i];\r\n\t      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\r\n\t        (\"production\") !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\r\n\t        continue;\r\n\t      }\r\n\t      // record a all lowercase <-> kebab-case mapping for\r\n\t      // possible custom element case error warning\r\n\t      if (false) {\r\n\t        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\r\n\t      }\r\n\t      def = components[key];\r\n\t      if (isPlainObject(def)) {\r\n\t        components[key] = Vue.extend(def);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Ensure all props option syntax are normalized into the\r\n\t * Object-based format.\r\n\t *\r\n\t * @param {Object} options\r\n\t */\r\n\t\r\n\tfunction guardProps(options) {\r\n\t  var props = options.props;\r\n\t  var i, val;\r\n\t  if (isArray(props)) {\r\n\t    options.props = {};\r\n\t    i = props.length;\r\n\t    while (i--) {\r\n\t      val = props[i];\r\n\t      if (typeof val === 'string') {\r\n\t        options.props[val] = null;\r\n\t      } else if (val.name) {\r\n\t        options.props[val.name] = val;\r\n\t      }\r\n\t    }\r\n\t  } else if (isPlainObject(props)) {\r\n\t    var keys = Object.keys(props);\r\n\t    i = keys.length;\r\n\t    while (i--) {\r\n\t      val = props[keys[i]];\r\n\t      if (typeof val === 'function') {\r\n\t        props[keys[i]] = { type: val };\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Guard an Array-format assets option and converted it\r\n\t * into the key-value Object format.\r\n\t *\r\n\t * @param {Object|Array} assets\r\n\t * @return {Object}\r\n\t */\r\n\t\r\n\tfunction guardArrayAssets(assets) {\r\n\t  if (isArray(assets)) {\r\n\t    var res = {};\r\n\t    var i = assets.length;\r\n\t    var asset;\r\n\t    while (i--) {\r\n\t      asset = assets[i];\r\n\t      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\r\n\t      if (!id) {\r\n\t        (\"production\") !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\r\n\t      } else {\r\n\t        res[id] = asset;\r\n\t      }\r\n\t    }\r\n\t    return res;\r\n\t  }\r\n\t  return assets;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Merge two option objects into a new one.\r\n\t * Core utility used in both instantiation and inheritance.\r\n\t *\r\n\t * @param {Object} parent\r\n\t * @param {Object} child\r\n\t * @param {Vue} [vm] - if vm is present, indicates this is\r\n\t *                     an instantiation merge.\r\n\t */\r\n\t\r\n\tfunction mergeOptions(parent, child, vm) {\r\n\t  guardComponents(child);\r\n\t  guardProps(child);\r\n\t  if (false) {\r\n\t    if (child.propsData && !vm) {\r\n\t      warn('propsData can only be used as an instantiation option.');\r\n\t    }\r\n\t  }\r\n\t  var options = {};\r\n\t  var key;\r\n\t  if (child['extends']) {\r\n\t    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\r\n\t  }\r\n\t  if (child.mixins) {\r\n\t    for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n\t      var mixin = child.mixins[i];\r\n\t      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\r\n\t      parent = mergeOptions(parent, mixinOptions, vm);\r\n\t    }\r\n\t  }\r\n\t  for (key in parent) {\r\n\t    mergeField(key);\r\n\t  }\r\n\t  for (key in child) {\r\n\t    if (!hasOwn(parent, key)) {\r\n\t      mergeField(key);\r\n\t    }\r\n\t  }\r\n\t  function mergeField(key) {\r\n\t    var strat = strats[key] || defaultStrat;\r\n\t    options[key] = strat(parent[key], child[key], vm, key);\r\n\t  }\r\n\t  return options;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resolve an asset.\r\n\t * This function is used because child instances need access\r\n\t * to assets defined in its ancestor chain.\r\n\t *\r\n\t * @param {Object} options\r\n\t * @param {String} type\r\n\t * @param {String} id\r\n\t * @param {Boolean} warnMissing\r\n\t * @return {Object|Function}\r\n\t */\r\n\t\r\n\tfunction resolveAsset(options, type, id, warnMissing) {\r\n\t  /* istanbul ignore if */\r\n\t  if (typeof id !== 'string') {\r\n\t    return;\r\n\t  }\r\n\t  var assets = options[type];\r\n\t  var camelizedId;\r\n\t  var res = assets[id] ||\r\n\t  // camelCase ID\r\n\t  assets[camelizedId = camelize(id)] ||\r\n\t  // Pascal Case ID\r\n\t  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\r\n\t  if (false) {\r\n\t    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\tvar uid$1 = 0;\r\n\t\r\n\t/**\r\n\t * A dep is an observable that can have multiple\r\n\t * directives subscribing to it.\r\n\t *\r\n\t * @constructor\r\n\t */\r\n\tfunction Dep() {\r\n\t  this.id = uid$1++;\r\n\t  this.subs = [];\r\n\t}\r\n\t\r\n\t// the current target watcher being evaluated.\r\n\t// this is globally unique because there could be only one\r\n\t// watcher being evaluated at any time.\r\n\tDep.target = null;\r\n\t\r\n\t/**\r\n\t * Add a directive subscriber.\r\n\t *\r\n\t * @param {Directive} sub\r\n\t */\r\n\t\r\n\tDep.prototype.addSub = function (sub) {\r\n\t  this.subs.push(sub);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Remove a directive subscriber.\r\n\t *\r\n\t * @param {Directive} sub\r\n\t */\r\n\t\r\n\tDep.prototype.removeSub = function (sub) {\r\n\t  this.subs.$remove(sub);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Add self as a dependency to the target watcher.\r\n\t */\r\n\t\r\n\tDep.prototype.depend = function () {\r\n\t  Dep.target.addDep(this);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Notify all subscribers of a new value.\r\n\t */\r\n\t\r\n\tDep.prototype.notify = function () {\r\n\t  // stablize the subscriber list first\r\n\t  var subs = toArray(this.subs);\r\n\t  for (var i = 0, l = subs.length; i < l; i++) {\r\n\t    subs[i].update();\r\n\t  }\r\n\t};\r\n\t\r\n\tvar arrayProto = Array.prototype;\r\n\tvar arrayMethods = Object.create(arrayProto)\r\n\t\r\n\t/**\r\n\t * Intercept mutating methods and emit events\r\n\t */\r\n\t\r\n\t;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\r\n\t  // cache original method\r\n\t  var original = arrayProto[method];\r\n\t  def(arrayMethods, method, function mutator() {\r\n\t    // avoid leaking arguments:\r\n\t    // http://jsperf.com/closure-with-arguments\r\n\t    var i = arguments.length;\r\n\t    var args = new Array(i);\r\n\t    while (i--) {\r\n\t      args[i] = arguments[i];\r\n\t    }\r\n\t    var result = original.apply(this, args);\r\n\t    var ob = this.__ob__;\r\n\t    var inserted;\r\n\t    switch (method) {\r\n\t      case 'push':\r\n\t        inserted = args;\r\n\t        break;\r\n\t      case 'unshift':\r\n\t        inserted = args;\r\n\t        break;\r\n\t      case 'splice':\r\n\t        inserted = args.slice(2);\r\n\t        break;\r\n\t    }\r\n\t    if (inserted) ob.observeArray(inserted);\r\n\t    // notify change\r\n\t    ob.dep.notify();\r\n\t    return result;\r\n\t  });\r\n\t});\r\n\t\r\n\t/**\r\n\t * Swap the element at the given index with a new value\r\n\t * and emits corresponding event.\r\n\t *\r\n\t * @param {Number} index\r\n\t * @param {*} val\r\n\t * @return {*} - replaced element\r\n\t */\r\n\t\r\n\tdef(arrayProto, '$set', function $set(index, val) {\r\n\t  if (index >= this.length) {\r\n\t    this.length = Number(index) + 1;\r\n\t  }\r\n\t  return this.splice(index, 1, val)[0];\r\n\t});\r\n\t\r\n\t/**\r\n\t * Convenience method to remove the element at given index or target element reference.\r\n\t *\r\n\t * @param {*} item\r\n\t */\r\n\t\r\n\tdef(arrayProto, '$remove', function $remove(item) {\r\n\t  /* istanbul ignore if */\r\n\t  if (!this.length) return;\r\n\t  var index = indexOf(this, item);\r\n\t  if (index > -1) {\r\n\t    return this.splice(index, 1);\r\n\t  }\r\n\t});\r\n\t\r\n\tvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\n\t\r\n\t/**\r\n\t * By default, when a reactive property is set, the new value is\r\n\t * also converted to become reactive. However in certain cases, e.g.\r\n\t * v-for scope alias and props, we don't want to force conversion\r\n\t * because the value may be a nested value under a frozen data structure.\r\n\t *\r\n\t * So whenever we want to set a reactive property without forcing\r\n\t * conversion on the new value, we wrap that call inside this function.\r\n\t */\r\n\t\r\n\tvar shouldConvert = true;\r\n\t\r\n\tfunction withoutConversion(fn) {\r\n\t  shouldConvert = false;\r\n\t  fn();\r\n\t  shouldConvert = true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Observer class that are attached to each observed\r\n\t * object. Once attached, the observer converts target\r\n\t * object's property keys into getter/setters that\r\n\t * collect dependencies and dispatches updates.\r\n\t *\r\n\t * @param {Array|Object} value\r\n\t * @constructor\r\n\t */\r\n\t\r\n\tfunction Observer(value) {\r\n\t  this.value = value;\r\n\t  this.dep = new Dep();\r\n\t  def(value, '__ob__', this);\r\n\t  if (isArray(value)) {\r\n\t    var augment = hasProto ? protoAugment : copyAugment;\r\n\t    augment(value, arrayMethods, arrayKeys);\r\n\t    this.observeArray(value);\r\n\t  } else {\r\n\t    this.walk(value);\r\n\t  }\r\n\t}\r\n\t\r\n\t// Instance methods\r\n\t\r\n\t/**\r\n\t * Walk through each property and convert them into\r\n\t * getter/setters. This method should only be called when\r\n\t * value type is Object.\r\n\t *\r\n\t * @param {Object} obj\r\n\t */\r\n\t\r\n\tObserver.prototype.walk = function (obj) {\r\n\t  var keys = Object.keys(obj);\r\n\t  for (var i = 0, l = keys.length; i < l; i++) {\r\n\t    this.convert(keys[i], obj[keys[i]]);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Observe a list of Array items.\r\n\t *\r\n\t * @param {Array} items\r\n\t */\r\n\t\r\n\tObserver.prototype.observeArray = function (items) {\r\n\t  for (var i = 0, l = items.length; i < l; i++) {\r\n\t    observe(items[i]);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Convert a property into getter/setter so we can emit\r\n\t * the events when the property is accessed/changed.\r\n\t *\r\n\t * @param {String} key\r\n\t * @param {*} val\r\n\t */\r\n\t\r\n\tObserver.prototype.convert = function (key, val) {\r\n\t  defineReactive(this.value, key, val);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Add an owner vm, so that when $set/$delete mutations\r\n\t * happen we can notify owner vms to proxy the keys and\r\n\t * digest the watchers. This is only called when the object\r\n\t * is observed as an instance's root $data.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t */\r\n\t\r\n\tObserver.prototype.addVm = function (vm) {\r\n\t  (this.vms || (this.vms = [])).push(vm);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Remove an owner vm. This is called when the object is\r\n\t * swapped out as an instance's $data object.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t */\r\n\t\r\n\tObserver.prototype.removeVm = function (vm) {\r\n\t  this.vms.$remove(vm);\r\n\t};\r\n\t\r\n\t// helpers\r\n\t\r\n\t/**\r\n\t * Augment an target Object or Array by intercepting\r\n\t * the prototype chain using __proto__\r\n\t *\r\n\t * @param {Object|Array} target\r\n\t * @param {Object} src\r\n\t */\r\n\t\r\n\tfunction protoAugment(target, src) {\r\n\t  /* eslint-disable no-proto */\r\n\t  target.__proto__ = src;\r\n\t  /* eslint-enable no-proto */\r\n\t}\r\n\t\r\n\t/**\r\n\t * Augment an target Object or Array by defining\r\n\t * hidden properties.\r\n\t *\r\n\t * @param {Object|Array} target\r\n\t * @param {Object} proto\r\n\t */\r\n\t\r\n\tfunction copyAugment(target, src, keys) {\r\n\t  for (var i = 0, l = keys.length; i < l; i++) {\r\n\t    var key = keys[i];\r\n\t    def(target, key, src[key]);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Attempt to create an observer instance for a value,\r\n\t * returns the new observer if successfully observed,\r\n\t * or the existing observer if the value already has one.\r\n\t *\r\n\t * @param {*} value\r\n\t * @param {Vue} [vm]\r\n\t * @return {Observer|undefined}\r\n\t * @static\r\n\t */\r\n\t\r\n\tfunction observe(value, vm) {\r\n\t  if (!value || typeof value !== 'object') {\r\n\t    return;\r\n\t  }\r\n\t  var ob;\r\n\t  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n\t    ob = value.__ob__;\r\n\t  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\r\n\t    ob = new Observer(value);\r\n\t  }\r\n\t  if (ob && vm) {\r\n\t    ob.addVm(vm);\r\n\t  }\r\n\t  return ob;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Define a reactive property on an Object.\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String} key\r\n\t * @param {*} val\r\n\t */\r\n\t\r\n\tfunction defineReactive(obj, key, val) {\r\n\t  var dep = new Dep();\r\n\t\r\n\t  var property = Object.getOwnPropertyDescriptor(obj, key);\r\n\t  if (property && property.configurable === false) {\r\n\t    return;\r\n\t  }\r\n\t\r\n\t  // cater for pre-defined getter/setters\r\n\t  var getter = property && property.get;\r\n\t  var setter = property && property.set;\r\n\t\r\n\t  var childOb = observe(val);\r\n\t  Object.defineProperty(obj, key, {\r\n\t    enumerable: true,\r\n\t    configurable: true,\r\n\t    get: function reactiveGetter() {\r\n\t      var value = getter ? getter.call(obj) : val;\r\n\t      if (Dep.target) {\r\n\t        dep.depend();\r\n\t        if (childOb) {\r\n\t          childOb.dep.depend();\r\n\t        }\r\n\t        if (isArray(value)) {\r\n\t          for (var e, i = 0, l = value.length; i < l; i++) {\r\n\t            e = value[i];\r\n\t            e && e.__ob__ && e.__ob__.dep.depend();\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t      return value;\r\n\t    },\r\n\t    set: function reactiveSetter(newVal) {\r\n\t      var value = getter ? getter.call(obj) : val;\r\n\t      if (newVal === value) {\r\n\t        return;\r\n\t      }\r\n\t      if (setter) {\r\n\t        setter.call(obj, newVal);\r\n\t      } else {\r\n\t        val = newVal;\r\n\t      }\r\n\t      childOb = observe(newVal);\r\n\t      dep.notify();\r\n\t    }\r\n\t  });\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tvar util = Object.freeze({\r\n\t\tdefineReactive: defineReactive,\r\n\t\tset: set,\r\n\t\tdel: del,\r\n\t\thasOwn: hasOwn,\r\n\t\tisLiteral: isLiteral,\r\n\t\tisReserved: isReserved,\r\n\t\t_toString: _toString,\r\n\t\ttoNumber: toNumber,\r\n\t\ttoBoolean: toBoolean,\r\n\t\tstripQuotes: stripQuotes,\r\n\t\tcamelize: camelize,\r\n\t\thyphenate: hyphenate,\r\n\t\tclassify: classify,\r\n\t\tbind: bind,\r\n\t\ttoArray: toArray,\r\n\t\textend: extend,\r\n\t\tisObject: isObject,\r\n\t\tisPlainObject: isPlainObject,\r\n\t\tdef: def,\r\n\t\tdebounce: _debounce,\r\n\t\tindexOf: indexOf,\r\n\t\tcancellable: cancellable,\r\n\t\tlooseEqual: looseEqual,\r\n\t\tisArray: isArray,\r\n\t\thasProto: hasProto,\r\n\t\tinBrowser: inBrowser,\r\n\t\tdevtools: devtools,\r\n\t\tisIE: isIE,\r\n\t\tisIE9: isIE9,\r\n\t\tisAndroid: isAndroid,\r\n\t\tisIOS: isIOS,\r\n\t\tget transitionProp () { return transitionProp; },\r\n\t\tget transitionEndEvent () { return transitionEndEvent; },\r\n\t\tget animationProp () { return animationProp; },\r\n\t\tget animationEndEvent () { return animationEndEvent; },\r\n\t\tnextTick: nextTick,\r\n\t\tget _Set () { return _Set; },\r\n\t\tquery: query,\r\n\t\tinDoc: inDoc,\r\n\t\tgetAttr: getAttr,\r\n\t\tgetBindAttr: getBindAttr,\r\n\t\thasBindAttr: hasBindAttr,\r\n\t\tbefore: before,\r\n\t\tafter: after,\r\n\t\tremove: remove,\r\n\t\tprepend: prepend,\r\n\t\treplace: replace,\r\n\t\ton: on,\r\n\t\toff: off,\r\n\t\tsetClass: setClass,\r\n\t\taddClass: addClass,\r\n\t\tremoveClass: removeClass,\r\n\t\textractContent: extractContent,\r\n\t\ttrimNode: trimNode,\r\n\t\tisTemplate: isTemplate,\r\n\t\tcreateAnchor: createAnchor,\r\n\t\tfindRef: findRef,\r\n\t\tmapNodeRange: mapNodeRange,\r\n\t\tremoveNodeRange: removeNodeRange,\r\n\t\tisFragment: isFragment,\r\n\t\tgetOuterHTML: getOuterHTML,\r\n\t\tmergeOptions: mergeOptions,\r\n\t\tresolveAsset: resolveAsset,\r\n\t\tcheckComponentAttr: checkComponentAttr,\r\n\t\tcommonTagRE: commonTagRE,\r\n\t\treservedTagRE: reservedTagRE,\r\n\t\tget warn () { return warn; }\r\n\t});\r\n\t\r\n\tvar uid = 0;\r\n\t\r\n\tfunction initMixin (Vue) {\r\n\t  /**\r\n\t   * The main init sequence. This is called for every\r\n\t   * instance, including ones that are created from extended\r\n\t   * constructors.\r\n\t   *\r\n\t   * @param {Object} options - this options object should be\r\n\t   *                           the result of merging class\r\n\t   *                           options and the options passed\r\n\t   *                           in to the constructor.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._init = function (options) {\r\n\t    options = options || {};\r\n\t\r\n\t    this.$el = null;\r\n\t    this.$parent = options.parent;\r\n\t    this.$root = this.$parent ? this.$parent.$root : this;\r\n\t    this.$children = [];\r\n\t    this.$refs = {}; // child vm references\r\n\t    this.$els = {}; // element references\r\n\t    this._watchers = []; // all watchers as an array\r\n\t    this._directives = []; // all directives\r\n\t\r\n\t    // a uid\r\n\t    this._uid = uid++;\r\n\t\r\n\t    // a flag to avoid this being observed\r\n\t    this._isVue = true;\r\n\t\r\n\t    // events bookkeeping\r\n\t    this._events = {}; // registered callbacks\r\n\t    this._eventsCount = {}; // for $broadcast optimization\r\n\t\r\n\t    // fragment instance properties\r\n\t    this._isFragment = false;\r\n\t    this._fragment = // @type {DocumentFragment}\r\n\t    this._fragmentStart = // @type {Text|Comment}\r\n\t    this._fragmentEnd = null; // @type {Text|Comment}\r\n\t\r\n\t    // lifecycle state\r\n\t    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\r\n\t    this._unlinkFn = null;\r\n\t\r\n\t    // context:\r\n\t    // if this is a transcluded component, context\r\n\t    // will be the common parent vm of this instance\r\n\t    // and its host.\r\n\t    this._context = options._context || this.$parent;\r\n\t\r\n\t    // scope:\r\n\t    // if this is inside an inline v-for, the scope\r\n\t    // will be the intermediate scope created for this\r\n\t    // repeat fragment. this is used for linking props\r\n\t    // and container directives.\r\n\t    this._scope = options._scope;\r\n\t\r\n\t    // fragment:\r\n\t    // if this instance is compiled inside a Fragment, it\r\n\t    // needs to register itself as a child of that fragment\r\n\t    // for attach/detach to work properly.\r\n\t    this._frag = options._frag;\r\n\t    if (this._frag) {\r\n\t      this._frag.children.push(this);\r\n\t    }\r\n\t\r\n\t    // push self into parent / transclusion host\r\n\t    if (this.$parent) {\r\n\t      this.$parent.$children.push(this);\r\n\t    }\r\n\t\r\n\t    // merge options.\r\n\t    options = this.$options = mergeOptions(this.constructor.options, options, this);\r\n\t\r\n\t    // set ref\r\n\t    this._updateRef();\r\n\t\r\n\t    // initialize data as empty object.\r\n\t    // it will be filled up in _initData().\r\n\t    this._data = {};\r\n\t\r\n\t    // call init hook\r\n\t    this._callHook('init');\r\n\t\r\n\t    // initialize data observation and scope inheritance.\r\n\t    this._initState();\r\n\t\r\n\t    // setup event system and option events.\r\n\t    this._initEvents();\r\n\t\r\n\t    // call created hook\r\n\t    this._callHook('created');\r\n\t\r\n\t    // if `el` option is passed, start compilation.\r\n\t    if (options.el) {\r\n\t      this.$mount(options.el);\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\tvar pathCache = new Cache(1000);\r\n\t\r\n\t// actions\r\n\tvar APPEND = 0;\r\n\tvar PUSH = 1;\r\n\tvar INC_SUB_PATH_DEPTH = 2;\r\n\tvar PUSH_SUB_PATH = 3;\r\n\t\r\n\t// states\r\n\tvar BEFORE_PATH = 0;\r\n\tvar IN_PATH = 1;\r\n\tvar BEFORE_IDENT = 2;\r\n\tvar IN_IDENT = 3;\r\n\tvar IN_SUB_PATH = 4;\r\n\tvar IN_SINGLE_QUOTE = 5;\r\n\tvar IN_DOUBLE_QUOTE = 6;\r\n\tvar AFTER_PATH = 7;\r\n\tvar ERROR = 8;\r\n\t\r\n\tvar pathStateMachine = [];\r\n\t\r\n\tpathStateMachine[BEFORE_PATH] = {\r\n\t  'ws': [BEFORE_PATH],\r\n\t  'ident': [IN_IDENT, APPEND],\r\n\t  '[': [IN_SUB_PATH],\r\n\t  'eof': [AFTER_PATH]\r\n\t};\r\n\t\r\n\tpathStateMachine[IN_PATH] = {\r\n\t  'ws': [IN_PATH],\r\n\t  '.': [BEFORE_IDENT],\r\n\t  '[': [IN_SUB_PATH],\r\n\t  'eof': [AFTER_PATH]\r\n\t};\r\n\t\r\n\tpathStateMachine[BEFORE_IDENT] = {\r\n\t  'ws': [BEFORE_IDENT],\r\n\t  'ident': [IN_IDENT, APPEND]\r\n\t};\r\n\t\r\n\tpathStateMachine[IN_IDENT] = {\r\n\t  'ident': [IN_IDENT, APPEND],\r\n\t  '0': [IN_IDENT, APPEND],\r\n\t  'number': [IN_IDENT, APPEND],\r\n\t  'ws': [IN_PATH, PUSH],\r\n\t  '.': [BEFORE_IDENT, PUSH],\r\n\t  '[': [IN_SUB_PATH, PUSH],\r\n\t  'eof': [AFTER_PATH, PUSH]\r\n\t};\r\n\t\r\n\tpathStateMachine[IN_SUB_PATH] = {\r\n\t  \"'\": [IN_SINGLE_QUOTE, APPEND],\r\n\t  '\"': [IN_DOUBLE_QUOTE, APPEND],\r\n\t  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\r\n\t  ']': [IN_PATH, PUSH_SUB_PATH],\r\n\t  'eof': ERROR,\r\n\t  'else': [IN_SUB_PATH, APPEND]\r\n\t};\r\n\t\r\n\tpathStateMachine[IN_SINGLE_QUOTE] = {\r\n\t  \"'\": [IN_SUB_PATH, APPEND],\r\n\t  'eof': ERROR,\r\n\t  'else': [IN_SINGLE_QUOTE, APPEND]\r\n\t};\r\n\t\r\n\tpathStateMachine[IN_DOUBLE_QUOTE] = {\r\n\t  '\"': [IN_SUB_PATH, APPEND],\r\n\t  'eof': ERROR,\r\n\t  'else': [IN_DOUBLE_QUOTE, APPEND]\r\n\t};\r\n\t\r\n\t/**\r\n\t * Determine the type of a character in a keypath.\r\n\t *\r\n\t * @param {Char} ch\r\n\t * @return {String} type\r\n\t */\r\n\t\r\n\tfunction getPathCharType(ch) {\r\n\t  if (ch === undefined) {\r\n\t    return 'eof';\r\n\t  }\r\n\t\r\n\t  var code = ch.charCodeAt(0);\r\n\t\r\n\t  switch (code) {\r\n\t    case 0x5B: // [\r\n\t    case 0x5D: // ]\r\n\t    case 0x2E: // .\r\n\t    case 0x22: // \"\r\n\t    case 0x27: // '\r\n\t    case 0x30:\r\n\t      // 0\r\n\t      return ch;\r\n\t\r\n\t    case 0x5F: // _\r\n\t    case 0x24:\r\n\t      // $\r\n\t      return 'ident';\r\n\t\r\n\t    case 0x20: // Space\r\n\t    case 0x09: // Tab\r\n\t    case 0x0A: // Newline\r\n\t    case 0x0D: // Return\r\n\t    case 0xA0: // No-break space\r\n\t    case 0xFEFF: // Byte Order Mark\r\n\t    case 0x2028: // Line Separator\r\n\t    case 0x2029:\r\n\t      // Paragraph Separator\r\n\t      return 'ws';\r\n\t  }\r\n\t\r\n\t  // a-z, A-Z\r\n\t  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\r\n\t    return 'ident';\r\n\t  }\r\n\t\r\n\t  // 1-9\r\n\t  if (code >= 0x31 && code <= 0x39) {\r\n\t    return 'number';\r\n\t  }\r\n\t\r\n\t  return 'else';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format a subPath, return its plain form if it is\r\n\t * a literal string or number. Otherwise prepend the\r\n\t * dynamic indicator (*).\r\n\t *\r\n\t * @param {String} path\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction formatSubPath(path) {\r\n\t  var trimmed = path.trim();\r\n\t  // invalid leading 0\r\n\t  if (path.charAt(0) === '0' && isNaN(path)) {\r\n\t    return false;\r\n\t  }\r\n\t  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parse a string path into an array of segments\r\n\t *\r\n\t * @param {String} path\r\n\t * @return {Array|undefined}\r\n\t */\r\n\t\r\n\tfunction parse(path) {\r\n\t  var keys = [];\r\n\t  var index = -1;\r\n\t  var mode = BEFORE_PATH;\r\n\t  var subPathDepth = 0;\r\n\t  var c, newChar, key, type, transition, action, typeMap;\r\n\t\r\n\t  var actions = [];\r\n\t\r\n\t  actions[PUSH] = function () {\r\n\t    if (key !== undefined) {\r\n\t      keys.push(key);\r\n\t      key = undefined;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  actions[APPEND] = function () {\r\n\t    if (key === undefined) {\r\n\t      key = newChar;\r\n\t    } else {\r\n\t      key += newChar;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  actions[INC_SUB_PATH_DEPTH] = function () {\r\n\t    actions[APPEND]();\r\n\t    subPathDepth++;\r\n\t  };\r\n\t\r\n\t  actions[PUSH_SUB_PATH] = function () {\r\n\t    if (subPathDepth > 0) {\r\n\t      subPathDepth--;\r\n\t      mode = IN_SUB_PATH;\r\n\t      actions[APPEND]();\r\n\t    } else {\r\n\t      subPathDepth = 0;\r\n\t      key = formatSubPath(key);\r\n\t      if (key === false) {\r\n\t        return false;\r\n\t      } else {\r\n\t        actions[PUSH]();\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function maybeUnescapeQuote() {\r\n\t    var nextChar = path[index + 1];\r\n\t    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\r\n\t      index++;\r\n\t      newChar = '\\\\' + nextChar;\r\n\t      actions[APPEND]();\r\n\t      return true;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  while (mode != null) {\r\n\t    index++;\r\n\t    c = path[index];\r\n\t\r\n\t    if (c === '\\\\' && maybeUnescapeQuote()) {\r\n\t      continue;\r\n\t    }\r\n\t\r\n\t    type = getPathCharType(c);\r\n\t    typeMap = pathStateMachine[mode];\r\n\t    transition = typeMap[type] || typeMap['else'] || ERROR;\r\n\t\r\n\t    if (transition === ERROR) {\r\n\t      return; // parse error\r\n\t    }\r\n\t\r\n\t    mode = transition[0];\r\n\t    action = actions[transition[1]];\r\n\t    if (action) {\r\n\t      newChar = transition[2];\r\n\t      newChar = newChar === undefined ? c : newChar;\r\n\t      if (action() === false) {\r\n\t        return;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    if (mode === AFTER_PATH) {\r\n\t      keys.raw = path;\r\n\t      return keys;\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * External parse that check for a cache hit first\r\n\t *\r\n\t * @param {String} path\r\n\t * @return {Array|undefined}\r\n\t */\r\n\t\r\n\tfunction parsePath(path) {\r\n\t  var hit = pathCache.get(path);\r\n\t  if (!hit) {\r\n\t    hit = parse(path);\r\n\t    if (hit) {\r\n\t      pathCache.put(path, hit);\r\n\t    }\r\n\t  }\r\n\t  return hit;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get from an object from a path string\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String} path\r\n\t */\r\n\t\r\n\tfunction getPath(obj, path) {\r\n\t  return parseExpression$1(path).get(obj);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Warn against setting non-existent root path on a vm.\r\n\t */\r\n\t\r\n\tvar warnNonExistent;\r\n\tif (false) {\r\n\t  warnNonExistent = function (path, vm) {\r\n\t    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set on an object from a path\r\n\t *\r\n\t * @param {Object} obj\r\n\t * @param {String | Array} path\r\n\t * @param {*} val\r\n\t */\r\n\t\r\n\tfunction setPath(obj, path, val) {\r\n\t  var original = obj;\r\n\t  if (typeof path === 'string') {\r\n\t    path = parse(path);\r\n\t  }\r\n\t  if (!path || !isObject(obj)) {\r\n\t    return false;\r\n\t  }\r\n\t  var last, key;\r\n\t  for (var i = 0, l = path.length; i < l; i++) {\r\n\t    last = obj;\r\n\t    key = path[i];\r\n\t    if (key.charAt(0) === '*') {\r\n\t      key = parseExpression$1(key.slice(1)).get.call(original, original);\r\n\t    }\r\n\t    if (i < l - 1) {\r\n\t      obj = obj[key];\r\n\t      if (!isObject(obj)) {\r\n\t        obj = {};\r\n\t        if (false) {\r\n\t          warnNonExistent(path, last);\r\n\t        }\r\n\t        set(last, key, obj);\r\n\t      }\r\n\t    } else {\r\n\t      if (isArray(obj)) {\r\n\t        obj.$set(key, val);\r\n\t      } else if (key in obj) {\r\n\t        obj[key] = val;\r\n\t      } else {\r\n\t        if (false) {\r\n\t          warnNonExistent(path, obj);\r\n\t        }\r\n\t        set(obj, key, val);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  return true;\r\n\t}\r\n\t\r\n\tvar path = Object.freeze({\r\n\t  parsePath: parsePath,\r\n\t  getPath: getPath,\r\n\t  setPath: setPath\r\n\t});\r\n\t\r\n\tvar expressionCache = new Cache(1000);\r\n\t\r\n\tvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\r\n\tvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\r\n\t\r\n\t// keywords that don't make sense inside expressions\r\n\tvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\r\n\tvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\r\n\t\r\n\tvar wsRE = /\\s/g;\r\n\tvar newlineRE = /\\n/g;\r\n\tvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\r\n\tvar restoreRE = /\"(\\d+)\"/g;\r\n\tvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\r\n\tvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\r\n\tvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\r\n\t\r\n\tfunction noop() {}\r\n\t\r\n\t/**\r\n\t * Save / Rewrite / Restore\r\n\t *\r\n\t * When rewriting paths found in an expression, it is\r\n\t * possible for the same letter sequences to be found in\r\n\t * strings and Object literal property keys. Therefore we\r\n\t * remove and store these parts in a temporary array, and\r\n\t * restore them after the path rewrite.\r\n\t */\r\n\t\r\n\tvar saved = [];\r\n\t\r\n\t/**\r\n\t * Save replacer\r\n\t *\r\n\t * The save regex can match two possible cases:\r\n\t * 1. An opening object literal\r\n\t * 2. A string\r\n\t * If matched as a plain string, we need to escape its\r\n\t * newlines, since the string needs to be preserved when\r\n\t * generating the function body.\r\n\t *\r\n\t * @param {String} str\r\n\t * @param {String} isString - str if matched as a string\r\n\t * @return {String} - placeholder with index\r\n\t */\r\n\t\r\n\tfunction save(str, isString) {\r\n\t  var i = saved.length;\r\n\t  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\r\n\t  return '\"' + i + '\"';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Path rewrite replacer\r\n\t *\r\n\t * @param {String} raw\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction rewrite(raw) {\r\n\t  var c = raw.charAt(0);\r\n\t  var path = raw.slice(1);\r\n\t  if (allowedKeywordsRE.test(path)) {\r\n\t    return raw;\r\n\t  } else {\r\n\t    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\r\n\t    return c + 'scope.' + path;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restore replacer\r\n\t *\r\n\t * @param {String} str\r\n\t * @param {String} i - matched save index\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction restore(str, i) {\r\n\t  return saved[i];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Rewrite an expression, prefixing all path accessors with\r\n\t * `scope.` and generate getter/setter functions.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction compileGetter(exp) {\r\n\t  if (improperKeywordsRE.test(exp)) {\r\n\t    (\"production\") !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\r\n\t  }\r\n\t  // reset state\r\n\t  saved.length = 0;\r\n\t  // save strings and object literal keys\r\n\t  var body = exp.replace(saveRE, save).replace(wsRE, '');\r\n\t  // rewrite all paths\r\n\t  // pad 1 space here because the regex matches 1 extra char\r\n\t  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\r\n\t  return makeGetterFn(body);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Build a getter function. Requires eval.\r\n\t *\r\n\t * We isolate the try/catch so it doesn't affect the\r\n\t * optimization of the parse function when it is not called.\r\n\t *\r\n\t * @param {String} body\r\n\t * @return {Function|undefined}\r\n\t */\r\n\t\r\n\tfunction makeGetterFn(body) {\r\n\t  try {\r\n\t    /* eslint-disable no-new-func */\r\n\t    return new Function('scope', 'return ' + body + ';');\r\n\t    /* eslint-enable no-new-func */\r\n\t  } catch (e) {\r\n\t    if (false) {\r\n\t      /* istanbul ignore if */\r\n\t      if (e.toString().match(/unsafe-eval|CSP/)) {\r\n\t        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\r\n\t      } else {\r\n\t        warn('Invalid expression. ' + 'Generated function body: ' + body);\r\n\t      }\r\n\t    }\r\n\t    return noop;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile a setter function for the expression.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @return {Function|undefined}\r\n\t */\r\n\t\r\n\tfunction compileSetter(exp) {\r\n\t  var path = parsePath(exp);\r\n\t  if (path) {\r\n\t    return function (scope, val) {\r\n\t      setPath(scope, path, val);\r\n\t    };\r\n\t  } else {\r\n\t    (\"production\") !== 'production' && warn('Invalid setter expression: ' + exp);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parse an expression into re-written getter/setters.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @param {Boolean} needSet\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction parseExpression$1(exp, needSet) {\r\n\t  exp = exp.trim();\r\n\t  // try cache\r\n\t  var hit = expressionCache.get(exp);\r\n\t  if (hit) {\r\n\t    if (needSet && !hit.set) {\r\n\t      hit.set = compileSetter(hit.exp);\r\n\t    }\r\n\t    return hit;\r\n\t  }\r\n\t  var res = { exp: exp };\r\n\t  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\r\n\t  // optimized super simple getter\r\n\t  ? makeGetterFn('scope.' + exp)\r\n\t  // dynamic getter\r\n\t  : compileGetter(exp);\r\n\t  if (needSet) {\r\n\t    res.set = compileSetter(exp);\r\n\t  }\r\n\t  expressionCache.put(exp, res);\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an expression is a simple path.\r\n\t *\r\n\t * @param {String} exp\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isSimplePath(exp) {\r\n\t  return pathTestRE.test(exp) &&\r\n\t  // don't treat literal values as paths\r\n\t  !literalValueRE$1.test(exp) &&\r\n\t  // Math constants e.g. Math.PI, Math.E etc.\r\n\t  exp.slice(0, 5) !== 'Math.';\r\n\t}\r\n\t\r\n\tvar expression = Object.freeze({\r\n\t  parseExpression: parseExpression$1,\r\n\t  isSimplePath: isSimplePath\r\n\t});\r\n\t\r\n\t// we have two separate queues: one for directive updates\r\n\t// and one for user watcher registered via $watch().\r\n\t// we want to guarantee directive updates to be called\r\n\t// before user watchers so that when user watchers are\r\n\t// triggered, the DOM would have already been in updated\r\n\t// state.\r\n\t\r\n\tvar queue = [];\r\n\tvar userQueue = [];\r\n\tvar has = {};\r\n\tvar circular = {};\r\n\tvar waiting = false;\r\n\t\r\n\t/**\r\n\t * Reset the batcher's state.\r\n\t */\r\n\t\r\n\tfunction resetBatcherState() {\r\n\t  queue.length = 0;\r\n\t  userQueue.length = 0;\r\n\t  has = {};\r\n\t  circular = {};\r\n\t  waiting = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Flush both queues and run the watchers.\r\n\t */\r\n\t\r\n\tfunction flushBatcherQueue() {\r\n\t  var _again = true;\r\n\t\r\n\t  _function: while (_again) {\r\n\t    _again = false;\r\n\t\r\n\t    runBatcherQueue(queue);\r\n\t    runBatcherQueue(userQueue);\r\n\t    // user watchers triggered more watchers,\r\n\t    // keep flushing until it depletes\r\n\t    if (queue.length) {\r\n\t      _again = true;\r\n\t      continue _function;\r\n\t    }\r\n\t    // dev tool hook\r\n\t    /* istanbul ignore if */\r\n\t    if (devtools && config.devtools) {\r\n\t      devtools.emit('flush');\r\n\t    }\r\n\t    resetBatcherState();\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Run the watchers in a single queue.\r\n\t *\r\n\t * @param {Array} queue\r\n\t */\r\n\t\r\n\tfunction runBatcherQueue(queue) {\r\n\t  // do not cache length because more watchers might be pushed\r\n\t  // as we run existing watchers\r\n\t  for (var i = 0; i < queue.length; i++) {\r\n\t    var watcher = queue[i];\r\n\t    var id = watcher.id;\r\n\t    has[id] = null;\r\n\t    watcher.run();\r\n\t    // in dev build, check and stop circular updates.\r\n\t    if (false) {\r\n\t      circular[id] = (circular[id] || 0) + 1;\r\n\t      if (circular[id] > config._maxUpdateCount) {\r\n\t        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  queue.length = 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Push a watcher into the watcher queue.\r\n\t * Jobs with duplicate IDs will be skipped unless it's\r\n\t * pushed when the queue is being flushed.\r\n\t *\r\n\t * @param {Watcher} watcher\r\n\t *   properties:\r\n\t *   - {Number} id\r\n\t *   - {Function} run\r\n\t */\r\n\t\r\n\tfunction pushWatcher(watcher) {\r\n\t  var id = watcher.id;\r\n\t  if (has[id] == null) {\r\n\t    // push watcher into appropriate queue\r\n\t    var q = watcher.user ? userQueue : queue;\r\n\t    has[id] = q.length;\r\n\t    q.push(watcher);\r\n\t    // queue the flush\r\n\t    if (!waiting) {\r\n\t      waiting = true;\r\n\t      nextTick(flushBatcherQueue);\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tvar uid$2 = 0;\r\n\t\r\n\t/**\r\n\t * A watcher parses an expression, collects dependencies,\r\n\t * and fires callback when the expression value changes.\r\n\t * This is used for both the $watch() api and directives.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {String|Function} expOrFn\r\n\t * @param {Function} cb\r\n\t * @param {Object} options\r\n\t *                 - {Array} filters\r\n\t *                 - {Boolean} twoWay\r\n\t *                 - {Boolean} deep\r\n\t *                 - {Boolean} user\r\n\t *                 - {Boolean} sync\r\n\t *                 - {Boolean} lazy\r\n\t *                 - {Function} [preProcess]\r\n\t *                 - {Function} [postProcess]\r\n\t * @constructor\r\n\t */\r\n\tfunction Watcher(vm, expOrFn, cb, options) {\r\n\t  // mix in options\r\n\t  if (options) {\r\n\t    extend(this, options);\r\n\t  }\r\n\t  var isFn = typeof expOrFn === 'function';\r\n\t  this.vm = vm;\r\n\t  vm._watchers.push(this);\r\n\t  this.expression = expOrFn;\r\n\t  this.cb = cb;\r\n\t  this.id = ++uid$2; // uid for batching\r\n\t  this.active = true;\r\n\t  this.dirty = this.lazy; // for lazy watchers\r\n\t  this.deps = [];\r\n\t  this.newDeps = [];\r\n\t  this.depIds = new _Set();\r\n\t  this.newDepIds = new _Set();\r\n\t  this.prevError = null; // for async error stacks\r\n\t  // parse expression for getter/setter\r\n\t  if (isFn) {\r\n\t    this.getter = expOrFn;\r\n\t    this.setter = undefined;\r\n\t  } else {\r\n\t    var res = parseExpression$1(expOrFn, this.twoWay);\r\n\t    this.getter = res.get;\r\n\t    this.setter = res.set;\r\n\t  }\r\n\t  this.value = this.lazy ? undefined : this.get();\r\n\t  // state for avoiding false triggers for deep and Array\r\n\t  // watchers during vm._digest()\r\n\t  this.queued = this.shallow = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Evaluate the getter, and re-collect dependencies.\r\n\t */\r\n\t\r\n\tWatcher.prototype.get = function () {\r\n\t  this.beforeGet();\r\n\t  var scope = this.scope || this.vm;\r\n\t  var value;\r\n\t  try {\r\n\t    value = this.getter.call(scope, scope);\r\n\t  } catch (e) {\r\n\t    if (false) {\r\n\t      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\r\n\t    }\r\n\t  }\r\n\t  // \"touch\" every property so they are all tracked as\r\n\t  // dependencies for deep watching\r\n\t  if (this.deep) {\r\n\t    traverse(value);\r\n\t  }\r\n\t  if (this.preProcess) {\r\n\t    value = this.preProcess(value);\r\n\t  }\r\n\t  if (this.filters) {\r\n\t    value = scope._applyFilters(value, null, this.filters, false);\r\n\t  }\r\n\t  if (this.postProcess) {\r\n\t    value = this.postProcess(value);\r\n\t  }\r\n\t  this.afterGet();\r\n\t  return value;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Set the corresponding value with the setter.\r\n\t *\r\n\t * @param {*} value\r\n\t */\r\n\t\r\n\tWatcher.prototype.set = function (value) {\r\n\t  var scope = this.scope || this.vm;\r\n\t  if (this.filters) {\r\n\t    value = scope._applyFilters(value, this.value, this.filters, true);\r\n\t  }\r\n\t  try {\r\n\t    this.setter.call(scope, scope, value);\r\n\t  } catch (e) {\r\n\t    if (false) {\r\n\t      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\r\n\t    }\r\n\t  }\r\n\t  // two-way sync for v-for alias\r\n\t  var forContext = scope.$forContext;\r\n\t  if (forContext && forContext.alias === this.expression) {\r\n\t    if (forContext.filters) {\r\n\t      (\"production\") !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\r\n\t      return;\r\n\t    }\r\n\t    forContext._withLock(function () {\r\n\t      if (scope.$key) {\r\n\t        // original is an object\r\n\t        forContext.rawValue[scope.$key] = value;\r\n\t      } else {\r\n\t        forContext.rawValue.$set(scope.$index, value);\r\n\t      }\r\n\t    });\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Prepare for dependency collection.\r\n\t */\r\n\t\r\n\tWatcher.prototype.beforeGet = function () {\r\n\t  Dep.target = this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Add a dependency to this directive.\r\n\t *\r\n\t * @param {Dep} dep\r\n\t */\r\n\t\r\n\tWatcher.prototype.addDep = function (dep) {\r\n\t  var id = dep.id;\r\n\t  if (!this.newDepIds.has(id)) {\r\n\t    this.newDepIds.add(id);\r\n\t    this.newDeps.push(dep);\r\n\t    if (!this.depIds.has(id)) {\r\n\t      dep.addSub(this);\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Clean up for dependency collection.\r\n\t */\r\n\t\r\n\tWatcher.prototype.afterGet = function () {\r\n\t  Dep.target = null;\r\n\t  var i = this.deps.length;\r\n\t  while (i--) {\r\n\t    var dep = this.deps[i];\r\n\t    if (!this.newDepIds.has(dep.id)) {\r\n\t      dep.removeSub(this);\r\n\t    }\r\n\t  }\r\n\t  var tmp = this.depIds;\r\n\t  this.depIds = this.newDepIds;\r\n\t  this.newDepIds = tmp;\r\n\t  this.newDepIds.clear();\r\n\t  tmp = this.deps;\r\n\t  this.deps = this.newDeps;\r\n\t  this.newDeps = tmp;\r\n\t  this.newDeps.length = 0;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Subscriber interface.\r\n\t * Will be called when a dependency changes.\r\n\t *\r\n\t * @param {Boolean} shallow\r\n\t */\r\n\t\r\n\tWatcher.prototype.update = function (shallow) {\r\n\t  if (this.lazy) {\r\n\t    this.dirty = true;\r\n\t  } else if (this.sync || !config.async) {\r\n\t    this.run();\r\n\t  } else {\r\n\t    // if queued, only overwrite shallow with non-shallow,\r\n\t    // but not the other way around.\r\n\t    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\r\n\t    this.queued = true;\r\n\t    // record before-push error stack in debug mode\r\n\t    /* istanbul ignore if */\r\n\t    if (false) {\r\n\t      this.prevError = new Error('[vue] async stack trace');\r\n\t    }\r\n\t    pushWatcher(this);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Batcher job interface.\r\n\t * Will be called by the batcher.\r\n\t */\r\n\t\r\n\tWatcher.prototype.run = function () {\r\n\t  if (this.active) {\r\n\t    var value = this.get();\r\n\t    if (value !== this.value ||\r\n\t    // Deep watchers and watchers on Object/Arrays should fire even\r\n\t    // when the value is the same, because the value may\r\n\t    // have mutated; but only do so if this is a\r\n\t    // non-shallow update (caused by a vm digest).\r\n\t    (isObject(value) || this.deep) && !this.shallow) {\r\n\t      // set new value\r\n\t      var oldValue = this.value;\r\n\t      this.value = value;\r\n\t      // in debug + async mode, when a watcher callbacks\r\n\t      // throws, we also throw the saved before-push error\r\n\t      // so the full cross-tick stack trace is available.\r\n\t      var prevError = this.prevError;\r\n\t      /* istanbul ignore if */\r\n\t      if (false) {\r\n\t        this.prevError = null;\r\n\t        try {\r\n\t          this.cb.call(this.vm, value, oldValue);\r\n\t        } catch (e) {\r\n\t          nextTick(function () {\r\n\t            throw prevError;\r\n\t          }, 0);\r\n\t          throw e;\r\n\t        }\r\n\t      } else {\r\n\t        this.cb.call(this.vm, value, oldValue);\r\n\t      }\r\n\t    }\r\n\t    this.queued = this.shallow = false;\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Evaluate the value of the watcher.\r\n\t * This only gets called for lazy watchers.\r\n\t */\r\n\t\r\n\tWatcher.prototype.evaluate = function () {\r\n\t  // avoid overwriting another watcher that is being\r\n\t  // collected.\r\n\t  var current = Dep.target;\r\n\t  this.value = this.get();\r\n\t  this.dirty = false;\r\n\t  Dep.target = current;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Depend on all deps collected by this watcher.\r\n\t */\r\n\t\r\n\tWatcher.prototype.depend = function () {\r\n\t  var i = this.deps.length;\r\n\t  while (i--) {\r\n\t    this.deps[i].depend();\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Remove self from all dependencies' subcriber list.\r\n\t */\r\n\t\r\n\tWatcher.prototype.teardown = function () {\r\n\t  if (this.active) {\r\n\t    // remove self from vm's watcher list\r\n\t    // this is a somewhat expensive operation so we skip it\r\n\t    // if the vm is being destroyed or is performing a v-for\r\n\t    // re-render (the watcher list is then filtered by v-for).\r\n\t    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\r\n\t      this.vm._watchers.$remove(this);\r\n\t    }\r\n\t    var i = this.deps.length;\r\n\t    while (i--) {\r\n\t      this.deps[i].removeSub(this);\r\n\t    }\r\n\t    this.active = false;\r\n\t    this.vm = this.cb = this.value = null;\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Recrusively traverse an object to evoke all converted\r\n\t * getters, so that every nested property inside the object\r\n\t * is collected as a \"deep\" dependency.\r\n\t *\r\n\t * @param {*} val\r\n\t */\r\n\t\r\n\tvar seenObjects = new _Set();\r\n\tfunction traverse(val, seen) {\r\n\t  var i = undefined,\r\n\t      keys = undefined;\r\n\t  if (!seen) {\r\n\t    seen = seenObjects;\r\n\t    seen.clear();\r\n\t  }\r\n\t  var isA = isArray(val);\r\n\t  var isO = isObject(val);\r\n\t  if ((isA || isO) && Object.isExtensible(val)) {\r\n\t    if (val.__ob__) {\r\n\t      var depId = val.__ob__.dep.id;\r\n\t      if (seen.has(depId)) {\r\n\t        return;\r\n\t      } else {\r\n\t        seen.add(depId);\r\n\t      }\r\n\t    }\r\n\t    if (isA) {\r\n\t      i = val.length;\r\n\t      while (i--) traverse(val[i], seen);\r\n\t    } else if (isO) {\r\n\t      keys = Object.keys(val);\r\n\t      i = keys.length;\r\n\t      while (i--) traverse(val[keys[i]], seen);\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tvar text$1 = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    this.el[this.attr] = _toString(value);\r\n\t  }\r\n\t};\r\n\t\r\n\tvar templateCache = new Cache(1000);\r\n\tvar idSelectorCache = new Cache(1000);\r\n\t\r\n\tvar map = {\r\n\t  efault: [0, '', ''],\r\n\t  legend: [1, '<fieldset>', '</fieldset>'],\r\n\t  tr: [2, '<table><tbody>', '</tbody></table>'],\r\n\t  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\r\n\t};\r\n\t\r\n\tmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\r\n\t\r\n\tmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\r\n\t\r\n\tmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\r\n\t\r\n\tmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\r\n\t\r\n\t/**\r\n\t * Check if a node is a supported template node with a\r\n\t * DocumentFragment content.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isRealTemplate(node) {\r\n\t  return isTemplate(node) && isFragment(node.content);\r\n\t}\r\n\t\r\n\tvar tagRE$1 = /<([\\w:-]+)/;\r\n\tvar entityRE = /&#?\\w+?;/;\r\n\tvar commentRE = /<!--/;\r\n\t\r\n\t/**\r\n\t * Convert a string template to a DocumentFragment.\r\n\t * Determines correct wrapping by tag types. Wrapping\r\n\t * strategy found in jQuery & component/domify.\r\n\t *\r\n\t * @param {String} templateString\r\n\t * @param {Boolean} raw\r\n\t * @return {DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction stringToFragment(templateString, raw) {\r\n\t  // try a cache hit first\r\n\t  var cacheKey = raw ? templateString : templateString.trim();\r\n\t  var hit = templateCache.get(cacheKey);\r\n\t  if (hit) {\r\n\t    return hit;\r\n\t  }\r\n\t\r\n\t  var frag = document.createDocumentFragment();\r\n\t  var tagMatch = templateString.match(tagRE$1);\r\n\t  var entityMatch = entityRE.test(templateString);\r\n\t  var commentMatch = commentRE.test(templateString);\r\n\t\r\n\t  if (!tagMatch && !entityMatch && !commentMatch) {\r\n\t    // text only, return a single text node.\r\n\t    frag.appendChild(document.createTextNode(templateString));\r\n\t  } else {\r\n\t    var tag = tagMatch && tagMatch[1];\r\n\t    var wrap = map[tag] || map.efault;\r\n\t    var depth = wrap[0];\r\n\t    var prefix = wrap[1];\r\n\t    var suffix = wrap[2];\r\n\t    var node = document.createElement('div');\r\n\t\r\n\t    node.innerHTML = prefix + templateString + suffix;\r\n\t    while (depth--) {\r\n\t      node = node.lastChild;\r\n\t    }\r\n\t\r\n\t    var child;\r\n\t    /* eslint-disable no-cond-assign */\r\n\t    while (child = node.firstChild) {\r\n\t      /* eslint-enable no-cond-assign */\r\n\t      frag.appendChild(child);\r\n\t    }\r\n\t  }\r\n\t  if (!raw) {\r\n\t    trimNode(frag);\r\n\t  }\r\n\t  templateCache.put(cacheKey, frag);\r\n\t  return frag;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Convert a template node to a DocumentFragment.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @return {DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction nodeToFragment(node) {\r\n\t  // if its a template tag and the browser supports it,\r\n\t  // its content is already a document fragment. However, iOS Safari has\r\n\t  // bug when using directly cloned template content with touch\r\n\t  // events and can cause crashes when the nodes are removed from DOM, so we\r\n\t  // have to treat template elements as string templates. (#2805)\r\n\t  /* istanbul ignore if */\r\n\t  if (isRealTemplate(node)) {\r\n\t    return stringToFragment(node.innerHTML);\r\n\t  }\r\n\t  // script template\r\n\t  if (node.tagName === 'SCRIPT') {\r\n\t    return stringToFragment(node.textContent);\r\n\t  }\r\n\t  // normal node, clone it to avoid mutating the original\r\n\t  var clonedNode = cloneNode(node);\r\n\t  var frag = document.createDocumentFragment();\r\n\t  var child;\r\n\t  /* eslint-disable no-cond-assign */\r\n\t  while (child = clonedNode.firstChild) {\r\n\t    /* eslint-enable no-cond-assign */\r\n\t    frag.appendChild(child);\r\n\t  }\r\n\t  trimNode(frag);\r\n\t  return frag;\r\n\t}\r\n\t\r\n\t// Test for the presence of the Safari template cloning bug\r\n\t// https://bugs.webkit.org/showug.cgi?id=137755\r\n\tvar hasBrokenTemplate = (function () {\r\n\t  /* istanbul ignore else */\r\n\t  if (inBrowser) {\r\n\t    var a = document.createElement('div');\r\n\t    a.innerHTML = '<template>1</template>';\r\n\t    return !a.cloneNode(true).firstChild.innerHTML;\r\n\t  } else {\r\n\t    return false;\r\n\t  }\r\n\t})();\r\n\t\r\n\t// Test for IE10/11 textarea placeholder clone bug\r\n\tvar hasTextareaCloneBug = (function () {\r\n\t  /* istanbul ignore else */\r\n\t  if (inBrowser) {\r\n\t    var t = document.createElement('textarea');\r\n\t    t.placeholder = 't';\r\n\t    return t.cloneNode(true).value === 't';\r\n\t  } else {\r\n\t    return false;\r\n\t  }\r\n\t})();\r\n\t\r\n\t/**\r\n\t * 1. Deal with Safari cloning nested <template> bug by\r\n\t *    manually cloning all template instances.\r\n\t * 2. Deal with IE10/11 textarea placeholder bug by setting\r\n\t *    the correct value after cloning.\r\n\t *\r\n\t * @param {Element|DocumentFragment} node\r\n\t * @return {Element|DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction cloneNode(node) {\r\n\t  /* istanbul ignore if */\r\n\t  if (!node.querySelectorAll) {\r\n\t    return node.cloneNode();\r\n\t  }\r\n\t  var res = node.cloneNode(true);\r\n\t  var i, original, cloned;\r\n\t  /* istanbul ignore if */\r\n\t  if (hasBrokenTemplate) {\r\n\t    var tempClone = res;\r\n\t    if (isRealTemplate(node)) {\r\n\t      node = node.content;\r\n\t      tempClone = res.content;\r\n\t    }\r\n\t    original = node.querySelectorAll('template');\r\n\t    if (original.length) {\r\n\t      cloned = tempClone.querySelectorAll('template');\r\n\t      i = cloned.length;\r\n\t      while (i--) {\r\n\t        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  /* istanbul ignore if */\r\n\t  if (hasTextareaCloneBug) {\r\n\t    if (node.tagName === 'TEXTAREA') {\r\n\t      res.value = node.value;\r\n\t    } else {\r\n\t      original = node.querySelectorAll('textarea');\r\n\t      if (original.length) {\r\n\t        cloned = res.querySelectorAll('textarea');\r\n\t        i = cloned.length;\r\n\t        while (i--) {\r\n\t          cloned[i].value = original[i].value;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Process the template option and normalizes it into a\r\n\t * a DocumentFragment that can be used as a partial or a\r\n\t * instance template.\r\n\t *\r\n\t * @param {*} template\r\n\t *        Possible values include:\r\n\t *        - DocumentFragment object\r\n\t *        - Node object of type Template\r\n\t *        - id selector: '#some-template-id'\r\n\t *        - template string: '<div><span>{{msg}}</span></div>'\r\n\t * @param {Boolean} shouldClone\r\n\t * @param {Boolean} raw\r\n\t *        inline HTML interpolation. Do not check for id\r\n\t *        selector and keep whitespace in the string.\r\n\t * @return {DocumentFragment|undefined}\r\n\t */\r\n\t\r\n\tfunction parseTemplate(template, shouldClone, raw) {\r\n\t  var node, frag;\r\n\t\r\n\t  // if the template is already a document fragment,\r\n\t  // do nothing\r\n\t  if (isFragment(template)) {\r\n\t    trimNode(template);\r\n\t    return shouldClone ? cloneNode(template) : template;\r\n\t  }\r\n\t\r\n\t  if (typeof template === 'string') {\r\n\t    // id selector\r\n\t    if (!raw && template.charAt(0) === '#') {\r\n\t      // id selector can be cached too\r\n\t      frag = idSelectorCache.get(template);\r\n\t      if (!frag) {\r\n\t        node = document.getElementById(template.slice(1));\r\n\t        if (node) {\r\n\t          frag = nodeToFragment(node);\r\n\t          // save selector to cache\r\n\t          idSelectorCache.put(template, frag);\r\n\t        }\r\n\t      }\r\n\t    } else {\r\n\t      // normal string template\r\n\t      frag = stringToFragment(template, raw);\r\n\t    }\r\n\t  } else if (template.nodeType) {\r\n\t    // a direct node\r\n\t    frag = nodeToFragment(template);\r\n\t  }\r\n\t\r\n\t  return frag && shouldClone ? cloneNode(frag) : frag;\r\n\t}\r\n\t\r\n\tvar template = Object.freeze({\r\n\t  cloneNode: cloneNode,\r\n\t  parseTemplate: parseTemplate\r\n\t});\r\n\t\r\n\tvar html = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    // a comment node means this is a binding for\r\n\t    // {{{ inline unescaped html }}}\r\n\t    if (this.el.nodeType === 8) {\r\n\t      // hold nodes\r\n\t      this.nodes = [];\r\n\t      // replace the placeholder with proper anchor\r\n\t      this.anchor = createAnchor('v-html');\r\n\t      replace(this.el, this.anchor);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    value = _toString(value);\r\n\t    if (this.nodes) {\r\n\t      this.swap(value);\r\n\t    } else {\r\n\t      this.el.innerHTML = value;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  swap: function swap(value) {\r\n\t    // remove old nodes\r\n\t    var i = this.nodes.length;\r\n\t    while (i--) {\r\n\t      remove(this.nodes[i]);\r\n\t    }\r\n\t    // convert new value to a fragment\r\n\t    // do not attempt to retrieve from id selector\r\n\t    var frag = parseTemplate(value, true, true);\r\n\t    // save a reference to these nodes so we can remove later\r\n\t    this.nodes = toArray(frag.childNodes);\r\n\t    before(frag, this.anchor);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Abstraction for a partially-compiled fragment.\r\n\t * Can optionally compile content with a child scope.\r\n\t *\r\n\t * @param {Function} linker\r\n\t * @param {Vue} vm\r\n\t * @param {DocumentFragment} frag\r\n\t * @param {Vue} [host]\r\n\t * @param {Object} [scope]\r\n\t * @param {Fragment} [parentFrag]\r\n\t */\r\n\tfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\r\n\t  this.children = [];\r\n\t  this.childFrags = [];\r\n\t  this.vm = vm;\r\n\t  this.scope = scope;\r\n\t  this.inserted = false;\r\n\t  this.parentFrag = parentFrag;\r\n\t  if (parentFrag) {\r\n\t    parentFrag.childFrags.push(this);\r\n\t  }\r\n\t  this.unlink = linker(vm, frag, host, scope, this);\r\n\t  var single = this.single = frag.childNodes.length === 1 &&\r\n\t  // do not go single mode if the only node is an anchor\r\n\t  !frag.childNodes[0].__v_anchor;\r\n\t  if (single) {\r\n\t    this.node = frag.childNodes[0];\r\n\t    this.before = singleBefore;\r\n\t    this.remove = singleRemove;\r\n\t  } else {\r\n\t    this.node = createAnchor('fragment-start');\r\n\t    this.end = createAnchor('fragment-end');\r\n\t    this.frag = frag;\r\n\t    prepend(this.node, frag);\r\n\t    frag.appendChild(this.end);\r\n\t    this.before = multiBefore;\r\n\t    this.remove = multiRemove;\r\n\t  }\r\n\t  this.node.__v_frag = this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Call attach/detach for all components contained within\r\n\t * this fragment. Also do so recursively for all child\r\n\t * fragments.\r\n\t *\r\n\t * @param {Function} hook\r\n\t */\r\n\t\r\n\tFragment.prototype.callHook = function (hook) {\r\n\t  var i, l;\r\n\t  for (i = 0, l = this.childFrags.length; i < l; i++) {\r\n\t    this.childFrags[i].callHook(hook);\r\n\t  }\r\n\t  for (i = 0, l = this.children.length; i < l; i++) {\r\n\t    hook(this.children[i]);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Insert fragment before target, single node version\r\n\t *\r\n\t * @param {Node} target\r\n\t * @param {Boolean} withTransition\r\n\t */\r\n\t\r\n\tfunction singleBefore(target, withTransition) {\r\n\t  this.inserted = true;\r\n\t  var method = withTransition !== false ? beforeWithTransition : before;\r\n\t  method(this.node, target, this.vm);\r\n\t  if (inDoc(this.node)) {\r\n\t    this.callHook(attach);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove fragment, single node version\r\n\t */\r\n\t\r\n\tfunction singleRemove() {\r\n\t  this.inserted = false;\r\n\t  var shouldCallRemove = inDoc(this.node);\r\n\t  var self = this;\r\n\t  this.beforeRemove();\r\n\t  removeWithTransition(this.node, this.vm, function () {\r\n\t    if (shouldCallRemove) {\r\n\t      self.callHook(detach);\r\n\t    }\r\n\t    self.destroy();\r\n\t  });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Insert fragment before target, multi-nodes version\r\n\t *\r\n\t * @param {Node} target\r\n\t * @param {Boolean} withTransition\r\n\t */\r\n\t\r\n\tfunction multiBefore(target, withTransition) {\r\n\t  this.inserted = true;\r\n\t  var vm = this.vm;\r\n\t  var method = withTransition !== false ? beforeWithTransition : before;\r\n\t  mapNodeRange(this.node, this.end, function (node) {\r\n\t    method(node, target, vm);\r\n\t  });\r\n\t  if (inDoc(this.node)) {\r\n\t    this.callHook(attach);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Remove fragment, multi-nodes version\r\n\t */\r\n\t\r\n\tfunction multiRemove() {\r\n\t  this.inserted = false;\r\n\t  var self = this;\r\n\t  var shouldCallRemove = inDoc(this.node);\r\n\t  this.beforeRemove();\r\n\t  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\r\n\t    if (shouldCallRemove) {\r\n\t      self.callHook(detach);\r\n\t    }\r\n\t    self.destroy();\r\n\t  });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Prepare the fragment for removal.\r\n\t */\r\n\t\r\n\tFragment.prototype.beforeRemove = function () {\r\n\t  var i, l;\r\n\t  for (i = 0, l = this.childFrags.length; i < l; i++) {\r\n\t    // call the same method recursively on child\r\n\t    // fragments, depth-first\r\n\t    this.childFrags[i].beforeRemove(false);\r\n\t  }\r\n\t  for (i = 0, l = this.children.length; i < l; i++) {\r\n\t    // Call destroy for all contained instances,\r\n\t    // with remove:false and defer:true.\r\n\t    // Defer is necessary because we need to\r\n\t    // keep the children to call detach hooks\r\n\t    // on them.\r\n\t    this.children[i].$destroy(false, true);\r\n\t  }\r\n\t  var dirs = this.unlink.dirs;\r\n\t  for (i = 0, l = dirs.length; i < l; i++) {\r\n\t    // disable the watchers on all the directives\r\n\t    // so that the rendered content stays the same\r\n\t    // during removal.\r\n\t    dirs[i]._watcher && dirs[i]._watcher.teardown();\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Destroy the fragment.\r\n\t */\r\n\t\r\n\tFragment.prototype.destroy = function () {\r\n\t  if (this.parentFrag) {\r\n\t    this.parentFrag.childFrags.$remove(this);\r\n\t  }\r\n\t  this.node.__v_frag = null;\r\n\t  this.unlink();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Call attach hook for a Vue instance.\r\n\t *\r\n\t * @param {Vue} child\r\n\t */\r\n\t\r\n\tfunction attach(child) {\r\n\t  if (!child._isAttached && inDoc(child.$el)) {\r\n\t    child._callHook('attached');\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Call detach hook for a Vue instance.\r\n\t *\r\n\t * @param {Vue} child\r\n\t */\r\n\t\r\n\tfunction detach(child) {\r\n\t  if (child._isAttached && !inDoc(child.$el)) {\r\n\t    child._callHook('detached');\r\n\t  }\r\n\t}\r\n\t\r\n\tvar linkerCache = new Cache(5000);\r\n\t\r\n\t/**\r\n\t * A factory that can be used to create instances of a\r\n\t * fragment. Caches the compiled linker if possible.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Element|String} el\r\n\t */\r\n\tfunction FragmentFactory(vm, el) {\r\n\t  this.vm = vm;\r\n\t  var template;\r\n\t  var isString = typeof el === 'string';\r\n\t  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\r\n\t    template = parseTemplate(el, true);\r\n\t  } else {\r\n\t    template = document.createDocumentFragment();\r\n\t    template.appendChild(el);\r\n\t  }\r\n\t  this.template = template;\r\n\t  // linker can be cached, but only for components\r\n\t  var linker;\r\n\t  var cid = vm.constructor.cid;\r\n\t  if (cid > 0) {\r\n\t    var cacheId = cid + (isString ? el : getOuterHTML(el));\r\n\t    linker = linkerCache.get(cacheId);\r\n\t    if (!linker) {\r\n\t      linker = compile(template, vm.$options, true);\r\n\t      linkerCache.put(cacheId, linker);\r\n\t    }\r\n\t  } else {\r\n\t    linker = compile(template, vm.$options, true);\r\n\t  }\r\n\t  this.linker = linker;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a fragment instance with given host and scope.\r\n\t *\r\n\t * @param {Vue} host\r\n\t * @param {Object} scope\r\n\t * @param {Fragment} parentFrag\r\n\t */\r\n\t\r\n\tFragmentFactory.prototype.create = function (host, scope, parentFrag) {\r\n\t  var frag = cloneNode(this.template);\r\n\t  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\r\n\t};\r\n\t\r\n\tvar ON = 700;\r\n\tvar MODEL = 800;\r\n\tvar BIND = 850;\r\n\tvar TRANSITION = 1100;\r\n\tvar EL = 1500;\r\n\tvar COMPONENT = 1500;\r\n\tvar PARTIAL = 1750;\r\n\tvar IF = 2100;\r\n\tvar FOR = 2200;\r\n\tvar SLOT = 2300;\r\n\t\r\n\tvar uid$3 = 0;\r\n\t\r\n\tvar vFor = {\r\n\t\r\n\t  priority: FOR,\r\n\t  terminal: true,\r\n\t\r\n\t  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\r\n\t\r\n\t  bind: function bind() {\r\n\t    if (false) {\r\n\t      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\r\n\t    }\r\n\t\r\n\t    // support \"item in/of items\" syntax\r\n\t    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\r\n\t    if (inMatch) {\r\n\t      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\r\n\t      if (itMatch) {\r\n\t        this.iterator = itMatch[1].trim();\r\n\t        this.alias = itMatch[2].trim();\r\n\t      } else {\r\n\t        this.alias = inMatch[1].trim();\r\n\t      }\r\n\t      this.expression = inMatch[2];\r\n\t    }\r\n\t\r\n\t    if (!this.alias) {\r\n\t      (\"production\") !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    // uid as a cache identifier\r\n\t    this.id = '__v-for__' + ++uid$3;\r\n\t\r\n\t    // check if this is an option list,\r\n\t    // so that we know if we need to update the <select>'s\r\n\t    // v-model when the option list has changed.\r\n\t    // because v-model has a lower priority than v-for,\r\n\t    // the v-model is not bound here yet, so we have to\r\n\t    // retrive it in the actual updateModel() function.\r\n\t    var tag = this.el.tagName;\r\n\t    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\r\n\t\r\n\t    // setup anchor nodes\r\n\t    this.start = createAnchor('v-for-start');\r\n\t    this.end = createAnchor('v-for-end');\r\n\t    replace(this.el, this.end);\r\n\t    before(this.start, this.end);\r\n\t\r\n\t    // cache\r\n\t    this.cache = Object.create(null);\r\n\t\r\n\t    // fragment factory\r\n\t    this.factory = new FragmentFactory(this.vm, this.el);\r\n\t  },\r\n\t\r\n\t  update: function update(data) {\r\n\t    this.diff(data);\r\n\t    this.updateRef();\r\n\t    this.updateModel();\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Diff, based on new data and old data, determine the\r\n\t   * minimum amount of DOM manipulations needed to make the\r\n\t   * DOM reflect the new data Array.\r\n\t   *\r\n\t   * The algorithm diffs the new data Array by storing a\r\n\t   * hidden reference to an owner vm instance on previously\r\n\t   * seen data. This allows us to achieve O(n) which is\r\n\t   * better than a levenshtein distance based algorithm,\r\n\t   * which is O(m * n).\r\n\t   *\r\n\t   * @param {Array} data\r\n\t   */\r\n\t\r\n\t  diff: function diff(data) {\r\n\t    // check if the Array was converted from an Object\r\n\t    var item = data[0];\r\n\t    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\r\n\t\r\n\t    var trackByKey = this.params.trackBy;\r\n\t    var oldFrags = this.frags;\r\n\t    var frags = this.frags = new Array(data.length);\r\n\t    var alias = this.alias;\r\n\t    var iterator = this.iterator;\r\n\t    var start = this.start;\r\n\t    var end = this.end;\r\n\t    var inDocument = inDoc(start);\r\n\t    var init = !oldFrags;\r\n\t    var i, l, frag, key, value, primitive;\r\n\t\r\n\t    // First pass, go through the new Array and fill up\r\n\t    // the new frags array. If a piece of data has a cached\r\n\t    // instance for it, we reuse it. Otherwise build a new\r\n\t    // instance.\r\n\t    for (i = 0, l = data.length; i < l; i++) {\r\n\t      item = data[i];\r\n\t      key = convertedFromObject ? item.$key : null;\r\n\t      value = convertedFromObject ? item.$value : item;\r\n\t      primitive = !isObject(value);\r\n\t      frag = !init && this.getCachedFrag(value, i, key);\r\n\t      if (frag) {\r\n\t        // reusable fragment\r\n\t        frag.reused = true;\r\n\t        // update $index\r\n\t        frag.scope.$index = i;\r\n\t        // update $key\r\n\t        if (key) {\r\n\t          frag.scope.$key = key;\r\n\t        }\r\n\t        // update iterator\r\n\t        if (iterator) {\r\n\t          frag.scope[iterator] = key !== null ? key : i;\r\n\t        }\r\n\t        // update data for track-by, object repeat &\r\n\t        // primitive values.\r\n\t        if (trackByKey || convertedFromObject || primitive) {\r\n\t          withoutConversion(function () {\r\n\t            frag.scope[alias] = value;\r\n\t          });\r\n\t        }\r\n\t      } else {\r\n\t        // new instance\r\n\t        frag = this.create(value, alias, i, key);\r\n\t        frag.fresh = !init;\r\n\t      }\r\n\t      frags[i] = frag;\r\n\t      if (init) {\r\n\t        frag.before(end);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // we're done for the initial render.\r\n\t    if (init) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    // Second pass, go through the old fragments and\r\n\t    // destroy those who are not reused (and remove them\r\n\t    // from cache)\r\n\t    var removalIndex = 0;\r\n\t    var totalRemoved = oldFrags.length - frags.length;\r\n\t    // when removing a large number of fragments, watcher removal\r\n\t    // turns out to be a perf bottleneck, so we batch the watcher\r\n\t    // removals into a single filter call!\r\n\t    this.vm._vForRemoving = true;\r\n\t    for (i = 0, l = oldFrags.length; i < l; i++) {\r\n\t      frag = oldFrags[i];\r\n\t      if (!frag.reused) {\r\n\t        this.deleteCachedFrag(frag);\r\n\t        this.remove(frag, removalIndex++, totalRemoved, inDocument);\r\n\t      }\r\n\t    }\r\n\t    this.vm._vForRemoving = false;\r\n\t    if (removalIndex) {\r\n\t      this.vm._watchers = this.vm._watchers.filter(function (w) {\r\n\t        return w.active;\r\n\t      });\r\n\t    }\r\n\t\r\n\t    // Final pass, move/insert new fragments into the\r\n\t    // right place.\r\n\t    var targetPrev, prevEl, currentPrev;\r\n\t    var insertionIndex = 0;\r\n\t    for (i = 0, l = frags.length; i < l; i++) {\r\n\t      frag = frags[i];\r\n\t      // this is the frag that we should be after\r\n\t      targetPrev = frags[i - 1];\r\n\t      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\r\n\t      if (frag.reused && !frag.staggerCb) {\r\n\t        currentPrev = findPrevFrag(frag, start, this.id);\r\n\t        if (currentPrev !== targetPrev && (!currentPrev ||\r\n\t        // optimization for moving a single item.\r\n\t        // thanks to suggestions by @livoras in #1807\r\n\t        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\r\n\t          this.move(frag, prevEl);\r\n\t        }\r\n\t      } else {\r\n\t        // new instance, or still in stagger.\r\n\t        // insert with updated stagger index.\r\n\t        this.insert(frag, insertionIndex++, prevEl, inDocument);\r\n\t      }\r\n\t      frag.reused = frag.fresh = false;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Create a new fragment instance.\r\n\t   *\r\n\t   * @param {*} value\r\n\t   * @param {String} alias\r\n\t   * @param {Number} index\r\n\t   * @param {String} [key]\r\n\t   * @return {Fragment}\r\n\t   */\r\n\t\r\n\t  create: function create(value, alias, index, key) {\r\n\t    var host = this._host;\r\n\t    // create iteration scope\r\n\t    var parentScope = this._scope || this.vm;\r\n\t    var scope = Object.create(parentScope);\r\n\t    // ref holder for the scope\r\n\t    scope.$refs = Object.create(parentScope.$refs);\r\n\t    scope.$els = Object.create(parentScope.$els);\r\n\t    // make sure point $parent to parent scope\r\n\t    scope.$parent = parentScope;\r\n\t    // for two-way binding on alias\r\n\t    scope.$forContext = this;\r\n\t    // define scope properties\r\n\t    // important: define the scope alias without forced conversion\r\n\t    // so that frozen data structures remain non-reactive.\r\n\t    withoutConversion(function () {\r\n\t      defineReactive(scope, alias, value);\r\n\t    });\r\n\t    defineReactive(scope, '$index', index);\r\n\t    if (key) {\r\n\t      defineReactive(scope, '$key', key);\r\n\t    } else if (scope.$key) {\r\n\t      // avoid accidental fallback\r\n\t      def(scope, '$key', null);\r\n\t    }\r\n\t    if (this.iterator) {\r\n\t      defineReactive(scope, this.iterator, key !== null ? key : index);\r\n\t    }\r\n\t    var frag = this.factory.create(host, scope, this._frag);\r\n\t    frag.forId = this.id;\r\n\t    this.cacheFrag(value, frag, index, key);\r\n\t    return frag;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Update the v-ref on owner vm.\r\n\t   */\r\n\t\r\n\t  updateRef: function updateRef() {\r\n\t    var ref = this.descriptor.ref;\r\n\t    if (!ref) return;\r\n\t    var hash = (this._scope || this.vm).$refs;\r\n\t    var refs;\r\n\t    if (!this.fromObject) {\r\n\t      refs = this.frags.map(findVmFromFrag);\r\n\t    } else {\r\n\t      refs = {};\r\n\t      this.frags.forEach(function (frag) {\r\n\t        refs[frag.scope.$key] = findVmFromFrag(frag);\r\n\t      });\r\n\t    }\r\n\t    hash[ref] = refs;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * For option lists, update the containing v-model on\r\n\t   * parent <select>.\r\n\t   */\r\n\t\r\n\t  updateModel: function updateModel() {\r\n\t    if (this.isOption) {\r\n\t      var parent = this.start.parentNode;\r\n\t      var model = parent && parent.__v_model;\r\n\t      if (model) {\r\n\t        model.forceUpdate();\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Insert a fragment. Handles staggering.\r\n\t   *\r\n\t   * @param {Fragment} frag\r\n\t   * @param {Number} index\r\n\t   * @param {Node} prevEl\r\n\t   * @param {Boolean} inDocument\r\n\t   */\r\n\t\r\n\t  insert: function insert(frag, index, prevEl, inDocument) {\r\n\t    if (frag.staggerCb) {\r\n\t      frag.staggerCb.cancel();\r\n\t      frag.staggerCb = null;\r\n\t    }\r\n\t    var staggerAmount = this.getStagger(frag, index, null, 'enter');\r\n\t    if (inDocument && staggerAmount) {\r\n\t      // create an anchor and insert it synchronously,\r\n\t      // so that we can resolve the correct order without\r\n\t      // worrying about some elements not inserted yet\r\n\t      var anchor = frag.staggerAnchor;\r\n\t      if (!anchor) {\r\n\t        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\r\n\t        anchor.__v_frag = frag;\r\n\t      }\r\n\t      after(anchor, prevEl);\r\n\t      var op = frag.staggerCb = cancellable(function () {\r\n\t        frag.staggerCb = null;\r\n\t        frag.before(anchor);\r\n\t        remove(anchor);\r\n\t      });\r\n\t      setTimeout(op, staggerAmount);\r\n\t    } else {\r\n\t      var target = prevEl.nextSibling;\r\n\t      /* istanbul ignore if */\r\n\t      if (!target) {\r\n\t        // reset end anchor position in case the position was messed up\r\n\t        // by an external drag-n-drop library.\r\n\t        after(this.end, prevEl);\r\n\t        target = this.end;\r\n\t      }\r\n\t      frag.before(target);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Remove a fragment. Handles staggering.\r\n\t   *\r\n\t   * @param {Fragment} frag\r\n\t   * @param {Number} index\r\n\t   * @param {Number} total\r\n\t   * @param {Boolean} inDocument\r\n\t   */\r\n\t\r\n\t  remove: function remove(frag, index, total, inDocument) {\r\n\t    if (frag.staggerCb) {\r\n\t      frag.staggerCb.cancel();\r\n\t      frag.staggerCb = null;\r\n\t      // it's not possible for the same frag to be removed\r\n\t      // twice, so if we have a pending stagger callback,\r\n\t      // it means this frag is queued for enter but removed\r\n\t      // before its transition started. Since it is already\r\n\t      // destroyed, we can just leave it in detached state.\r\n\t      return;\r\n\t    }\r\n\t    var staggerAmount = this.getStagger(frag, index, total, 'leave');\r\n\t    if (inDocument && staggerAmount) {\r\n\t      var op = frag.staggerCb = cancellable(function () {\r\n\t        frag.staggerCb = null;\r\n\t        frag.remove();\r\n\t      });\r\n\t      setTimeout(op, staggerAmount);\r\n\t    } else {\r\n\t      frag.remove();\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Move a fragment to a new position.\r\n\t   * Force no transition.\r\n\t   *\r\n\t   * @param {Fragment} frag\r\n\t   * @param {Node} prevEl\r\n\t   */\r\n\t\r\n\t  move: function move(frag, prevEl) {\r\n\t    // fix a common issue with Sortable:\r\n\t    // if prevEl doesn't have nextSibling, this means it's\r\n\t    // been dragged after the end anchor. Just re-position\r\n\t    // the end anchor to the end of the container.\r\n\t    /* istanbul ignore if */\r\n\t    if (!prevEl.nextSibling) {\r\n\t      this.end.parentNode.appendChild(this.end);\r\n\t    }\r\n\t    frag.before(prevEl.nextSibling, false);\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Cache a fragment using track-by or the object key.\r\n\t   *\r\n\t   * @param {*} value\r\n\t   * @param {Fragment} frag\r\n\t   * @param {Number} index\r\n\t   * @param {String} [key]\r\n\t   */\r\n\t\r\n\t  cacheFrag: function cacheFrag(value, frag, index, key) {\r\n\t    var trackByKey = this.params.trackBy;\r\n\t    var cache = this.cache;\r\n\t    var primitive = !isObject(value);\r\n\t    var id;\r\n\t    if (key || trackByKey || primitive) {\r\n\t      id = getTrackByKey(index, key, value, trackByKey);\r\n\t      if (!cache[id]) {\r\n\t        cache[id] = frag;\r\n\t      } else if (trackByKey !== '$index') {\r\n\t        (\"production\") !== 'production' && this.warnDuplicate(value);\r\n\t      }\r\n\t    } else {\r\n\t      id = this.id;\r\n\t      if (hasOwn(value, id)) {\r\n\t        if (value[id] === null) {\r\n\t          value[id] = frag;\r\n\t        } else {\r\n\t          (\"production\") !== 'production' && this.warnDuplicate(value);\r\n\t        }\r\n\t      } else if (Object.isExtensible(value)) {\r\n\t        def(value, id, frag);\r\n\t      } else if (false) {\r\n\t        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\r\n\t      }\r\n\t    }\r\n\t    frag.raw = value;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Get a cached fragment from the value/index/key\r\n\t   *\r\n\t   * @param {*} value\r\n\t   * @param {Number} index\r\n\t   * @param {String} key\r\n\t   * @return {Fragment}\r\n\t   */\r\n\t\r\n\t  getCachedFrag: function getCachedFrag(value, index, key) {\r\n\t    var trackByKey = this.params.trackBy;\r\n\t    var primitive = !isObject(value);\r\n\t    var frag;\r\n\t    if (key || trackByKey || primitive) {\r\n\t      var id = getTrackByKey(index, key, value, trackByKey);\r\n\t      frag = this.cache[id];\r\n\t    } else {\r\n\t      frag = value[this.id];\r\n\t    }\r\n\t    if (frag && (frag.reused || frag.fresh)) {\r\n\t      (\"production\") !== 'production' && this.warnDuplicate(value);\r\n\t    }\r\n\t    return frag;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Delete a fragment from cache.\r\n\t   *\r\n\t   * @param {Fragment} frag\r\n\t   */\r\n\t\r\n\t  deleteCachedFrag: function deleteCachedFrag(frag) {\r\n\t    var value = frag.raw;\r\n\t    var trackByKey = this.params.trackBy;\r\n\t    var scope = frag.scope;\r\n\t    var index = scope.$index;\r\n\t    // fix #948: avoid accidentally fall through to\r\n\t    // a parent repeater which happens to have $key.\r\n\t    var key = hasOwn(scope, '$key') && scope.$key;\r\n\t    var primitive = !isObject(value);\r\n\t    if (trackByKey || key || primitive) {\r\n\t      var id = getTrackByKey(index, key, value, trackByKey);\r\n\t      this.cache[id] = null;\r\n\t    } else {\r\n\t      value[this.id] = null;\r\n\t      frag.raw = null;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Get the stagger amount for an insertion/removal.\r\n\t   *\r\n\t   * @param {Fragment} frag\r\n\t   * @param {Number} index\r\n\t   * @param {Number} total\r\n\t   * @param {String} type\r\n\t   */\r\n\t\r\n\t  getStagger: function getStagger(frag, index, total, type) {\r\n\t    type = type + 'Stagger';\r\n\t    var trans = frag.node.__v_trans;\r\n\t    var hooks = trans && trans.hooks;\r\n\t    var hook = hooks && (hooks[type] || hooks.stagger);\r\n\t    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Pre-process the value before piping it through the\r\n\t   * filters. This is passed to and called by the watcher.\r\n\t   */\r\n\t\r\n\t  _preProcess: function _preProcess(value) {\r\n\t    // regardless of type, store the un-filtered raw value.\r\n\t    this.rawValue = value;\r\n\t    return value;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Post-process the value after it has been piped through\r\n\t   * the filters. This is passed to and called by the watcher.\r\n\t   *\r\n\t   * It is necessary for this to be called during the\r\n\t   * watcher's dependency collection phase because we want\r\n\t   * the v-for to update when the source Object is mutated.\r\n\t   */\r\n\t\r\n\t  _postProcess: function _postProcess(value) {\r\n\t    if (isArray(value)) {\r\n\t      return value;\r\n\t    } else if (isPlainObject(value)) {\r\n\t      // convert plain object to array.\r\n\t      var keys = Object.keys(value);\r\n\t      var i = keys.length;\r\n\t      var res = new Array(i);\r\n\t      var key;\r\n\t      while (i--) {\r\n\t        key = keys[i];\r\n\t        res[i] = {\r\n\t          $key: key,\r\n\t          $value: value[key]\r\n\t        };\r\n\t      }\r\n\t      return res;\r\n\t    } else {\r\n\t      if (typeof value === 'number' && !isNaN(value)) {\r\n\t        value = range(value);\r\n\t      }\r\n\t      return value || [];\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    if (this.descriptor.ref) {\r\n\t      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\r\n\t    }\r\n\t    if (this.frags) {\r\n\t      var i = this.frags.length;\r\n\t      var frag;\r\n\t      while (i--) {\r\n\t        frag = this.frags[i];\r\n\t        this.deleteCachedFrag(frag);\r\n\t        frag.destroy();\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Helper to find the previous element that is a fragment\r\n\t * anchor. This is necessary because a destroyed frag's\r\n\t * element could still be lingering in the DOM before its\r\n\t * leaving transition finishes, but its inserted flag\r\n\t * should have been set to false so we can skip them.\r\n\t *\r\n\t * If this is a block repeat, we want to make sure we only\r\n\t * return frag that is bound to this v-for. (see #929)\r\n\t *\r\n\t * @param {Fragment} frag\r\n\t * @param {Comment|Text} anchor\r\n\t * @param {String} id\r\n\t * @return {Fragment}\r\n\t */\r\n\t\r\n\tfunction findPrevFrag(frag, anchor, id) {\r\n\t  var el = frag.node.previousSibling;\r\n\t  /* istanbul ignore if */\r\n\t  if (!el) return;\r\n\t  frag = el.__v_frag;\r\n\t  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\r\n\t    el = el.previousSibling;\r\n\t    /* istanbul ignore if */\r\n\t    if (!el) return;\r\n\t    frag = el.__v_frag;\r\n\t  }\r\n\t  return frag;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a range array from given number.\r\n\t *\r\n\t * @param {Number} n\r\n\t * @return {Array}\r\n\t */\r\n\t\r\n\tfunction range(n) {\r\n\t  var i = -1;\r\n\t  var ret = new Array(Math.floor(n));\r\n\t  while (++i < n) {\r\n\t    ret[i] = i;\r\n\t  }\r\n\t  return ret;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get the track by key for an item.\r\n\t *\r\n\t * @param {Number} index\r\n\t * @param {String} key\r\n\t * @param {*} value\r\n\t * @param {String} [trackByKey]\r\n\t */\r\n\t\r\n\tfunction getTrackByKey(index, key, value, trackByKey) {\r\n\t  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\r\n\t}\r\n\t\r\n\tif (false) {\r\n\t  vFor.warnDuplicate = function (value) {\r\n\t    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Find a vm from a fragment.\r\n\t *\r\n\t * @param {Fragment} frag\r\n\t * @return {Vue|undefined}\r\n\t */\r\n\t\r\n\tfunction findVmFromFrag(frag) {\r\n\t  var node = frag.node;\r\n\t  // handle multi-node frag\r\n\t  if (frag.end) {\r\n\t    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\r\n\t      node = node.nextSibling;\r\n\t    }\r\n\t  }\r\n\t  return node.__vue__;\r\n\t}\r\n\t\r\n\tvar vIf = {\r\n\t\r\n\t  priority: IF,\r\n\t  terminal: true,\r\n\t\r\n\t  bind: function bind() {\r\n\t    var el = this.el;\r\n\t    if (!el.__vue__) {\r\n\t      // check else block\r\n\t      var next = el.nextElementSibling;\r\n\t      if (next && getAttr(next, 'v-else') !== null) {\r\n\t        remove(next);\r\n\t        this.elseEl = next;\r\n\t      }\r\n\t      // check main block\r\n\t      this.anchor = createAnchor('v-if');\r\n\t      replace(el, this.anchor);\r\n\t    } else {\r\n\t      (\"production\") !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\r\n\t      this.invalid = true;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    if (this.invalid) return;\r\n\t    if (value) {\r\n\t      if (!this.frag) {\r\n\t        this.insert();\r\n\t      }\r\n\t    } else {\r\n\t      this.remove();\r\n\t    }\r\n\t  },\r\n\t\r\n\t  insert: function insert() {\r\n\t    if (this.elseFrag) {\r\n\t      this.elseFrag.remove();\r\n\t      this.elseFrag = null;\r\n\t    }\r\n\t    // lazy init factory\r\n\t    if (!this.factory) {\r\n\t      this.factory = new FragmentFactory(this.vm, this.el);\r\n\t    }\r\n\t    this.frag = this.factory.create(this._host, this._scope, this._frag);\r\n\t    this.frag.before(this.anchor);\r\n\t  },\r\n\t\r\n\t  remove: function remove() {\r\n\t    if (this.frag) {\r\n\t      this.frag.remove();\r\n\t      this.frag = null;\r\n\t    }\r\n\t    if (this.elseEl && !this.elseFrag) {\r\n\t      if (!this.elseFactory) {\r\n\t        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\r\n\t      }\r\n\t      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\r\n\t      this.elseFrag.before(this.anchor);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    if (this.frag) {\r\n\t      this.frag.destroy();\r\n\t    }\r\n\t    if (this.elseFrag) {\r\n\t      this.elseFrag.destroy();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar show = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    // check else block\r\n\t    var next = this.el.nextElementSibling;\r\n\t    if (next && getAttr(next, 'v-else') !== null) {\r\n\t      this.elseEl = next;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    this.apply(this.el, value);\r\n\t    if (this.elseEl) {\r\n\t      this.apply(this.elseEl, !value);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  apply: function apply(el, value) {\r\n\t    if (inDoc(el)) {\r\n\t      applyTransition(el, value ? 1 : -1, toggle, this.vm);\r\n\t    } else {\r\n\t      toggle();\r\n\t    }\r\n\t    function toggle() {\r\n\t      el.style.display = value ? '' : 'none';\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar text$2 = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    var self = this;\r\n\t    var el = this.el;\r\n\t    var isRange = el.type === 'range';\r\n\t    var lazy = this.params.lazy;\r\n\t    var number = this.params.number;\r\n\t    var debounce = this.params.debounce;\r\n\t\r\n\t    // handle composition events.\r\n\t    //   http://blog.evanyou.me/2014/01/03/composition-event/\r\n\t    // skip this for Android because it handles composition\r\n\t    // events quite differently. Android doesn't trigger\r\n\t    // composition events for language input methods e.g.\r\n\t    // Chinese, but instead triggers them for spelling\r\n\t    // suggestions... (see Discussion/#162)\r\n\t    var composing = false;\r\n\t    if (!isAndroid && !isRange) {\r\n\t      this.on('compositionstart', function () {\r\n\t        composing = true;\r\n\t      });\r\n\t      this.on('compositionend', function () {\r\n\t        composing = false;\r\n\t        // in IE11 the \"compositionend\" event fires AFTER\r\n\t        // the \"input\" event, so the input handler is blocked\r\n\t        // at the end... have to call it here.\r\n\t        //\r\n\t        // #1327: in lazy mode this is unecessary.\r\n\t        if (!lazy) {\r\n\t          self.listener();\r\n\t        }\r\n\t      });\r\n\t    }\r\n\t\r\n\t    // prevent messing with the input when user is typing,\r\n\t    // and force update on blur.\r\n\t    this.focused = false;\r\n\t    if (!isRange && !lazy) {\r\n\t      this.on('focus', function () {\r\n\t        self.focused = true;\r\n\t      });\r\n\t      this.on('blur', function () {\r\n\t        self.focused = false;\r\n\t        // do not sync value after fragment removal (#2017)\r\n\t        if (!self._frag || self._frag.inserted) {\r\n\t          self.rawListener();\r\n\t        }\r\n\t      });\r\n\t    }\r\n\t\r\n\t    // Now attach the main listener\r\n\t    this.listener = this.rawListener = function () {\r\n\t      if (composing || !self._bound) {\r\n\t        return;\r\n\t      }\r\n\t      var val = number || isRange ? toNumber(el.value) : el.value;\r\n\t      self.set(val);\r\n\t      // force update on next tick to avoid lock & same value\r\n\t      // also only update when user is not typing\r\n\t      nextTick(function () {\r\n\t        if (self._bound && !self.focused) {\r\n\t          self.update(self._watcher.value);\r\n\t        }\r\n\t      });\r\n\t    };\r\n\t\r\n\t    // apply debounce\r\n\t    if (debounce) {\r\n\t      this.listener = _debounce(this.listener, debounce);\r\n\t    }\r\n\t\r\n\t    // Support jQuery events, since jQuery.trigger() doesn't\r\n\t    // trigger native events in some cases and some plugins\r\n\t    // rely on $.trigger()\r\n\t    //\r\n\t    // We want to make sure if a listener is attached using\r\n\t    // jQuery, it is also removed with jQuery, that's why\r\n\t    // we do the check for each directive instance and\r\n\t    // store that check result on itself. This also allows\r\n\t    // easier test coverage control by unsetting the global\r\n\t    // jQuery variable in tests.\r\n\t    this.hasjQuery = typeof jQuery === 'function';\r\n\t    if (this.hasjQuery) {\r\n\t      var method = jQuery.fn.on ? 'on' : 'bind';\r\n\t      jQuery(el)[method]('change', this.rawListener);\r\n\t      if (!lazy) {\r\n\t        jQuery(el)[method]('input', this.listener);\r\n\t      }\r\n\t    } else {\r\n\t      this.on('change', this.rawListener);\r\n\t      if (!lazy) {\r\n\t        this.on('input', this.listener);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // IE9 doesn't fire input event on backspace/del/cut\r\n\t    if (!lazy && isIE9) {\r\n\t      this.on('cut', function () {\r\n\t        nextTick(self.listener);\r\n\t      });\r\n\t      this.on('keyup', function (e) {\r\n\t        if (e.keyCode === 46 || e.keyCode === 8) {\r\n\t          self.listener();\r\n\t        }\r\n\t      });\r\n\t    }\r\n\t\r\n\t    // set initial value if present\r\n\t    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\r\n\t      this.afterBind = this.listener;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    // #3029 only update when the value changes. This prevent\r\n\t    // browsers from overwriting values like selectionStart\r\n\t    value = _toString(value);\r\n\t    if (value !== this.el.value) this.el.value = value;\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    var el = this.el;\r\n\t    if (this.hasjQuery) {\r\n\t      var method = jQuery.fn.off ? 'off' : 'unbind';\r\n\t      jQuery(el)[method]('change', this.listener);\r\n\t      jQuery(el)[method]('input', this.listener);\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar radio = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    var self = this;\r\n\t    var el = this.el;\r\n\t\r\n\t    this.getValue = function () {\r\n\t      // value overwrite via v-bind:value\r\n\t      if (el.hasOwnProperty('_value')) {\r\n\t        return el._value;\r\n\t      }\r\n\t      var val = el.value;\r\n\t      if (self.params.number) {\r\n\t        val = toNumber(val);\r\n\t      }\r\n\t      return val;\r\n\t    };\r\n\t\r\n\t    this.listener = function () {\r\n\t      self.set(self.getValue());\r\n\t    };\r\n\t    this.on('change', this.listener);\r\n\t\r\n\t    if (el.hasAttribute('checked')) {\r\n\t      this.afterBind = this.listener;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    this.el.checked = looseEqual(value, this.getValue());\r\n\t  }\r\n\t};\r\n\t\r\n\tvar select = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    var _this = this;\r\n\t\r\n\t    var self = this;\r\n\t    var el = this.el;\r\n\t\r\n\t    // method to force update DOM using latest value.\r\n\t    this.forceUpdate = function () {\r\n\t      if (self._watcher) {\r\n\t        self.update(self._watcher.get());\r\n\t      }\r\n\t    };\r\n\t\r\n\t    // check if this is a multiple select\r\n\t    var multiple = this.multiple = el.hasAttribute('multiple');\r\n\t\r\n\t    // attach listener\r\n\t    this.listener = function () {\r\n\t      var value = getValue(el, multiple);\r\n\t      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\r\n\t      self.set(value);\r\n\t    };\r\n\t    this.on('change', this.listener);\r\n\t\r\n\t    // if has initial value, set afterBind\r\n\t    var initValue = getValue(el, multiple, true);\r\n\t    if (multiple && initValue.length || !multiple && initValue !== null) {\r\n\t      this.afterBind = this.listener;\r\n\t    }\r\n\t\r\n\t    // All major browsers except Firefox resets\r\n\t    // selectedIndex with value -1 to 0 when the element\r\n\t    // is appended to a new parent, therefore we have to\r\n\t    // force a DOM update whenever that happens...\r\n\t    this.vm.$on('hook:attached', function () {\r\n\t      nextTick(_this.forceUpdate);\r\n\t    });\r\n\t    if (!inDoc(el)) {\r\n\t      nextTick(this.forceUpdate);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    var el = this.el;\r\n\t    el.selectedIndex = -1;\r\n\t    var multi = this.multiple && isArray(value);\r\n\t    var options = el.options;\r\n\t    var i = options.length;\r\n\t    var op, val;\r\n\t    while (i--) {\r\n\t      op = options[i];\r\n\t      val = op.hasOwnProperty('_value') ? op._value : op.value;\r\n\t      /* eslint-disable eqeqeq */\r\n\t      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\r\n\t      /* eslint-enable eqeqeq */\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    /* istanbul ignore next */\r\n\t    this.vm.$off('hook:attached', this.forceUpdate);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get select value\r\n\t *\r\n\t * @param {SelectElement} el\r\n\t * @param {Boolean} multi\r\n\t * @param {Boolean} init\r\n\t * @return {Array|*}\r\n\t */\r\n\t\r\n\tfunction getValue(el, multi, init) {\r\n\t  var res = multi ? [] : null;\r\n\t  var op, val, selected;\r\n\t  for (var i = 0, l = el.options.length; i < l; i++) {\r\n\t    op = el.options[i];\r\n\t    selected = init ? op.hasAttribute('selected') : op.selected;\r\n\t    if (selected) {\r\n\t      val = op.hasOwnProperty('_value') ? op._value : op.value;\r\n\t      if (multi) {\r\n\t        res.push(val);\r\n\t      } else {\r\n\t        return val;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Native Array.indexOf uses strict equal, but in this\r\n\t * case we need to match string/numbers with custom equal.\r\n\t *\r\n\t * @param {Array} arr\r\n\t * @param {*} val\r\n\t */\r\n\t\r\n\tfunction indexOf$1(arr, val) {\r\n\t  var i = arr.length;\r\n\t  while (i--) {\r\n\t    if (looseEqual(arr[i], val)) {\r\n\t      return i;\r\n\t    }\r\n\t  }\r\n\t  return -1;\r\n\t}\r\n\t\r\n\tvar checkbox = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    var self = this;\r\n\t    var el = this.el;\r\n\t\r\n\t    this.getValue = function () {\r\n\t      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\r\n\t    };\r\n\t\r\n\t    function getBooleanValue() {\r\n\t      var val = el.checked;\r\n\t      if (val && el.hasOwnProperty('_trueValue')) {\r\n\t        return el._trueValue;\r\n\t      }\r\n\t      if (!val && el.hasOwnProperty('_falseValue')) {\r\n\t        return el._falseValue;\r\n\t      }\r\n\t      return val;\r\n\t    }\r\n\t\r\n\t    this.listener = function () {\r\n\t      var model = self._watcher.get();\r\n\t      if (isArray(model)) {\r\n\t        var val = self.getValue();\r\n\t        var i = indexOf(model, val);\r\n\t        if (el.checked) {\r\n\t          if (i < 0) {\r\n\t            self.set(model.concat(val));\r\n\t          }\r\n\t        } else if (i > -1) {\r\n\t          self.set(model.slice(0, i).concat(model.slice(i + 1)));\r\n\t        }\r\n\t      } else {\r\n\t        self.set(getBooleanValue());\r\n\t      }\r\n\t    };\r\n\t\r\n\t    this.on('change', this.listener);\r\n\t    if (el.hasAttribute('checked')) {\r\n\t      this.afterBind = this.listener;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    var el = this.el;\r\n\t    if (isArray(value)) {\r\n\t      el.checked = indexOf(value, this.getValue()) > -1;\r\n\t    } else {\r\n\t      if (el.hasOwnProperty('_trueValue')) {\r\n\t        el.checked = looseEqual(value, el._trueValue);\r\n\t      } else {\r\n\t        el.checked = !!value;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar handlers = {\r\n\t  text: text$2,\r\n\t  radio: radio,\r\n\t  select: select,\r\n\t  checkbox: checkbox\r\n\t};\r\n\t\r\n\tvar model = {\r\n\t\r\n\t  priority: MODEL,\r\n\t  twoWay: true,\r\n\t  handlers: handlers,\r\n\t  params: ['lazy', 'number', 'debounce'],\r\n\t\r\n\t  /**\r\n\t   * Possible elements:\r\n\t   *   <select>\r\n\t   *   <textarea>\r\n\t   *   <input type=\"*\">\r\n\t   *     - text\r\n\t   *     - checkbox\r\n\t   *     - radio\r\n\t   *     - number\r\n\t   */\r\n\t\r\n\t  bind: function bind() {\r\n\t    // friendly warning...\r\n\t    this.checkFilters();\r\n\t    if (this.hasRead && !this.hasWrite) {\r\n\t      (\"production\") !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\r\n\t    }\r\n\t    var el = this.el;\r\n\t    var tag = el.tagName;\r\n\t    var handler;\r\n\t    if (tag === 'INPUT') {\r\n\t      handler = handlers[el.type] || handlers.text;\r\n\t    } else if (tag === 'SELECT') {\r\n\t      handler = handlers.select;\r\n\t    } else if (tag === 'TEXTAREA') {\r\n\t      handler = handlers.text;\r\n\t    } else {\r\n\t      (\"production\") !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\r\n\t      return;\r\n\t    }\r\n\t    el.__v_model = this;\r\n\t    handler.bind.call(this);\r\n\t    this.update = handler.update;\r\n\t    this._unbind = handler.unbind;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Check read/write filter stats.\r\n\t   */\r\n\t\r\n\t  checkFilters: function checkFilters() {\r\n\t    var filters = this.filters;\r\n\t    if (!filters) return;\r\n\t    var i = filters.length;\r\n\t    while (i--) {\r\n\t      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\r\n\t      if (typeof filter === 'function' || filter.read) {\r\n\t        this.hasRead = true;\r\n\t      }\r\n\t      if (filter.write) {\r\n\t        this.hasWrite = true;\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    this.el.__v_model = null;\r\n\t    this._unbind && this._unbind();\r\n\t  }\r\n\t};\r\n\t\r\n\t// keyCode aliases\r\n\tvar keyCodes = {\r\n\t  esc: 27,\r\n\t  tab: 9,\r\n\t  enter: 13,\r\n\t  space: 32,\r\n\t  'delete': [8, 46],\r\n\t  up: 38,\r\n\t  left: 37,\r\n\t  right: 39,\r\n\t  down: 40\r\n\t};\r\n\t\r\n\tfunction keyFilter(handler, keys) {\r\n\t  var codes = keys.map(function (key) {\r\n\t    var charCode = key.charCodeAt(0);\r\n\t    if (charCode > 47 && charCode < 58) {\r\n\t      return parseInt(key, 10);\r\n\t    }\r\n\t    if (key.length === 1) {\r\n\t      charCode = key.toUpperCase().charCodeAt(0);\r\n\t      if (charCode > 64 && charCode < 91) {\r\n\t        return charCode;\r\n\t      }\r\n\t    }\r\n\t    return keyCodes[key];\r\n\t  });\r\n\t  codes = [].concat.apply([], codes);\r\n\t  return function keyHandler(e) {\r\n\t    if (codes.indexOf(e.keyCode) > -1) {\r\n\t      return handler.call(this, e);\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction stopFilter(handler) {\r\n\t  return function stopHandler(e) {\r\n\t    e.stopPropagation();\r\n\t    return handler.call(this, e);\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction preventFilter(handler) {\r\n\t  return function preventHandler(e) {\r\n\t    e.preventDefault();\r\n\t    return handler.call(this, e);\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction selfFilter(handler) {\r\n\t  return function selfHandler(e) {\r\n\t    if (e.target === e.currentTarget) {\r\n\t      return handler.call(this, e);\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\tvar on$1 = {\r\n\t\r\n\t  priority: ON,\r\n\t  acceptStatement: true,\r\n\t  keyCodes: keyCodes,\r\n\t\r\n\t  bind: function bind() {\r\n\t    // deal with iframes\r\n\t    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\r\n\t      var self = this;\r\n\t      this.iframeBind = function () {\r\n\t        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\r\n\t      };\r\n\t      this.on('load', this.iframeBind);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(handler) {\r\n\t    // stub a noop for v-on with no value,\r\n\t    // e.g. @mousedown.prevent\r\n\t    if (!this.descriptor.raw) {\r\n\t      handler = function () {};\r\n\t    }\r\n\t\r\n\t    if (typeof handler !== 'function') {\r\n\t      (\"production\") !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    // apply modifiers\r\n\t    if (this.modifiers.stop) {\r\n\t      handler = stopFilter(handler);\r\n\t    }\r\n\t    if (this.modifiers.prevent) {\r\n\t      handler = preventFilter(handler);\r\n\t    }\r\n\t    if (this.modifiers.self) {\r\n\t      handler = selfFilter(handler);\r\n\t    }\r\n\t    // key filter\r\n\t    var keys = Object.keys(this.modifiers).filter(function (key) {\r\n\t      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\r\n\t    });\r\n\t    if (keys.length) {\r\n\t      handler = keyFilter(handler, keys);\r\n\t    }\r\n\t\r\n\t    this.reset();\r\n\t    this.handler = handler;\r\n\t\r\n\t    if (this.iframeBind) {\r\n\t      this.iframeBind();\r\n\t    } else {\r\n\t      on(this.el, this.arg, this.handler, this.modifiers.capture);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  reset: function reset() {\r\n\t    var el = this.iframeBind ? this.el.contentWindow : this.el;\r\n\t    if (this.handler) {\r\n\t      off(el, this.arg, this.handler);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    this.reset();\r\n\t  }\r\n\t};\r\n\t\r\n\tvar prefixes = ['-webkit-', '-moz-', '-ms-'];\r\n\tvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\r\n\tvar importantRE = /!important;?$/;\r\n\tvar propCache = Object.create(null);\r\n\t\r\n\tvar testEl = null;\r\n\t\r\n\tvar style = {\r\n\t\r\n\t  deep: true,\r\n\t\r\n\t  update: function update(value) {\r\n\t    if (typeof value === 'string') {\r\n\t      this.el.style.cssText = value;\r\n\t    } else if (isArray(value)) {\r\n\t      this.handleObject(value.reduce(extend, {}));\r\n\t    } else {\r\n\t      this.handleObject(value || {});\r\n\t    }\r\n\t  },\r\n\t\r\n\t  handleObject: function handleObject(value) {\r\n\t    // cache object styles so that only changed props\r\n\t    // are actually updated.\r\n\t    var cache = this.cache || (this.cache = {});\r\n\t    var name, val;\r\n\t    for (name in cache) {\r\n\t      if (!(name in value)) {\r\n\t        this.handleSingle(name, null);\r\n\t        delete cache[name];\r\n\t      }\r\n\t    }\r\n\t    for (name in value) {\r\n\t      val = value[name];\r\n\t      if (val !== cache[name]) {\r\n\t        cache[name] = val;\r\n\t        this.handleSingle(name, val);\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  handleSingle: function handleSingle(prop, value) {\r\n\t    prop = normalize(prop);\r\n\t    if (!prop) return; // unsupported prop\r\n\t    // cast possible numbers/booleans into strings\r\n\t    if (value != null) value += '';\r\n\t    if (value) {\r\n\t      var isImportant = importantRE.test(value) ? 'important' : '';\r\n\t      if (isImportant) {\r\n\t        /* istanbul ignore if */\r\n\t        if (false) {\r\n\t          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\r\n\t        }\r\n\t        value = value.replace(importantRE, '').trim();\r\n\t        this.el.style.setProperty(prop.kebab, value, isImportant);\r\n\t      } else {\r\n\t        this.el.style[prop.camel] = value;\r\n\t      }\r\n\t    } else {\r\n\t      this.el.style[prop.camel] = '';\r\n\t    }\r\n\t  }\r\n\t\r\n\t};\r\n\t\r\n\t/**\r\n\t * Normalize a CSS property name.\r\n\t * - cache result\r\n\t * - auto prefix\r\n\t * - camelCase -> dash-case\r\n\t *\r\n\t * @param {String} prop\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction normalize(prop) {\r\n\t  if (propCache[prop]) {\r\n\t    return propCache[prop];\r\n\t  }\r\n\t  var res = prefix(prop);\r\n\t  propCache[prop] = propCache[res] = res;\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Auto detect the appropriate prefix for a CSS property.\r\n\t * https://gist.github.com/paulirish/523692\r\n\t *\r\n\t * @param {String} prop\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction prefix(prop) {\r\n\t  prop = hyphenate(prop);\r\n\t  var camel = camelize(prop);\r\n\t  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\r\n\t  if (!testEl) {\r\n\t    testEl = document.createElement('div');\r\n\t  }\r\n\t  var i = prefixes.length;\r\n\t  var prefixed;\r\n\t  if (camel !== 'filter' && camel in testEl.style) {\r\n\t    return {\r\n\t      kebab: prop,\r\n\t      camel: camel\r\n\t    };\r\n\t  }\r\n\t  while (i--) {\r\n\t    prefixed = camelPrefixes[i] + upper;\r\n\t    if (prefixed in testEl.style) {\r\n\t      return {\r\n\t        kebab: prefixes[i] + prop,\r\n\t        camel: prefixed\r\n\t      };\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t// xlink\r\n\tvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\n\tvar xlinkRE = /^xlink:/;\r\n\t\r\n\t// check for attributes that prohibit interpolations\r\n\tvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\r\n\t// these attributes should also set their corresponding properties\r\n\t// because they only affect the initial state of the element\r\n\tvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\r\n\t// these attributes expect enumrated values of \"true\" or \"false\"\r\n\t// but are not boolean attributes\r\n\tvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\r\n\t\r\n\t// these attributes should set a hidden property for\r\n\t// binding v-model to object values\r\n\tvar modelProps = {\r\n\t  value: '_value',\r\n\t  'true-value': '_trueValue',\r\n\t  'false-value': '_falseValue'\r\n\t};\r\n\t\r\n\tvar bind$1 = {\r\n\t\r\n\t  priority: BIND,\r\n\t\r\n\t  bind: function bind() {\r\n\t    var attr = this.arg;\r\n\t    var tag = this.el.tagName;\r\n\t    // should be deep watch on object mode\r\n\t    if (!attr) {\r\n\t      this.deep = true;\r\n\t    }\r\n\t    // handle interpolation bindings\r\n\t    var descriptor = this.descriptor;\r\n\t    var tokens = descriptor.interp;\r\n\t    if (tokens) {\r\n\t      // handle interpolations with one-time tokens\r\n\t      if (descriptor.hasOneTime) {\r\n\t        this.expression = tokensToExp(tokens, this._scope || this.vm);\r\n\t      }\r\n\t\r\n\t      // only allow binding on native attributes\r\n\t      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\r\n\t        (\"production\") !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\r\n\t        this.el.removeAttribute(attr);\r\n\t        this.invalid = true;\r\n\t      }\r\n\t\r\n\t      /* istanbul ignore if */\r\n\t      if (false) {\r\n\t        var raw = attr + '=\"' + descriptor.raw + '\": ';\r\n\t        // warn src\r\n\t        if (attr === 'src') {\r\n\t          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\r\n\t        }\r\n\t\r\n\t        // warn style\r\n\t        if (attr === 'style') {\r\n\t          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  update: function update(value) {\r\n\t    if (this.invalid) {\r\n\t      return;\r\n\t    }\r\n\t    var attr = this.arg;\r\n\t    if (this.arg) {\r\n\t      this.handleSingle(attr, value);\r\n\t    } else {\r\n\t      this.handleObject(value || {});\r\n\t    }\r\n\t  },\r\n\t\r\n\t  // share object handler with v-bind:class\r\n\t  handleObject: style.handleObject,\r\n\t\r\n\t  handleSingle: function handleSingle(attr, value) {\r\n\t    var el = this.el;\r\n\t    var interp = this.descriptor.interp;\r\n\t    if (this.modifiers.camel) {\r\n\t      attr = camelize(attr);\r\n\t    }\r\n\t    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\r\n\t      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\r\n\t      ? '' : value : value;\r\n\t\r\n\t      if (el[attr] !== attrValue) {\r\n\t        el[attr] = attrValue;\r\n\t      }\r\n\t    }\r\n\t    // set model props\r\n\t    var modelProp = modelProps[attr];\r\n\t    if (!interp && modelProp) {\r\n\t      el[modelProp] = value;\r\n\t      // update v-model if present\r\n\t      var model = el.__v_model;\r\n\t      if (model) {\r\n\t        model.listener();\r\n\t      }\r\n\t    }\r\n\t    // do not set value attribute for textarea\r\n\t    if (attr === 'value' && el.tagName === 'TEXTAREA') {\r\n\t      el.removeAttribute(attr);\r\n\t      return;\r\n\t    }\r\n\t    // update attribute\r\n\t    if (enumeratedAttrRE.test(attr)) {\r\n\t      el.setAttribute(attr, value ? 'true' : 'false');\r\n\t    } else if (value != null && value !== false) {\r\n\t      if (attr === 'class') {\r\n\t        // handle edge case #1960:\r\n\t        // class interpolation should not overwrite Vue transition class\r\n\t        if (el.__v_trans) {\r\n\t          value += ' ' + el.__v_trans.id + '-transition';\r\n\t        }\r\n\t        setClass(el, value);\r\n\t      } else if (xlinkRE.test(attr)) {\r\n\t        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\r\n\t      } else {\r\n\t        el.setAttribute(attr, value === true ? '' : value);\r\n\t      }\r\n\t    } else {\r\n\t      el.removeAttribute(attr);\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar el = {\r\n\t\r\n\t  priority: EL,\r\n\t\r\n\t  bind: function bind() {\r\n\t    /* istanbul ignore if */\r\n\t    if (!this.arg) {\r\n\t      return;\r\n\t    }\r\n\t    var id = this.id = camelize(this.arg);\r\n\t    var refs = (this._scope || this.vm).$els;\r\n\t    if (hasOwn(refs, id)) {\r\n\t      refs[id] = this.el;\r\n\t    } else {\r\n\t      defineReactive(refs, id, this.el);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    var refs = (this._scope || this.vm).$els;\r\n\t    if (refs[this.id] === this.el) {\r\n\t      refs[this.id] = null;\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar ref = {\r\n\t  bind: function bind() {\r\n\t    (\"production\") !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\r\n\t  }\r\n\t};\r\n\t\r\n\tvar cloak = {\r\n\t  bind: function bind() {\r\n\t    var el = this.el;\r\n\t    this.vm.$once('pre-hook:compiled', function () {\r\n\t      el.removeAttribute('v-cloak');\r\n\t    });\r\n\t  }\r\n\t};\r\n\t\r\n\t// logic control\r\n\t// two-way binding\r\n\t// event handling\r\n\t// attributes\r\n\t// ref & el\r\n\t// cloak\r\n\t// must export plain object\r\n\tvar directives = {\r\n\t  text: text$1,\r\n\t  html: html,\r\n\t  'for': vFor,\r\n\t  'if': vIf,\r\n\t  show: show,\r\n\t  model: model,\r\n\t  on: on$1,\r\n\t  bind: bind$1,\r\n\t  el: el,\r\n\t  ref: ref,\r\n\t  cloak: cloak\r\n\t};\r\n\t\r\n\tvar vClass = {\r\n\t\r\n\t  deep: true,\r\n\t\r\n\t  update: function update(value) {\r\n\t    if (!value) {\r\n\t      this.cleanup();\r\n\t    } else if (typeof value === 'string') {\r\n\t      this.setClass(value.trim().split(/\\s+/));\r\n\t    } else {\r\n\t      this.setClass(normalize$1(value));\r\n\t    }\r\n\t  },\r\n\t\r\n\t  setClass: function setClass(value) {\r\n\t    this.cleanup(value);\r\n\t    for (var i = 0, l = value.length; i < l; i++) {\r\n\t      var val = value[i];\r\n\t      if (val) {\r\n\t        apply(this.el, val, addClass);\r\n\t      }\r\n\t    }\r\n\t    this.prevKeys = value;\r\n\t  },\r\n\t\r\n\t  cleanup: function cleanup(value) {\r\n\t    var prevKeys = this.prevKeys;\r\n\t    if (!prevKeys) return;\r\n\t    var i = prevKeys.length;\r\n\t    while (i--) {\r\n\t      var key = prevKeys[i];\r\n\t      if (!value || value.indexOf(key) < 0) {\r\n\t        apply(this.el, key, removeClass);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Normalize objects and arrays (potentially containing objects)\r\n\t * into array of strings.\r\n\t *\r\n\t * @param {Object|Array<String|Object>} value\r\n\t * @return {Array<String>}\r\n\t */\r\n\t\r\n\tfunction normalize$1(value) {\r\n\t  var res = [];\r\n\t  if (isArray(value)) {\r\n\t    for (var i = 0, l = value.length; i < l; i++) {\r\n\t      var _key = value[i];\r\n\t      if (_key) {\r\n\t        if (typeof _key === 'string') {\r\n\t          res.push(_key);\r\n\t        } else {\r\n\t          for (var k in _key) {\r\n\t            if (_key[k]) res.push(k);\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  } else if (isObject(value)) {\r\n\t    for (var key in value) {\r\n\t      if (value[key]) res.push(key);\r\n\t    }\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add or remove a class/classes on an element\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} key The class name. This may or may not\r\n\t *                     contain a space character, in such a\r\n\t *                     case we'll deal with multiple class\r\n\t *                     names at once.\r\n\t * @param {Function} fn\r\n\t */\r\n\t\r\n\tfunction apply(el, key, fn) {\r\n\t  key = key.trim();\r\n\t  if (key.indexOf(' ') === -1) {\r\n\t    fn(el, key);\r\n\t    return;\r\n\t  }\r\n\t  // The key contains one or more space characters.\r\n\t  // Since a class name doesn't accept such characters, we\r\n\t  // treat it as multiple classes.\r\n\t  var keys = key.split(/\\s+/);\r\n\t  for (var i = 0, l = keys.length; i < l; i++) {\r\n\t    fn(el, keys[i]);\r\n\t  }\r\n\t}\r\n\t\r\n\tvar component = {\r\n\t\r\n\t  priority: COMPONENT,\r\n\t\r\n\t  params: ['keep-alive', 'transition-mode', 'inline-template'],\r\n\t\r\n\t  /**\r\n\t   * Setup. Two possible usages:\r\n\t   *\r\n\t   * - static:\r\n\t   *   <comp> or <div v-component=\"comp\">\r\n\t   *\r\n\t   * - dynamic:\r\n\t   *   <component :is=\"view\">\r\n\t   */\r\n\t\r\n\t  bind: function bind() {\r\n\t    if (!this.el.__vue__) {\r\n\t      // keep-alive cache\r\n\t      this.keepAlive = this.params.keepAlive;\r\n\t      if (this.keepAlive) {\r\n\t        this.cache = {};\r\n\t      }\r\n\t      // check inline-template\r\n\t      if (this.params.inlineTemplate) {\r\n\t        // extract inline template as a DocumentFragment\r\n\t        this.inlineTemplate = extractContent(this.el, true);\r\n\t      }\r\n\t      // component resolution related state\r\n\t      this.pendingComponentCb = this.Component = null;\r\n\t      // transition related state\r\n\t      this.pendingRemovals = 0;\r\n\t      this.pendingRemovalCb = null;\r\n\t      // create a ref anchor\r\n\t      this.anchor = createAnchor('v-component');\r\n\t      replace(this.el, this.anchor);\r\n\t      // remove is attribute.\r\n\t      // this is removed during compilation, but because compilation is\r\n\t      // cached, when the component is used elsewhere this attribute\r\n\t      // will remain at link time.\r\n\t      this.el.removeAttribute('is');\r\n\t      this.el.removeAttribute(':is');\r\n\t      // remove ref, same as above\r\n\t      if (this.descriptor.ref) {\r\n\t        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\r\n\t      }\r\n\t      // if static, build right now.\r\n\t      if (this.literal) {\r\n\t        this.setComponent(this.expression);\r\n\t      }\r\n\t    } else {\r\n\t      (\"production\") !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Public update, called by the watcher in the dynamic\r\n\t   * literal scenario, e.g. <component :is=\"view\">\r\n\t   */\r\n\t\r\n\t  update: function update(value) {\r\n\t    if (!this.literal) {\r\n\t      this.setComponent(value);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Switch dynamic components. May resolve the component\r\n\t   * asynchronously, and perform transition based on\r\n\t   * specified transition mode. Accepts a few additional\r\n\t   * arguments specifically for vue-router.\r\n\t   *\r\n\t   * The callback is called when the full transition is\r\n\t   * finished.\r\n\t   *\r\n\t   * @param {String} value\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  setComponent: function setComponent(value, cb) {\r\n\t    this.invalidatePending();\r\n\t    if (!value) {\r\n\t      // just remove current\r\n\t      this.unbuild(true);\r\n\t      this.remove(this.childVM, cb);\r\n\t      this.childVM = null;\r\n\t    } else {\r\n\t      var self = this;\r\n\t      this.resolveComponent(value, function () {\r\n\t        self.mountComponent(cb);\r\n\t      });\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Resolve the component constructor to use when creating\r\n\t   * the child vm.\r\n\t   *\r\n\t   * @param {String|Function} value\r\n\t   * @param {Function} cb\r\n\t   */\r\n\t\r\n\t  resolveComponent: function resolveComponent(value, cb) {\r\n\t    var self = this;\r\n\t    this.pendingComponentCb = cancellable(function (Component) {\r\n\t      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\r\n\t      self.Component = Component;\r\n\t      cb();\r\n\t    });\r\n\t    this.vm._resolveComponent(value, this.pendingComponentCb);\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Create a new instance using the current constructor and\r\n\t   * replace the existing instance. This method doesn't care\r\n\t   * whether the new component and the old one are actually\r\n\t   * the same.\r\n\t   *\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  mountComponent: function mountComponent(cb) {\r\n\t    // actual mount\r\n\t    this.unbuild(true);\r\n\t    var self = this;\r\n\t    var activateHooks = this.Component.options.activate;\r\n\t    var cached = this.getCached();\r\n\t    var newComponent = this.build();\r\n\t    if (activateHooks && !cached) {\r\n\t      this.waitingFor = newComponent;\r\n\t      callActivateHooks(activateHooks, newComponent, function () {\r\n\t        if (self.waitingFor !== newComponent) {\r\n\t          return;\r\n\t        }\r\n\t        self.waitingFor = null;\r\n\t        self.transition(newComponent, cb);\r\n\t      });\r\n\t    } else {\r\n\t      // update ref for kept-alive component\r\n\t      if (cached) {\r\n\t        newComponent._updateRef();\r\n\t      }\r\n\t      this.transition(newComponent, cb);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * When the component changes or unbinds before an async\r\n\t   * constructor is resolved, we need to invalidate its\r\n\t   * pending callback.\r\n\t   */\r\n\t\r\n\t  invalidatePending: function invalidatePending() {\r\n\t    if (this.pendingComponentCb) {\r\n\t      this.pendingComponentCb.cancel();\r\n\t      this.pendingComponentCb = null;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Instantiate/insert a new child vm.\r\n\t   * If keep alive and has cached instance, insert that\r\n\t   * instance; otherwise build a new one and cache it.\r\n\t   *\r\n\t   * @param {Object} [extraOptions]\r\n\t   * @return {Vue} - the created instance\r\n\t   */\r\n\t\r\n\t  build: function build(extraOptions) {\r\n\t    var cached = this.getCached();\r\n\t    if (cached) {\r\n\t      return cached;\r\n\t    }\r\n\t    if (this.Component) {\r\n\t      // default options\r\n\t      var options = {\r\n\t        name: this.ComponentName,\r\n\t        el: cloneNode(this.el),\r\n\t        template: this.inlineTemplate,\r\n\t        // make sure to add the child with correct parent\r\n\t        // if this is a transcluded component, its parent\r\n\t        // should be the transclusion host.\r\n\t        parent: this._host || this.vm,\r\n\t        // if no inline-template, then the compiled\r\n\t        // linker can be cached for better performance.\r\n\t        _linkerCachable: !this.inlineTemplate,\r\n\t        _ref: this.descriptor.ref,\r\n\t        _asComponent: true,\r\n\t        _isRouterView: this._isRouterView,\r\n\t        // if this is a transcluded component, context\r\n\t        // will be the common parent vm of this instance\r\n\t        // and its host.\r\n\t        _context: this.vm,\r\n\t        // if this is inside an inline v-for, the scope\r\n\t        // will be the intermediate scope created for this\r\n\t        // repeat fragment. this is used for linking props\r\n\t        // and container directives.\r\n\t        _scope: this._scope,\r\n\t        // pass in the owner fragment of this component.\r\n\t        // this is necessary so that the fragment can keep\r\n\t        // track of its contained components in order to\r\n\t        // call attach/detach hooks for them.\r\n\t        _frag: this._frag\r\n\t      };\r\n\t      // extra options\r\n\t      // in 1.0.0 this is used by vue-router only\r\n\t      /* istanbul ignore if */\r\n\t      if (extraOptions) {\r\n\t        extend(options, extraOptions);\r\n\t      }\r\n\t      var child = new this.Component(options);\r\n\t      if (this.keepAlive) {\r\n\t        this.cache[this.Component.cid] = child;\r\n\t      }\r\n\t      /* istanbul ignore if */\r\n\t      if (false) {\r\n\t        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\r\n\t      }\r\n\t      return child;\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Try to get a cached instance of the current component.\r\n\t   *\r\n\t   * @return {Vue|undefined}\r\n\t   */\r\n\t\r\n\t  getCached: function getCached() {\r\n\t    return this.keepAlive && this.cache[this.Component.cid];\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Teardown the current child, but defers cleanup so\r\n\t   * that we can separate the destroy and removal steps.\r\n\t   *\r\n\t   * @param {Boolean} defer\r\n\t   */\r\n\t\r\n\t  unbuild: function unbuild(defer) {\r\n\t    if (this.waitingFor) {\r\n\t      if (!this.keepAlive) {\r\n\t        this.waitingFor.$destroy();\r\n\t      }\r\n\t      this.waitingFor = null;\r\n\t    }\r\n\t    var child = this.childVM;\r\n\t    if (!child || this.keepAlive) {\r\n\t      if (child) {\r\n\t        // remove ref\r\n\t        child._inactive = true;\r\n\t        child._updateRef(true);\r\n\t      }\r\n\t      return;\r\n\t    }\r\n\t    // the sole purpose of `deferCleanup` is so that we can\r\n\t    // \"deactivate\" the vm right now and perform DOM removal\r\n\t    // later.\r\n\t    child.$destroy(false, defer);\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Remove current destroyed child and manually do\r\n\t   * the cleanup after removal.\r\n\t   *\r\n\t   * @param {Function} cb\r\n\t   */\r\n\t\r\n\t  remove: function remove(child, cb) {\r\n\t    var keepAlive = this.keepAlive;\r\n\t    if (child) {\r\n\t      // we may have a component switch when a previous\r\n\t      // component is still being transitioned out.\r\n\t      // we want to trigger only one lastest insertion cb\r\n\t      // when the existing transition finishes. (#1119)\r\n\t      this.pendingRemovals++;\r\n\t      this.pendingRemovalCb = cb;\r\n\t      var self = this;\r\n\t      child.$remove(function () {\r\n\t        self.pendingRemovals--;\r\n\t        if (!keepAlive) child._cleanup();\r\n\t        if (!self.pendingRemovals && self.pendingRemovalCb) {\r\n\t          self.pendingRemovalCb();\r\n\t          self.pendingRemovalCb = null;\r\n\t        }\r\n\t      });\r\n\t    } else if (cb) {\r\n\t      cb();\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Actually swap the components, depending on the\r\n\t   * transition mode. Defaults to simultaneous.\r\n\t   *\r\n\t   * @param {Vue} target\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  transition: function transition(target, cb) {\r\n\t    var self = this;\r\n\t    var current = this.childVM;\r\n\t    // for devtool inspection\r\n\t    if (current) current._inactive = true;\r\n\t    target._inactive = false;\r\n\t    this.childVM = target;\r\n\t    switch (self.params.transitionMode) {\r\n\t      case 'in-out':\r\n\t        target.$before(self.anchor, function () {\r\n\t          self.remove(current, cb);\r\n\t        });\r\n\t        break;\r\n\t      case 'out-in':\r\n\t        self.remove(current, function () {\r\n\t          target.$before(self.anchor, cb);\r\n\t        });\r\n\t        break;\r\n\t      default:\r\n\t        self.remove(current);\r\n\t        target.$before(self.anchor, cb);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Unbind.\r\n\t   */\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    this.invalidatePending();\r\n\t    // Do not defer cleanup when unbinding\r\n\t    this.unbuild();\r\n\t    // destroy all keep-alive cached instances\r\n\t    if (this.cache) {\r\n\t      for (var key in this.cache) {\r\n\t        this.cache[key].$destroy();\r\n\t      }\r\n\t      this.cache = null;\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Call activate hooks in order (asynchronous)\r\n\t *\r\n\t * @param {Array} hooks\r\n\t * @param {Vue} vm\r\n\t * @param {Function} cb\r\n\t */\r\n\t\r\n\tfunction callActivateHooks(hooks, vm, cb) {\r\n\t  var total = hooks.length;\r\n\t  var called = 0;\r\n\t  hooks[0].call(vm, next);\r\n\t  function next() {\r\n\t    if (++called >= total) {\r\n\t      cb();\r\n\t    } else {\r\n\t      hooks[called].call(vm, next);\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tvar propBindingModes = config._propBindingModes;\r\n\tvar empty = {};\r\n\t\r\n\t// regexes\r\n\tvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\r\n\tvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\r\n\t\r\n\t/**\r\n\t * Compile props on a root element and return\r\n\t * a props link function.\r\n\t *\r\n\t * @param {Element|DocumentFragment} el\r\n\t * @param {Array} propOptions\r\n\t * @param {Vue} vm\r\n\t * @return {Function} propsLinkFn\r\n\t */\r\n\t\r\n\tfunction compileProps(el, propOptions, vm) {\r\n\t  var props = [];\r\n\t  var propsData = vm.$options.propsData;\r\n\t  var names = Object.keys(propOptions);\r\n\t  var i = names.length;\r\n\t  var options, name, attr, value, path, parsed, prop;\r\n\t  while (i--) {\r\n\t    name = names[i];\r\n\t    options = propOptions[name] || empty;\r\n\t\r\n\t    if (false) {\r\n\t      warn('Do not use $data as prop.', vm);\r\n\t      continue;\r\n\t    }\r\n\t\r\n\t    // props could contain dashes, which will be\r\n\t    // interpreted as minus calculations by the parser\r\n\t    // so we need to camelize the path here\r\n\t    path = camelize(name);\r\n\t    if (!identRE$1.test(path)) {\r\n\t      (\"production\") !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\r\n\t      continue;\r\n\t    }\r\n\t\r\n\t    prop = {\r\n\t      name: name,\r\n\t      path: path,\r\n\t      options: options,\r\n\t      mode: propBindingModes.ONE_WAY,\r\n\t      raw: null\r\n\t    };\r\n\t\r\n\t    attr = hyphenate(name);\r\n\t    // first check dynamic version\r\n\t    if ((value = getBindAttr(el, attr)) === null) {\r\n\t      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\r\n\t        prop.mode = propBindingModes.TWO_WAY;\r\n\t      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\r\n\t        prop.mode = propBindingModes.ONE_TIME;\r\n\t      }\r\n\t    }\r\n\t    if (value !== null) {\r\n\t      // has dynamic binding!\r\n\t      prop.raw = value;\r\n\t      parsed = parseDirective(value);\r\n\t      value = parsed.expression;\r\n\t      prop.filters = parsed.filters;\r\n\t      // check binding type\r\n\t      if (isLiteral(value) && !parsed.filters) {\r\n\t        // for expressions containing literal numbers and\r\n\t        // booleans, there's no need to setup a prop binding,\r\n\t        // so we can optimize them as a one-time set.\r\n\t        prop.optimizedLiteral = true;\r\n\t      } else {\r\n\t        prop.dynamic = true;\r\n\t        // check non-settable path for two-way bindings\r\n\t        if (false) {\r\n\t          prop.mode = propBindingModes.ONE_WAY;\r\n\t          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\r\n\t        }\r\n\t      }\r\n\t      prop.parentPath = value;\r\n\t\r\n\t      // warn required two-way\r\n\t      if (false) {\r\n\t        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\r\n\t      }\r\n\t    } else if ((value = getAttr(el, attr)) !== null) {\r\n\t      // has literal binding!\r\n\t      prop.raw = value;\r\n\t    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\r\n\t      // has propsData\r\n\t      prop.raw = value;\r\n\t    } else if (false) {\r\n\t      // check possible camelCase prop usage\r\n\t      var lowerCaseName = path.toLowerCase();\r\n\t      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\r\n\t      if (value) {\r\n\t        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\r\n\t      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\r\n\t        // warn missing required\r\n\t        warn('Missing required prop: ' + name, vm);\r\n\t      }\r\n\t    }\r\n\t    // push prop\r\n\t    props.push(prop);\r\n\t  }\r\n\t  return makePropsLinkFn(props);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Build a function that applies props to a vm.\r\n\t *\r\n\t * @param {Array} props\r\n\t * @return {Function} propsLinkFn\r\n\t */\r\n\t\r\n\tfunction makePropsLinkFn(props) {\r\n\t  return function propsLinkFn(vm, scope) {\r\n\t    // store resolved props info\r\n\t    vm._props = {};\r\n\t    var inlineProps = vm.$options.propsData;\r\n\t    var i = props.length;\r\n\t    var prop, path, options, value, raw;\r\n\t    while (i--) {\r\n\t      prop = props[i];\r\n\t      raw = prop.raw;\r\n\t      path = prop.path;\r\n\t      options = prop.options;\r\n\t      vm._props[path] = prop;\r\n\t      if (inlineProps && hasOwn(inlineProps, path)) {\r\n\t        initProp(vm, prop, inlineProps[path]);\r\n\t      }if (raw === null) {\r\n\t        // initialize absent prop\r\n\t        initProp(vm, prop, undefined);\r\n\t      } else if (prop.dynamic) {\r\n\t        // dynamic prop\r\n\t        if (prop.mode === propBindingModes.ONE_TIME) {\r\n\t          // one time binding\r\n\t          value = (scope || vm._context || vm).$get(prop.parentPath);\r\n\t          initProp(vm, prop, value);\r\n\t        } else {\r\n\t          if (vm._context) {\r\n\t            // dynamic binding\r\n\t            vm._bindDir({\r\n\t              name: 'prop',\r\n\t              def: propDef,\r\n\t              prop: prop\r\n\t            }, null, null, scope); // el, host, scope\r\n\t          } else {\r\n\t              // root instance\r\n\t              initProp(vm, prop, vm.$get(prop.parentPath));\r\n\t            }\r\n\t        }\r\n\t      } else if (prop.optimizedLiteral) {\r\n\t        // optimized literal, cast it and just set once\r\n\t        var stripped = stripQuotes(raw);\r\n\t        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\r\n\t        initProp(vm, prop, value);\r\n\t      } else {\r\n\t        // string literal, but we need to cater for\r\n\t        // Boolean props with no value, or with same\r\n\t        // literal value (e.g. disabled=\"disabled\")\r\n\t        // see https://github.com/vuejs/vue-loader/issues/182\r\n\t        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\r\n\t        initProp(vm, prop, value);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Process a prop with a rawValue, applying necessary coersions,\r\n\t * default values & assertions and call the given callback with\r\n\t * processed value.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Object} prop\r\n\t * @param {*} rawValue\r\n\t * @param {Function} fn\r\n\t */\r\n\t\r\n\tfunction processPropValue(vm, prop, rawValue, fn) {\r\n\t  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\r\n\t  var value = rawValue;\r\n\t  if (value === undefined) {\r\n\t    value = getPropDefaultValue(vm, prop);\r\n\t  }\r\n\t  value = coerceProp(prop, value, vm);\r\n\t  var coerced = value !== rawValue;\r\n\t  if (!assertProp(prop, value, vm)) {\r\n\t    value = undefined;\r\n\t  }\r\n\t  if (isSimple && !coerced) {\r\n\t    withoutConversion(function () {\r\n\t      fn(value);\r\n\t    });\r\n\t  } else {\r\n\t    fn(value);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set a prop's initial value on a vm and its data object.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Object} prop\r\n\t * @param {*} value\r\n\t */\r\n\t\r\n\tfunction initProp(vm, prop, value) {\r\n\t  processPropValue(vm, prop, value, function (value) {\r\n\t    defineReactive(vm, prop.path, value);\r\n\t  });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Update a prop's value on a vm.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Object} prop\r\n\t * @param {*} value\r\n\t */\r\n\t\r\n\tfunction updateProp(vm, prop, value) {\r\n\t  processPropValue(vm, prop, value, function (value) {\r\n\t    vm[prop.path] = value;\r\n\t  });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get the default value of a prop.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Object} prop\r\n\t * @return {*}\r\n\t */\r\n\t\r\n\tfunction getPropDefaultValue(vm, prop) {\r\n\t  // no default, return undefined\r\n\t  var options = prop.options;\r\n\t  if (!hasOwn(options, 'default')) {\r\n\t    // absent boolean value defaults to false\r\n\t    return options.type === Boolean ? false : undefined;\r\n\t  }\r\n\t  var def = options['default'];\r\n\t  // warn against non-factory defaults for Object & Array\r\n\t  if (isObject(def)) {\r\n\t    (\"production\") !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\r\n\t  }\r\n\t  // call factory function for non-Function types\r\n\t  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Assert whether a prop is valid.\r\n\t *\r\n\t * @param {Object} prop\r\n\t * @param {*} value\r\n\t * @param {Vue} vm\r\n\t */\r\n\t\r\n\tfunction assertProp(prop, value, vm) {\r\n\t  if (!prop.options.required && ( // non-required\r\n\t  prop.raw === null || // abscent\r\n\t  value == null) // null or undefined\r\n\t  ) {\r\n\t      return true;\r\n\t    }\r\n\t  var options = prop.options;\r\n\t  var type = options.type;\r\n\t  var valid = !type;\r\n\t  var expectedTypes = [];\r\n\t  if (type) {\r\n\t    if (!isArray(type)) {\r\n\t      type = [type];\r\n\t    }\r\n\t    for (var i = 0; i < type.length && !valid; i++) {\r\n\t      var assertedType = assertType(value, type[i]);\r\n\t      expectedTypes.push(assertedType.expectedType);\r\n\t      valid = assertedType.valid;\r\n\t    }\r\n\t  }\r\n\t  if (!valid) {\r\n\t    if (false) {\r\n\t      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\r\n\t    }\r\n\t    return false;\r\n\t  }\r\n\t  var validator = options.validator;\r\n\t  if (validator) {\r\n\t    if (!validator(value)) {\r\n\t      (\"production\") !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\r\n\t      return false;\r\n\t    }\r\n\t  }\r\n\t  return true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Force parsing value with coerce option.\r\n\t *\r\n\t * @param {*} value\r\n\t * @param {Object} options\r\n\t * @return {*}\r\n\t */\r\n\t\r\n\tfunction coerceProp(prop, value, vm) {\r\n\t  var coerce = prop.options.coerce;\r\n\t  if (!coerce) {\r\n\t    return value;\r\n\t  }\r\n\t  if (typeof coerce === 'function') {\r\n\t    return coerce(value);\r\n\t  } else {\r\n\t    (\"production\") !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\r\n\t    return value;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Assert the type of a value\r\n\t *\r\n\t * @param {*} value\r\n\t * @param {Function} type\r\n\t * @return {Object}\r\n\t */\r\n\t\r\n\tfunction assertType(value, type) {\r\n\t  var valid;\r\n\t  var expectedType;\r\n\t  if (type === String) {\r\n\t    expectedType = 'string';\r\n\t    valid = typeof value === expectedType;\r\n\t  } else if (type === Number) {\r\n\t    expectedType = 'number';\r\n\t    valid = typeof value === expectedType;\r\n\t  } else if (type === Boolean) {\r\n\t    expectedType = 'boolean';\r\n\t    valid = typeof value === expectedType;\r\n\t  } else if (type === Function) {\r\n\t    expectedType = 'function';\r\n\t    valid = typeof value === expectedType;\r\n\t  } else if (type === Object) {\r\n\t    expectedType = 'object';\r\n\t    valid = isPlainObject(value);\r\n\t  } else if (type === Array) {\r\n\t    expectedType = 'array';\r\n\t    valid = isArray(value);\r\n\t  } else {\r\n\t    valid = value instanceof type;\r\n\t  }\r\n\t  return {\r\n\t    valid: valid,\r\n\t    expectedType: expectedType\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format type for output\r\n\t *\r\n\t * @param {String} type\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction formatType(type) {\r\n\t  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\r\n\t}\r\n\t\r\n\t/**\r\n\t * Format value\r\n\t *\r\n\t * @param {*} value\r\n\t * @return {String}\r\n\t */\r\n\t\r\n\tfunction formatValue(val) {\r\n\t  return Object.prototype.toString.call(val).slice(8, -1);\r\n\t}\r\n\t\r\n\tvar bindingModes = config._propBindingModes;\r\n\t\r\n\tvar propDef = {\r\n\t\r\n\t  bind: function bind() {\r\n\t    var child = this.vm;\r\n\t    var parent = child._context;\r\n\t    // passed in from compiler directly\r\n\t    var prop = this.descriptor.prop;\r\n\t    var childKey = prop.path;\r\n\t    var parentKey = prop.parentPath;\r\n\t    var twoWay = prop.mode === bindingModes.TWO_WAY;\r\n\t\r\n\t    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\r\n\t      updateProp(child, prop, val);\r\n\t    }, {\r\n\t      twoWay: twoWay,\r\n\t      filters: prop.filters,\r\n\t      // important: props need to be observed on the\r\n\t      // v-for scope if present\r\n\t      scope: this._scope\r\n\t    });\r\n\t\r\n\t    // set the child initial value.\r\n\t    initProp(child, prop, parentWatcher.value);\r\n\t\r\n\t    // setup two-way binding\r\n\t    if (twoWay) {\r\n\t      // important: defer the child watcher creation until\r\n\t      // the created hook (after data observation)\r\n\t      var self = this;\r\n\t      child.$once('pre-hook:created', function () {\r\n\t        self.childWatcher = new Watcher(child, childKey, function (val) {\r\n\t          parentWatcher.set(val);\r\n\t        }, {\r\n\t          // ensure sync upward before parent sync down.\r\n\t          // this is necessary in cases e.g. the child\r\n\t          // mutates a prop array, then replaces it. (#1683)\r\n\t          sync: true\r\n\t        });\r\n\t      });\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    this.parentWatcher.teardown();\r\n\t    if (this.childWatcher) {\r\n\t      this.childWatcher.teardown();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar queue$1 = [];\r\n\tvar queued = false;\r\n\t\r\n\t/**\r\n\t * Push a job into the queue.\r\n\t *\r\n\t * @param {Function} job\r\n\t */\r\n\t\r\n\tfunction pushJob(job) {\r\n\t  queue$1.push(job);\r\n\t  if (!queued) {\r\n\t    queued = true;\r\n\t    nextTick(flush);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Flush the queue, and do one forced reflow before\r\n\t * triggering transitions.\r\n\t */\r\n\t\r\n\tfunction flush() {\r\n\t  // Force layout\r\n\t  var f = document.documentElement.offsetHeight;\r\n\t  for (var i = 0; i < queue$1.length; i++) {\r\n\t    queue$1[i]();\r\n\t  }\r\n\t  queue$1 = [];\r\n\t  queued = false;\r\n\t  // dummy return, so js linters don't complain about\r\n\t  // unused variable f\r\n\t  return f;\r\n\t}\r\n\t\r\n\tvar TYPE_TRANSITION = 'transition';\r\n\tvar TYPE_ANIMATION = 'animation';\r\n\tvar transDurationProp = transitionProp + 'Duration';\r\n\tvar animDurationProp = animationProp + 'Duration';\r\n\t\r\n\t/**\r\n\t * If a just-entered element is applied the\r\n\t * leave class while its enter transition hasn't started yet,\r\n\t * and the transitioned property has the same value for both\r\n\t * enter/leave, then the leave transition will be skipped and\r\n\t * the transitionend event never fires. This function ensures\r\n\t * its callback to be called after a transition has started\r\n\t * by waiting for double raf.\r\n\t *\r\n\t * It falls back to setTimeout on devices that support CSS\r\n\t * transitions but not raf (e.g. Android 4.2 browser) - since\r\n\t * these environments are usually slow, we are giving it a\r\n\t * relatively large timeout.\r\n\t */\r\n\t\r\n\tvar raf = inBrowser && window.requestAnimationFrame;\r\n\tvar waitForTransitionStart = raf\r\n\t/* istanbul ignore next */\r\n\t? function (fn) {\r\n\t  raf(function () {\r\n\t    raf(fn);\r\n\t  });\r\n\t} : function (fn) {\r\n\t  setTimeout(fn, 50);\r\n\t};\r\n\t\r\n\t/**\r\n\t * A Transition object that encapsulates the state and logic\r\n\t * of the transition.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} id\r\n\t * @param {Object} hooks\r\n\t * @param {Vue} vm\r\n\t */\r\n\tfunction Transition(el, id, hooks, vm) {\r\n\t  this.id = id;\r\n\t  this.el = el;\r\n\t  this.enterClass = hooks && hooks.enterClass || id + '-enter';\r\n\t  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\r\n\t  this.hooks = hooks;\r\n\t  this.vm = vm;\r\n\t  // async state\r\n\t  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\r\n\t  this.justEntered = false;\r\n\t  this.entered = this.left = false;\r\n\t  this.typeCache = {};\r\n\t  // check css transition type\r\n\t  this.type = hooks && hooks.type;\r\n\t  /* istanbul ignore if */\r\n\t  if (false) {\r\n\t    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\r\n\t      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\r\n\t    }\r\n\t  }\r\n\t  // bind\r\n\t  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\r\n\t    self[m] = bind(self[m], self);\r\n\t  });\r\n\t}\r\n\t\r\n\tvar p$1 = Transition.prototype;\r\n\t\r\n\t/**\r\n\t * Start an entering transition.\r\n\t *\r\n\t * 1. enter transition triggered\r\n\t * 2. call beforeEnter hook\r\n\t * 3. add enter class\r\n\t * 4. insert/show element\r\n\t * 5. call enter hook (with possible explicit js callback)\r\n\t * 6. reflow\r\n\t * 7. based on transition type:\r\n\t *    - transition:\r\n\t *        remove class now, wait for transitionend,\r\n\t *        then done if there's no explicit js callback.\r\n\t *    - animation:\r\n\t *        wait for animationend, remove class,\r\n\t *        then done if there's no explicit js callback.\r\n\t *    - no css transition:\r\n\t *        done now if there's no explicit js callback.\r\n\t * 8. wait for either done or js callback, then call\r\n\t *    afterEnter hook.\r\n\t *\r\n\t * @param {Function} op - insert/show the element\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tp$1.enter = function (op, cb) {\r\n\t  this.cancelPending();\r\n\t  this.callHook('beforeEnter');\r\n\t  this.cb = cb;\r\n\t  addClass(this.el, this.enterClass);\r\n\t  op();\r\n\t  this.entered = false;\r\n\t  this.callHookWithCb('enter');\r\n\t  if (this.entered) {\r\n\t    return; // user called done synchronously.\r\n\t  }\r\n\t  this.cancel = this.hooks && this.hooks.enterCancelled;\r\n\t  pushJob(this.enterNextTick);\r\n\t};\r\n\t\r\n\t/**\r\n\t * The \"nextTick\" phase of an entering transition, which is\r\n\t * to be pushed into a queue and executed after a reflow so\r\n\t * that removing the class can trigger a CSS transition.\r\n\t */\r\n\t\r\n\tp$1.enterNextTick = function () {\r\n\t  var _this = this;\r\n\t\r\n\t  // prevent transition skipping\r\n\t  this.justEntered = true;\r\n\t  waitForTransitionStart(function () {\r\n\t    _this.justEntered = false;\r\n\t  });\r\n\t  var enterDone = this.enterDone;\r\n\t  var type = this.getCssTransitionType(this.enterClass);\r\n\t  if (!this.pendingJsCb) {\r\n\t    if (type === TYPE_TRANSITION) {\r\n\t      // trigger transition by removing enter class now\r\n\t      removeClass(this.el, this.enterClass);\r\n\t      this.setupCssCb(transitionEndEvent, enterDone);\r\n\t    } else if (type === TYPE_ANIMATION) {\r\n\t      this.setupCssCb(animationEndEvent, enterDone);\r\n\t    } else {\r\n\t      enterDone();\r\n\t    }\r\n\t  } else if (type === TYPE_TRANSITION) {\r\n\t    removeClass(this.el, this.enterClass);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * The \"cleanup\" phase of an entering transition.\r\n\t */\r\n\t\r\n\tp$1.enterDone = function () {\r\n\t  this.entered = true;\r\n\t  this.cancel = this.pendingJsCb = null;\r\n\t  removeClass(this.el, this.enterClass);\r\n\t  this.callHook('afterEnter');\r\n\t  if (this.cb) this.cb();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Start a leaving transition.\r\n\t *\r\n\t * 1. leave transition triggered.\r\n\t * 2. call beforeLeave hook\r\n\t * 3. add leave class (trigger css transition)\r\n\t * 4. call leave hook (with possible explicit js callback)\r\n\t * 5. reflow if no explicit js callback is provided\r\n\t * 6. based on transition type:\r\n\t *    - transition or animation:\r\n\t *        wait for end event, remove class, then done if\r\n\t *        there's no explicit js callback.\r\n\t *    - no css transition:\r\n\t *        done if there's no explicit js callback.\r\n\t * 7. wait for either done or js callback, then call\r\n\t *    afterLeave hook.\r\n\t *\r\n\t * @param {Function} op - remove/hide the element\r\n\t * @param {Function} [cb]\r\n\t */\r\n\t\r\n\tp$1.leave = function (op, cb) {\r\n\t  this.cancelPending();\r\n\t  this.callHook('beforeLeave');\r\n\t  this.op = op;\r\n\t  this.cb = cb;\r\n\t  addClass(this.el, this.leaveClass);\r\n\t  this.left = false;\r\n\t  this.callHookWithCb('leave');\r\n\t  if (this.left) {\r\n\t    return; // user called done synchronously.\r\n\t  }\r\n\t  this.cancel = this.hooks && this.hooks.leaveCancelled;\r\n\t  // only need to handle leaveDone if\r\n\t  // 1. the transition is already done (synchronously called\r\n\t  //    by the user, which causes this.op set to null)\r\n\t  // 2. there's no explicit js callback\r\n\t  if (this.op && !this.pendingJsCb) {\r\n\t    // if a CSS transition leaves immediately after enter,\r\n\t    // the transitionend event never fires. therefore we\r\n\t    // detect such cases and end the leave immediately.\r\n\t    if (this.justEntered) {\r\n\t      this.leaveDone();\r\n\t    } else {\r\n\t      pushJob(this.leaveNextTick);\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * The \"nextTick\" phase of a leaving transition.\r\n\t */\r\n\t\r\n\tp$1.leaveNextTick = function () {\r\n\t  var type = this.getCssTransitionType(this.leaveClass);\r\n\t  if (type) {\r\n\t    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\r\n\t    this.setupCssCb(event, this.leaveDone);\r\n\t  } else {\r\n\t    this.leaveDone();\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * The \"cleanup\" phase of a leaving transition.\r\n\t */\r\n\t\r\n\tp$1.leaveDone = function () {\r\n\t  this.left = true;\r\n\t  this.cancel = this.pendingJsCb = null;\r\n\t  this.op();\r\n\t  removeClass(this.el, this.leaveClass);\r\n\t  this.callHook('afterLeave');\r\n\t  if (this.cb) this.cb();\r\n\t  this.op = null;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Cancel any pending callbacks from a previously running\r\n\t * but not finished transition.\r\n\t */\r\n\t\r\n\tp$1.cancelPending = function () {\r\n\t  this.op = this.cb = null;\r\n\t  var hasPending = false;\r\n\t  if (this.pendingCssCb) {\r\n\t    hasPending = true;\r\n\t    off(this.el, this.pendingCssEvent, this.pendingCssCb);\r\n\t    this.pendingCssEvent = this.pendingCssCb = null;\r\n\t  }\r\n\t  if (this.pendingJsCb) {\r\n\t    hasPending = true;\r\n\t    this.pendingJsCb.cancel();\r\n\t    this.pendingJsCb = null;\r\n\t  }\r\n\t  if (hasPending) {\r\n\t    removeClass(this.el, this.enterClass);\r\n\t    removeClass(this.el, this.leaveClass);\r\n\t  }\r\n\t  if (this.cancel) {\r\n\t    this.cancel.call(this.vm, this.el);\r\n\t    this.cancel = null;\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Call a user-provided synchronous hook function.\r\n\t *\r\n\t * @param {String} type\r\n\t */\r\n\t\r\n\tp$1.callHook = function (type) {\r\n\t  if (this.hooks && this.hooks[type]) {\r\n\t    this.hooks[type].call(this.vm, this.el);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Call a user-provided, potentially-async hook function.\r\n\t * We check for the length of arguments to see if the hook\r\n\t * expects a `done` callback. If true, the transition's end\r\n\t * will be determined by when the user calls that callback;\r\n\t * otherwise, the end is determined by the CSS transition or\r\n\t * animation.\r\n\t *\r\n\t * @param {String} type\r\n\t */\r\n\t\r\n\tp$1.callHookWithCb = function (type) {\r\n\t  var hook = this.hooks && this.hooks[type];\r\n\t  if (hook) {\r\n\t    if (hook.length > 1) {\r\n\t      this.pendingJsCb = cancellable(this[type + 'Done']);\r\n\t    }\r\n\t    hook.call(this.vm, this.el, this.pendingJsCb);\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Get an element's transition type based on the\r\n\t * calculated styles.\r\n\t *\r\n\t * @param {String} className\r\n\t * @return {Number}\r\n\t */\r\n\t\r\n\tp$1.getCssTransitionType = function (className) {\r\n\t  /* istanbul ignore if */\r\n\t  if (!transitionEndEvent ||\r\n\t  // skip CSS transitions if page is not visible -\r\n\t  // this solves the issue of transitionend events not\r\n\t  // firing until the page is visible again.\r\n\t  // pageVisibility API is supported in IE10+, same as\r\n\t  // CSS transitions.\r\n\t  document.hidden ||\r\n\t  // explicit js-only transition\r\n\t  this.hooks && this.hooks.css === false ||\r\n\t  // element is hidden\r\n\t  isHidden(this.el)) {\r\n\t    return;\r\n\t  }\r\n\t  var type = this.type || this.typeCache[className];\r\n\t  if (type) return type;\r\n\t  var inlineStyles = this.el.style;\r\n\t  var computedStyles = window.getComputedStyle(this.el);\r\n\t  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\r\n\t  if (transDuration && transDuration !== '0s') {\r\n\t    type = TYPE_TRANSITION;\r\n\t  } else {\r\n\t    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\r\n\t    if (animDuration && animDuration !== '0s') {\r\n\t      type = TYPE_ANIMATION;\r\n\t    }\r\n\t  }\r\n\t  if (type) {\r\n\t    this.typeCache[className] = type;\r\n\t  }\r\n\t  return type;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Setup a CSS transitionend/animationend callback.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} cb\r\n\t */\r\n\t\r\n\tp$1.setupCssCb = function (event, cb) {\r\n\t  this.pendingCssEvent = event;\r\n\t  var self = this;\r\n\t  var el = this.el;\r\n\t  var onEnd = this.pendingCssCb = function (e) {\r\n\t    if (e.target === el) {\r\n\t      off(el, event, onEnd);\r\n\t      self.pendingCssEvent = self.pendingCssCb = null;\r\n\t      if (!self.pendingJsCb && cb) {\r\n\t        cb();\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t  on(el, event, onEnd);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Check if an element is hidden - in that case we can just\r\n\t * skip the transition alltogether.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction isHidden(el) {\r\n\t  if (/svg$/.test(el.namespaceURI)) {\r\n\t    // SVG elements do not have offset(Width|Height)\r\n\t    // so we need to check the client rect\r\n\t    var rect = el.getBoundingClientRect();\r\n\t    return !(rect.width || rect.height);\r\n\t  } else {\r\n\t    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\r\n\t  }\r\n\t}\r\n\t\r\n\tvar transition$1 = {\r\n\t\r\n\t  priority: TRANSITION,\r\n\t\r\n\t  update: function update(id, oldId) {\r\n\t    var el = this.el;\r\n\t    // resolve on owner vm\r\n\t    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\r\n\t    id = id || 'v';\r\n\t    oldId = oldId || 'v';\r\n\t    el.__v_trans = new Transition(el, id, hooks, this.vm);\r\n\t    removeClass(el, oldId + '-transition');\r\n\t    addClass(el, id + '-transition');\r\n\t  }\r\n\t};\r\n\t\r\n\tvar internalDirectives = {\r\n\t  style: style,\r\n\t  'class': vClass,\r\n\t  component: component,\r\n\t  prop: propDef,\r\n\t  transition: transition$1\r\n\t};\r\n\t\r\n\t// special binding prefixes\r\n\tvar bindRE = /^v-bind:|^:/;\r\n\tvar onRE = /^v-on:|^@/;\r\n\tvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\r\n\tvar modifierRE = /\\.[^\\.]+/g;\r\n\tvar transitionRE = /^(v-bind:|:)?transition$/;\r\n\t\r\n\t// default directive priority\r\n\tvar DEFAULT_PRIORITY = 1000;\r\n\tvar DEFAULT_TERMINAL_PRIORITY = 2000;\r\n\t\r\n\t/**\r\n\t * Compile a template and return a reusable composite link\r\n\t * function, which recursively contains more link functions\r\n\t * inside. This top level compile function would normally\r\n\t * be called on instance root nodes, but can also be used\r\n\t * for partial compilation if the partial argument is true.\r\n\t *\r\n\t * The returned composite link function, when called, will\r\n\t * return an unlink function that tearsdown all directives\r\n\t * created during the linking phase.\r\n\t *\r\n\t * @param {Element|DocumentFragment} el\r\n\t * @param {Object} options\r\n\t * @param {Boolean} partial\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction compile(el, options, partial) {\r\n\t  // link function for the node itself.\r\n\t  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\r\n\t  // link function for the childNodes\r\n\t  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\r\n\t\r\n\t  /**\r\n\t   * A composite linker function to be called on a already\r\n\t   * compiled piece of DOM, which instantiates all directive\r\n\t   * instances.\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {Element|DocumentFragment} el\r\n\t   * @param {Vue} [host] - host vm of transcluded content\r\n\t   * @param {Object} [scope] - v-for scope\r\n\t   * @param {Fragment} [frag] - link context fragment\r\n\t   * @return {Function|undefined}\r\n\t   */\r\n\t\r\n\t  return function compositeLinkFn(vm, el, host, scope, frag) {\r\n\t    // cache childNodes before linking parent, fix #657\r\n\t    var childNodes = toArray(el.childNodes);\r\n\t    // link\r\n\t    var dirs = linkAndCapture(function compositeLinkCapturer() {\r\n\t      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\r\n\t      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\r\n\t    }, vm);\r\n\t    return makeUnlinkFn(vm, dirs);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Apply a linker to a vm/element pair and capture the\r\n\t * directives created during the process.\r\n\t *\r\n\t * @param {Function} linker\r\n\t * @param {Vue} vm\r\n\t */\r\n\t\r\n\tfunction linkAndCapture(linker, vm) {\r\n\t  /* istanbul ignore if */\r\n\t  if (true) {\r\n\t    // reset directives before every capture in production\r\n\t    // mode, so that when unlinking we don't need to splice\r\n\t    // them out (which turns out to be a perf hit).\r\n\t    // they are kept in development mode because they are\r\n\t    // useful for Vue's own tests.\r\n\t    vm._directives = [];\r\n\t  }\r\n\t  var originalDirCount = vm._directives.length;\r\n\t  linker();\r\n\t  var dirs = vm._directives.slice(originalDirCount);\r\n\t  sortDirectives(dirs);\r\n\t  for (var i = 0, l = dirs.length; i < l; i++) {\r\n\t    dirs[i]._bind();\r\n\t  }\r\n\t  return dirs;\r\n\t}\r\n\t\r\n\t/**\r\n\t * sort directives by priority (stable sort)\r\n\t *\r\n\t * @param {Array} dirs\r\n\t */\r\n\tfunction sortDirectives(dirs) {\r\n\t  if (dirs.length === 0) return;\r\n\t\r\n\t  var groupedMap = {};\r\n\t  var i, j, k, l;\r\n\t  var index = 0;\r\n\t  var priorities = [];\r\n\t  for (i = 0, j = dirs.length; i < j; i++) {\r\n\t    var dir = dirs[i];\r\n\t    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\r\n\t    var array = groupedMap[priority];\r\n\t    if (!array) {\r\n\t      array = groupedMap[priority] = [];\r\n\t      priorities.push(priority);\r\n\t    }\r\n\t    array.push(dir);\r\n\t  }\r\n\t\r\n\t  priorities.sort(function (a, b) {\r\n\t    return a > b ? -1 : a === b ? 0 : 1;\r\n\t  });\r\n\t  for (i = 0, j = priorities.length; i < j; i++) {\r\n\t    var group = groupedMap[priorities[i]];\r\n\t    for (k = 0, l = group.length; k < l; k++) {\r\n\t      dirs[index++] = group[k];\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Linker functions return an unlink function that\r\n\t * tearsdown all directives instances generated during\r\n\t * the process.\r\n\t *\r\n\t * We create unlink functions with only the necessary\r\n\t * information to avoid retaining additional closures.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Array} dirs\r\n\t * @param {Vue} [context]\r\n\t * @param {Array} [contextDirs]\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\r\n\t  function unlink(destroying) {\r\n\t    teardownDirs(vm, dirs, destroying);\r\n\t    if (context && contextDirs) {\r\n\t      teardownDirs(context, contextDirs);\r\n\t    }\r\n\t  }\r\n\t  // expose linked directives\r\n\t  unlink.dirs = dirs;\r\n\t  return unlink;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Teardown partial linked directives.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Array} dirs\r\n\t * @param {Boolean} destroying\r\n\t */\r\n\t\r\n\tfunction teardownDirs(vm, dirs, destroying) {\r\n\t  var i = dirs.length;\r\n\t  while (i--) {\r\n\t    dirs[i]._teardown();\r\n\t    if (false) {\r\n\t      vm._directives.$remove(dirs[i]);\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile link props on an instance.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Element} el\r\n\t * @param {Object} props\r\n\t * @param {Object} [scope]\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction compileAndLinkProps(vm, el, props, scope) {\r\n\t  var propsLinkFn = compileProps(el, props, vm);\r\n\t  var propDirs = linkAndCapture(function () {\r\n\t    propsLinkFn(vm, scope);\r\n\t  }, vm);\r\n\t  return makeUnlinkFn(vm, propDirs);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile the root element of an instance.\r\n\t *\r\n\t * 1. attrs on context container (context scope)\r\n\t * 2. attrs on the component template root node, if\r\n\t *    replace:true (child scope)\r\n\t *\r\n\t * If this is a fragment instance, we only need to compile 1.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @param {Object} contextOptions\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction compileRoot(el, options, contextOptions) {\r\n\t  var containerAttrs = options._containerAttrs;\r\n\t  var replacerAttrs = options._replacerAttrs;\r\n\t  var contextLinkFn, replacerLinkFn;\r\n\t\r\n\t  // only need to compile other attributes for\r\n\t  // non-fragment instances\r\n\t  if (el.nodeType !== 11) {\r\n\t    // for components, container and replacer need to be\r\n\t    // compiled separately and linked in different scopes.\r\n\t    if (options._asComponent) {\r\n\t      // 2. container attributes\r\n\t      if (containerAttrs && contextOptions) {\r\n\t        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\r\n\t      }\r\n\t      if (replacerAttrs) {\r\n\t        // 3. replacer attributes\r\n\t        replacerLinkFn = compileDirectives(replacerAttrs, options);\r\n\t      }\r\n\t    } else {\r\n\t      // non-component, just compile as a normal element.\r\n\t      replacerLinkFn = compileDirectives(el.attributes, options);\r\n\t    }\r\n\t  } else if (false) {\r\n\t    // warn container directives for fragment instances\r\n\t    var names = containerAttrs.filter(function (attr) {\r\n\t      // allow vue-loader/vueify scoped css attributes\r\n\t      return attr.name.indexOf('_v-') < 0 &&\r\n\t      // allow event listeners\r\n\t      !onRE.test(attr.name) &&\r\n\t      // allow slots\r\n\t      attr.name !== 'slot';\r\n\t    }).map(function (attr) {\r\n\t      return '\"' + attr.name + '\"';\r\n\t    });\r\n\t    if (names.length) {\r\n\t      var plural = names.length > 1;\r\n\t\r\n\t      var componentName = options.el.tagName.toLowerCase();\r\n\t      if (componentName === 'component' && options.name) {\r\n\t        componentName += ':' + options.name;\r\n\t      }\r\n\t\r\n\t      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\r\n\t    }\r\n\t  }\r\n\t\r\n\t  options._containerAttrs = options._replacerAttrs = null;\r\n\t  return function rootLinkFn(vm, el, scope) {\r\n\t    // link context scope dirs\r\n\t    var context = vm._context;\r\n\t    var contextDirs;\r\n\t    if (context && contextLinkFn) {\r\n\t      contextDirs = linkAndCapture(function () {\r\n\t        contextLinkFn(context, el, null, scope);\r\n\t      }, context);\r\n\t    }\r\n\t\r\n\t    // link self\r\n\t    var selfDirs = linkAndCapture(function () {\r\n\t      if (replacerLinkFn) replacerLinkFn(vm, el);\r\n\t    }, vm);\r\n\t\r\n\t    // return the unlink function that tearsdown context\r\n\t    // container directives.\r\n\t    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile a node and return a nodeLinkFn based on the\r\n\t * node type.\r\n\t *\r\n\t * @param {Node} node\r\n\t * @param {Object} options\r\n\t * @return {Function|null}\r\n\t */\r\n\t\r\n\tfunction compileNode(node, options) {\r\n\t  var type = node.nodeType;\r\n\t  if (type === 1 && !isScript(node)) {\r\n\t    return compileElement(node, options);\r\n\t  } else if (type === 3 && node.data.trim()) {\r\n\t    return compileTextNode(node, options);\r\n\t  } else {\r\n\t    return null;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile an element and return a nodeLinkFn.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Function|null}\r\n\t */\r\n\t\r\n\tfunction compileElement(el, options) {\r\n\t  // preprocess textareas.\r\n\t  // textarea treats its text content as the initial value.\r\n\t  // just bind it as an attr directive for value.\r\n\t  if (el.tagName === 'TEXTAREA') {\r\n\t    // a textarea which has v-pre attr should skip complie.\r\n\t    if (getAttr(el, 'v-pre') !== null) {\r\n\t      return skip;\r\n\t    }\r\n\t    var tokens = parseText(el.value);\r\n\t    if (tokens) {\r\n\t      el.setAttribute(':value', tokensToExp(tokens));\r\n\t      el.value = '';\r\n\t    }\r\n\t  }\r\n\t  var linkFn;\r\n\t  var hasAttrs = el.hasAttributes();\r\n\t  var attrs = hasAttrs && toArray(el.attributes);\r\n\t  // check terminal directives (for & if)\r\n\t  if (hasAttrs) {\r\n\t    linkFn = checkTerminalDirectives(el, attrs, options);\r\n\t  }\r\n\t  // check element directives\r\n\t  if (!linkFn) {\r\n\t    linkFn = checkElementDirectives(el, options);\r\n\t  }\r\n\t  // check component\r\n\t  if (!linkFn) {\r\n\t    linkFn = checkComponent(el, options);\r\n\t  }\r\n\t  // normal directives\r\n\t  if (!linkFn && hasAttrs) {\r\n\t    linkFn = compileDirectives(attrs, options);\r\n\t  }\r\n\t  return linkFn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile a textNode and return a nodeLinkFn.\r\n\t *\r\n\t * @param {TextNode} node\r\n\t * @param {Object} options\r\n\t * @return {Function|null} textNodeLinkFn\r\n\t */\r\n\t\r\n\tfunction compileTextNode(node, options) {\r\n\t  // skip marked text nodes\r\n\t  if (node._skip) {\r\n\t    return removeText;\r\n\t  }\r\n\t\r\n\t  var tokens = parseText(node.wholeText);\r\n\t  if (!tokens) {\r\n\t    return null;\r\n\t  }\r\n\t\r\n\t  // mark adjacent text nodes as skipped,\r\n\t  // because we are using node.wholeText to compile\r\n\t  // all adjacent text nodes together. This fixes\r\n\t  // issues in IE where sometimes it splits up a single\r\n\t  // text node into multiple ones.\r\n\t  var next = node.nextSibling;\r\n\t  while (next && next.nodeType === 3) {\r\n\t    next._skip = true;\r\n\t    next = next.nextSibling;\r\n\t  }\r\n\t\r\n\t  var frag = document.createDocumentFragment();\r\n\t  var el, token;\r\n\t  for (var i = 0, l = tokens.length; i < l; i++) {\r\n\t    token = tokens[i];\r\n\t    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\r\n\t    frag.appendChild(el);\r\n\t  }\r\n\t  return makeTextNodeLinkFn(tokens, frag, options);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Linker for an skipped text node.\r\n\t *\r\n\t * @param {Vue} vm\r\n\t * @param {Text} node\r\n\t */\r\n\t\r\n\tfunction removeText(vm, node) {\r\n\t  remove(node);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Process a single text token.\r\n\t *\r\n\t * @param {Object} token\r\n\t * @param {Object} options\r\n\t * @return {Node}\r\n\t */\r\n\t\r\n\tfunction processTextToken(token, options) {\r\n\t  var el;\r\n\t  if (token.oneTime) {\r\n\t    el = document.createTextNode(token.value);\r\n\t  } else {\r\n\t    if (token.html) {\r\n\t      el = document.createComment('v-html');\r\n\t      setTokenType('html');\r\n\t    } else {\r\n\t      // IE will clean up empty textNodes during\r\n\t      // frag.cloneNode(true), so we have to give it\r\n\t      // something here...\r\n\t      el = document.createTextNode(' ');\r\n\t      setTokenType('text');\r\n\t    }\r\n\t  }\r\n\t  function setTokenType(type) {\r\n\t    if (token.descriptor) return;\r\n\t    var parsed = parseDirective(token.value);\r\n\t    token.descriptor = {\r\n\t      name: type,\r\n\t      def: directives[type],\r\n\t      expression: parsed.expression,\r\n\t      filters: parsed.filters\r\n\t    };\r\n\t  }\r\n\t  return el;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Build a function that processes a textNode.\r\n\t *\r\n\t * @param {Array<Object>} tokens\r\n\t * @param {DocumentFragment} frag\r\n\t */\r\n\t\r\n\tfunction makeTextNodeLinkFn(tokens, frag) {\r\n\t  return function textNodeLinkFn(vm, el, host, scope) {\r\n\t    var fragClone = frag.cloneNode(true);\r\n\t    var childNodes = toArray(fragClone.childNodes);\r\n\t    var token, value, node;\r\n\t    for (var i = 0, l = tokens.length; i < l; i++) {\r\n\t      token = tokens[i];\r\n\t      value = token.value;\r\n\t      if (token.tag) {\r\n\t        node = childNodes[i];\r\n\t        if (token.oneTime) {\r\n\t          value = (scope || vm).$eval(value);\r\n\t          if (token.html) {\r\n\t            replace(node, parseTemplate(value, true));\r\n\t          } else {\r\n\t            node.data = _toString(value);\r\n\t          }\r\n\t        } else {\r\n\t          vm._bindDir(token.descriptor, node, host, scope);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    replace(el, fragClone);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile a node list and return a childLinkFn.\r\n\t *\r\n\t * @param {NodeList} nodeList\r\n\t * @param {Object} options\r\n\t * @return {Function|undefined}\r\n\t */\r\n\t\r\n\tfunction compileNodeList(nodeList, options) {\r\n\t  var linkFns = [];\r\n\t  var nodeLinkFn, childLinkFn, node;\r\n\t  for (var i = 0, l = nodeList.length; i < l; i++) {\r\n\t    node = nodeList[i];\r\n\t    nodeLinkFn = compileNode(node, options);\r\n\t    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\r\n\t    linkFns.push(nodeLinkFn, childLinkFn);\r\n\t  }\r\n\t  return linkFns.length ? makeChildLinkFn(linkFns) : null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Make a child link function for a node's childNodes.\r\n\t *\r\n\t * @param {Array<Function>} linkFns\r\n\t * @return {Function} childLinkFn\r\n\t */\r\n\t\r\n\tfunction makeChildLinkFn(linkFns) {\r\n\t  return function childLinkFn(vm, nodes, host, scope, frag) {\r\n\t    var node, nodeLinkFn, childrenLinkFn;\r\n\t    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\r\n\t      node = nodes[n];\r\n\t      nodeLinkFn = linkFns[i++];\r\n\t      childrenLinkFn = linkFns[i++];\r\n\t      // cache childNodes before linking parent, fix #657\r\n\t      var childNodes = toArray(node.childNodes);\r\n\t      if (nodeLinkFn) {\r\n\t        nodeLinkFn(vm, node, host, scope, frag);\r\n\t      }\r\n\t      if (childrenLinkFn) {\r\n\t        childrenLinkFn(vm, childNodes, host, scope, frag);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check for element directives (custom elements that should\r\n\t * be resovled as terminal directives).\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t */\r\n\t\r\n\tfunction checkElementDirectives(el, options) {\r\n\t  var tag = el.tagName.toLowerCase();\r\n\t  if (commonTagRE.test(tag)) {\r\n\t    return;\r\n\t  }\r\n\t  var def = resolveAsset(options, 'elementDirectives', tag);\r\n\t  if (def) {\r\n\t    return makeTerminalNodeLinkFn(el, tag, '', options, def);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an element is a component. If yes, return\r\n\t * a component link function.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Function|undefined}\r\n\t */\r\n\t\r\n\tfunction checkComponent(el, options) {\r\n\t  var component = checkComponentAttr(el, options);\r\n\t  if (component) {\r\n\t    var ref = findRef(el);\r\n\t    var descriptor = {\r\n\t      name: 'component',\r\n\t      ref: ref,\r\n\t      expression: component.id,\r\n\t      def: internalDirectives.component,\r\n\t      modifiers: {\r\n\t        literal: !component.dynamic\r\n\t      }\r\n\t    };\r\n\t    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\r\n\t      if (ref) {\r\n\t        defineReactive((scope || vm).$refs, ref, null);\r\n\t      }\r\n\t      vm._bindDir(descriptor, el, host, scope, frag);\r\n\t    };\r\n\t    componentLinkFn.terminal = true;\r\n\t    return componentLinkFn;\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check an element for terminal directives in fixed order.\r\n\t * If it finds one, return a terminal link function.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Array} attrs\r\n\t * @param {Object} options\r\n\t * @return {Function} terminalLinkFn\r\n\t */\r\n\t\r\n\tfunction checkTerminalDirectives(el, attrs, options) {\r\n\t  // skip v-pre\r\n\t  if (getAttr(el, 'v-pre') !== null) {\r\n\t    return skip;\r\n\t  }\r\n\t  // skip v-else block, but only if following v-if\r\n\t  if (el.hasAttribute('v-else')) {\r\n\t    var prev = el.previousElementSibling;\r\n\t    if (prev && prev.hasAttribute('v-if')) {\r\n\t      return skip;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\r\n\t  for (var i = 0, j = attrs.length; i < j; i++) {\r\n\t    attr = attrs[i];\r\n\t    name = attr.name.replace(modifierRE, '');\r\n\t    if (matched = name.match(dirAttrRE)) {\r\n\t      def = resolveAsset(options, 'directives', matched[1]);\r\n\t      if (def && def.terminal) {\r\n\t        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\r\n\t          termDef = def;\r\n\t          rawName = attr.name;\r\n\t          modifiers = parseModifiers(attr.name);\r\n\t          value = attr.value;\r\n\t          dirName = matched[1];\r\n\t          arg = matched[2];\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (termDef) {\r\n\t    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction skip() {}\r\n\tskip.terminal = true;\r\n\t\r\n\t/**\r\n\t * Build a node link function for a terminal directive.\r\n\t * A terminal link function terminates the current\r\n\t * compilation recursion and handles compilation of the\r\n\t * subtree in the directive.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {String} dirName\r\n\t * @param {String} value\r\n\t * @param {Object} options\r\n\t * @param {Object} def\r\n\t * @param {String} [rawName]\r\n\t * @param {String} [arg]\r\n\t * @param {Object} [modifiers]\r\n\t * @return {Function} terminalLinkFn\r\n\t */\r\n\t\r\n\tfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\r\n\t  var parsed = parseDirective(value);\r\n\t  var descriptor = {\r\n\t    name: dirName,\r\n\t    arg: arg,\r\n\t    expression: parsed.expression,\r\n\t    filters: parsed.filters,\r\n\t    raw: value,\r\n\t    attr: rawName,\r\n\t    modifiers: modifiers,\r\n\t    def: def\r\n\t  };\r\n\t  // check ref for v-for, v-if and router-view\r\n\t  if (dirName === 'for' || dirName === 'router-view') {\r\n\t    descriptor.ref = findRef(el);\r\n\t  }\r\n\t  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\r\n\t    if (descriptor.ref) {\r\n\t      defineReactive((scope || vm).$refs, descriptor.ref, null);\r\n\t    }\r\n\t    vm._bindDir(descriptor, el, host, scope, frag);\r\n\t  };\r\n\t  fn.terminal = true;\r\n\t  return fn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Compile the directives on an element and return a linker.\r\n\t *\r\n\t * @param {Array|NamedNodeMap} attrs\r\n\t * @param {Object} options\r\n\t * @return {Function}\r\n\t */\r\n\t\r\n\tfunction compileDirectives(attrs, options) {\r\n\t  var i = attrs.length;\r\n\t  var dirs = [];\r\n\t  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\r\n\t  while (i--) {\r\n\t    attr = attrs[i];\r\n\t    name = rawName = attr.name;\r\n\t    value = rawValue = attr.value;\r\n\t    tokens = parseText(value);\r\n\t    // reset arg\r\n\t    arg = null;\r\n\t    // check modifiers\r\n\t    modifiers = parseModifiers(name);\r\n\t    name = name.replace(modifierRE, '');\r\n\t\r\n\t    // attribute interpolations\r\n\t    if (tokens) {\r\n\t      value = tokensToExp(tokens);\r\n\t      arg = name;\r\n\t      pushDir('bind', directives.bind, tokens);\r\n\t      // warn against mixing mustaches with v-bind\r\n\t      if (false) {\r\n\t        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\r\n\t          return attr.name === ':class' || attr.name === 'v-bind:class';\r\n\t        })) {\r\n\t          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\r\n\t        }\r\n\t      }\r\n\t    } else\r\n\t\r\n\t      // special attribute: transition\r\n\t      if (transitionRE.test(name)) {\r\n\t        modifiers.literal = !bindRE.test(name);\r\n\t        pushDir('transition', internalDirectives.transition);\r\n\t      } else\r\n\t\r\n\t        // event handlers\r\n\t        if (onRE.test(name)) {\r\n\t          arg = name.replace(onRE, '');\r\n\t          pushDir('on', directives.on);\r\n\t        } else\r\n\t\r\n\t          // attribute bindings\r\n\t          if (bindRE.test(name)) {\r\n\t            dirName = name.replace(bindRE, '');\r\n\t            if (dirName === 'style' || dirName === 'class') {\r\n\t              pushDir(dirName, internalDirectives[dirName]);\r\n\t            } else {\r\n\t              arg = dirName;\r\n\t              pushDir('bind', directives.bind);\r\n\t            }\r\n\t          } else\r\n\t\r\n\t            // normal directives\r\n\t            if (matched = name.match(dirAttrRE)) {\r\n\t              dirName = matched[1];\r\n\t              arg = matched[2];\r\n\t\r\n\t              // skip v-else (when used with v-show)\r\n\t              if (dirName === 'else') {\r\n\t                continue;\r\n\t              }\r\n\t\r\n\t              dirDef = resolveAsset(options, 'directives', dirName, true);\r\n\t              if (dirDef) {\r\n\t                pushDir(dirName, dirDef);\r\n\t              }\r\n\t            }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Push a directive.\r\n\t   *\r\n\t   * @param {String} dirName\r\n\t   * @param {Object|Function} def\r\n\t   * @param {Array} [interpTokens]\r\n\t   */\r\n\t\r\n\t  function pushDir(dirName, def, interpTokens) {\r\n\t    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\r\n\t    var parsed = !hasOneTimeToken && parseDirective(value);\r\n\t    dirs.push({\r\n\t      name: dirName,\r\n\t      attr: rawName,\r\n\t      raw: rawValue,\r\n\t      def: def,\r\n\t      arg: arg,\r\n\t      modifiers: modifiers,\r\n\t      // conversion from interpolation strings with one-time token\r\n\t      // to expression is differed until directive bind time so that we\r\n\t      // have access to the actual vm context for one-time bindings.\r\n\t      expression: parsed && parsed.expression,\r\n\t      filters: parsed && parsed.filters,\r\n\t      interp: interpTokens,\r\n\t      hasOneTime: hasOneTimeToken\r\n\t    });\r\n\t  }\r\n\t\r\n\t  if (dirs.length) {\r\n\t    return makeNodeLinkFn(dirs);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Parse modifiers from directive attribute name.\r\n\t *\r\n\t * @param {String} name\r\n\t * @return {Object}\r\n\t */\r\n\t\r\n\tfunction parseModifiers(name) {\r\n\t  var res = Object.create(null);\r\n\t  var match = name.match(modifierRE);\r\n\t  if (match) {\r\n\t    var i = match.length;\r\n\t    while (i--) {\r\n\t      res[match[i].slice(1)] = true;\r\n\t    }\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Build a link function for all directives on a single node.\r\n\t *\r\n\t * @param {Array} directives\r\n\t * @return {Function} directivesLinkFn\r\n\t */\r\n\t\r\n\tfunction makeNodeLinkFn(directives) {\r\n\t  return function nodeLinkFn(vm, el, host, scope, frag) {\r\n\t    // reverse apply because it's sorted low to high\r\n\t    var i = directives.length;\r\n\t    while (i--) {\r\n\t      vm._bindDir(directives[i], el, host, scope, frag);\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if an interpolation string contains one-time tokens.\r\n\t *\r\n\t * @param {Array} tokens\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tfunction hasOneTime(tokens) {\r\n\t  var i = tokens.length;\r\n\t  while (i--) {\r\n\t    if (tokens[i].oneTime) return true;\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction isScript(el) {\r\n\t  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\r\n\t}\r\n\t\r\n\tvar specialCharRE = /[^\\w\\-:\\.]/;\r\n\t\r\n\t/**\r\n\t * Process an element or a DocumentFragment based on a\r\n\t * instance option object. This allows us to transclude\r\n\t * a template node/fragment before the instance is created,\r\n\t * so the processed fragment can then be cloned and reused\r\n\t * in v-for.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Element|DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction transclude(el, options) {\r\n\t  // extract container attributes to pass them down\r\n\t  // to compiler, because they need to be compiled in\r\n\t  // parent scope. we are mutating the options object here\r\n\t  // assuming the same object will be used for compile\r\n\t  // right after this.\r\n\t  if (options) {\r\n\t    options._containerAttrs = extractAttrs(el);\r\n\t  }\r\n\t  // for template tags, what we want is its content as\r\n\t  // a documentFragment (for fragment instances)\r\n\t  if (isTemplate(el)) {\r\n\t    el = parseTemplate(el);\r\n\t  }\r\n\t  if (options) {\r\n\t    if (options._asComponent && !options.template) {\r\n\t      options.template = '<slot></slot>';\r\n\t    }\r\n\t    if (options.template) {\r\n\t      options._content = extractContent(el);\r\n\t      el = transcludeTemplate(el, options);\r\n\t    }\r\n\t  }\r\n\t  if (isFragment(el)) {\r\n\t    // anchors for fragment instance\r\n\t    // passing in `persist: true` to avoid them being\r\n\t    // discarded by IE during template cloning\r\n\t    prepend(createAnchor('v-start', true), el);\r\n\t    el.appendChild(createAnchor('v-end', true));\r\n\t  }\r\n\t  return el;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Process the template option.\r\n\t * If the replace option is true this will swap the $el.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {Object} options\r\n\t * @return {Element|DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction transcludeTemplate(el, options) {\r\n\t  var template = options.template;\r\n\t  var frag = parseTemplate(template, true);\r\n\t  if (frag) {\r\n\t    var replacer = frag.firstChild;\r\n\t    if (!replacer) {\r\n\t      return frag;\r\n\t    }\r\n\t    var tag = replacer.tagName && replacer.tagName.toLowerCase();\r\n\t    if (options.replace) {\r\n\t      /* istanbul ignore if */\r\n\t      if (el === document.body) {\r\n\t        (\"production\") !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\r\n\t      }\r\n\t      // there are many cases where the instance must\r\n\t      // become a fragment instance: basically anything that\r\n\t      // can create more than 1 root nodes.\r\n\t      if (\r\n\t      // multi-children template\r\n\t      frag.childNodes.length > 1 ||\r\n\t      // non-element template\r\n\t      replacer.nodeType !== 1 ||\r\n\t      // single nested component\r\n\t      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\r\n\t      // element directive\r\n\t      resolveAsset(options, 'elementDirectives', tag) ||\r\n\t      // for block\r\n\t      replacer.hasAttribute('v-for') ||\r\n\t      // if block\r\n\t      replacer.hasAttribute('v-if')) {\r\n\t        return frag;\r\n\t      } else {\r\n\t        options._replacerAttrs = extractAttrs(replacer);\r\n\t        mergeAttrs(el, replacer);\r\n\t        return replacer;\r\n\t      }\r\n\t    } else {\r\n\t      el.appendChild(frag);\r\n\t      return el;\r\n\t    }\r\n\t  } else {\r\n\t    (\"production\") !== 'production' && warn('Invalid template option: ' + template);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Helper to extract a component container's attributes\r\n\t * into a plain object array.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @return {Array}\r\n\t */\r\n\t\r\n\tfunction extractAttrs(el) {\r\n\t  if (el.nodeType === 1 && el.hasAttributes()) {\r\n\t    return toArray(el.attributes);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Merge the attributes of two elements, and make sure\r\n\t * the class names are merged properly.\r\n\t *\r\n\t * @param {Element} from\r\n\t * @param {Element} to\r\n\t */\r\n\t\r\n\tfunction mergeAttrs(from, to) {\r\n\t  var attrs = from.attributes;\r\n\t  var i = attrs.length;\r\n\t  var name, value;\r\n\t  while (i--) {\r\n\t    name = attrs[i].name;\r\n\t    value = attrs[i].value;\r\n\t    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\r\n\t      to.setAttribute(name, value);\r\n\t    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\r\n\t      value.split(/\\s+/).forEach(function (cls) {\r\n\t        addClass(to, cls);\r\n\t      });\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Scan and determine slot content distribution.\r\n\t * We do this during transclusion instead at compile time so that\r\n\t * the distribution is decoupled from the compilation order of\r\n\t * the slots.\r\n\t *\r\n\t * @param {Element|DocumentFragment} template\r\n\t * @param {Element} content\r\n\t * @param {Vue} vm\r\n\t */\r\n\t\r\n\tfunction resolveSlots(vm, content) {\r\n\t  if (!content) {\r\n\t    return;\r\n\t  }\r\n\t  var contents = vm._slotContents = Object.create(null);\r\n\t  var el, name;\r\n\t  for (var i = 0, l = content.children.length; i < l; i++) {\r\n\t    el = content.children[i];\r\n\t    /* eslint-disable no-cond-assign */\r\n\t    if (name = el.getAttribute('slot')) {\r\n\t      (contents[name] || (contents[name] = [])).push(el);\r\n\t    }\r\n\t    /* eslint-enable no-cond-assign */\r\n\t    if (false) {\r\n\t      warn('The \"slot\" attribute must be static.', vm.$parent);\r\n\t    }\r\n\t  }\r\n\t  for (name in contents) {\r\n\t    contents[name] = extractFragment(contents[name], content);\r\n\t  }\r\n\t  if (content.hasChildNodes()) {\r\n\t    var nodes = content.childNodes;\r\n\t    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\r\n\t      return;\r\n\t    }\r\n\t    contents['default'] = extractFragment(content.childNodes, content);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Extract qualified content nodes from a node list.\r\n\t *\r\n\t * @param {NodeList} nodes\r\n\t * @return {DocumentFragment}\r\n\t */\r\n\t\r\n\tfunction extractFragment(nodes, parent) {\r\n\t  var frag = document.createDocumentFragment();\r\n\t  nodes = toArray(nodes);\r\n\t  for (var i = 0, l = nodes.length; i < l; i++) {\r\n\t    var node = nodes[i];\r\n\t    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\r\n\t      parent.removeChild(node);\r\n\t      node = parseTemplate(node, true);\r\n\t    }\r\n\t    frag.appendChild(node);\r\n\t  }\r\n\t  return frag;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tvar compiler = Object.freeze({\r\n\t\tcompile: compile,\r\n\t\tcompileAndLinkProps: compileAndLinkProps,\r\n\t\tcompileRoot: compileRoot,\r\n\t\ttransclude: transclude,\r\n\t\tresolveSlots: resolveSlots\r\n\t});\r\n\t\r\n\tfunction stateMixin (Vue) {\r\n\t  /**\r\n\t   * Accessor for `$data` property, since setting $data\r\n\t   * requires observing the new object and updating\r\n\t   * proxied properties.\r\n\t   */\r\n\t\r\n\t  Object.defineProperty(Vue.prototype, '$data', {\r\n\t    get: function get() {\r\n\t      return this._data;\r\n\t    },\r\n\t    set: function set(newData) {\r\n\t      if (newData !== this._data) {\r\n\t        this._setData(newData);\r\n\t      }\r\n\t    }\r\n\t  });\r\n\t\r\n\t  /**\r\n\t   * Setup the scope of an instance, which contains:\r\n\t   * - observed data\r\n\t   * - computed properties\r\n\t   * - user methods\r\n\t   * - meta properties\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initState = function () {\r\n\t    this._initProps();\r\n\t    this._initMeta();\r\n\t    this._initMethods();\r\n\t    this._initData();\r\n\t    this._initComputed();\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Initialize props.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initProps = function () {\r\n\t    var options = this.$options;\r\n\t    var el = options.el;\r\n\t    var props = options.props;\r\n\t    if (props && !el) {\r\n\t      (\"production\") !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\r\n\t    }\r\n\t    // make sure to convert string selectors into element now\r\n\t    el = options.el = query(el);\r\n\t    this._propsUnlinkFn = el && el.nodeType === 1 && props\r\n\t    // props must be linked in proper scope if inside v-for\r\n\t    ? compileAndLinkProps(this, el, props, this._scope) : null;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Initialize the data.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initData = function () {\r\n\t    var dataFn = this.$options.data;\r\n\t    var data = this._data = dataFn ? dataFn() : {};\r\n\t    if (!isPlainObject(data)) {\r\n\t      data = {};\r\n\t      (\"production\") !== 'production' && warn('data functions should return an object.', this);\r\n\t    }\r\n\t    var props = this._props;\r\n\t    // proxy data on instance\r\n\t    var keys = Object.keys(data);\r\n\t    var i, key;\r\n\t    i = keys.length;\r\n\t    while (i--) {\r\n\t      key = keys[i];\r\n\t      // there are two scenarios where we can proxy a data key:\r\n\t      // 1. it's not already defined as a prop\r\n\t      // 2. it's provided via a instantiation option AND there are no\r\n\t      //    template prop present\r\n\t      if (!props || !hasOwn(props, key)) {\r\n\t        this._proxy(key);\r\n\t      } else if (false) {\r\n\t        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\r\n\t      }\r\n\t    }\r\n\t    // observe data\r\n\t    observe(data, this);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Swap the instance's $data. Called in $data's setter.\r\n\t   *\r\n\t   * @param {Object} newData\r\n\t   */\r\n\t\r\n\t  Vue.prototype._setData = function (newData) {\r\n\t    newData = newData || {};\r\n\t    var oldData = this._data;\r\n\t    this._data = newData;\r\n\t    var keys, key, i;\r\n\t    // unproxy keys not present in new data\r\n\t    keys = Object.keys(oldData);\r\n\t    i = keys.length;\r\n\t    while (i--) {\r\n\t      key = keys[i];\r\n\t      if (!(key in newData)) {\r\n\t        this._unproxy(key);\r\n\t      }\r\n\t    }\r\n\t    // proxy keys not already proxied,\r\n\t    // and trigger change for changed values\r\n\t    keys = Object.keys(newData);\r\n\t    i = keys.length;\r\n\t    while (i--) {\r\n\t      key = keys[i];\r\n\t      if (!hasOwn(this, key)) {\r\n\t        // new property\r\n\t        this._proxy(key);\r\n\t      }\r\n\t    }\r\n\t    oldData.__ob__.removeVm(this);\r\n\t    observe(newData, this);\r\n\t    this._digest();\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Proxy a property, so that\r\n\t   * vm.prop === vm._data.prop\r\n\t   *\r\n\t   * @param {String} key\r\n\t   */\r\n\t\r\n\t  Vue.prototype._proxy = function (key) {\r\n\t    if (!isReserved(key)) {\r\n\t      // need to store ref to self here\r\n\t      // because these getter/setters might\r\n\t      // be called by child scopes via\r\n\t      // prototype inheritance.\r\n\t      var self = this;\r\n\t      Object.defineProperty(self, key, {\r\n\t        configurable: true,\r\n\t        enumerable: true,\r\n\t        get: function proxyGetter() {\r\n\t          return self._data[key];\r\n\t        },\r\n\t        set: function proxySetter(val) {\r\n\t          self._data[key] = val;\r\n\t        }\r\n\t      });\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Unproxy a property.\r\n\t   *\r\n\t   * @param {String} key\r\n\t   */\r\n\t\r\n\t  Vue.prototype._unproxy = function (key) {\r\n\t    if (!isReserved(key)) {\r\n\t      delete this[key];\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Force update on every watcher in scope.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._digest = function () {\r\n\t    for (var i = 0, l = this._watchers.length; i < l; i++) {\r\n\t      this._watchers[i].update(true); // shallow updates\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Setup computed properties. They are essentially\r\n\t   * special getter/setters\r\n\t   */\r\n\t\r\n\t  function noop() {}\r\n\t  Vue.prototype._initComputed = function () {\r\n\t    var computed = this.$options.computed;\r\n\t    if (computed) {\r\n\t      for (var key in computed) {\r\n\t        var userDef = computed[key];\r\n\t        var def = {\r\n\t          enumerable: true,\r\n\t          configurable: true\r\n\t        };\r\n\t        if (typeof userDef === 'function') {\r\n\t          def.get = makeComputedGetter(userDef, this);\r\n\t          def.set = noop;\r\n\t        } else {\r\n\t          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\r\n\t          def.set = userDef.set ? bind(userDef.set, this) : noop;\r\n\t        }\r\n\t        Object.defineProperty(this, key, def);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  function makeComputedGetter(getter, owner) {\r\n\t    var watcher = new Watcher(owner, getter, null, {\r\n\t      lazy: true\r\n\t    });\r\n\t    return function computedGetter() {\r\n\t      if (watcher.dirty) {\r\n\t        watcher.evaluate();\r\n\t      }\r\n\t      if (Dep.target) {\r\n\t        watcher.depend();\r\n\t      }\r\n\t      return watcher.value;\r\n\t    };\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Setup instance methods. Methods must be bound to the\r\n\t   * instance since they might be passed down as a prop to\r\n\t   * child components.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initMethods = function () {\r\n\t    var methods = this.$options.methods;\r\n\t    if (methods) {\r\n\t      for (var key in methods) {\r\n\t        this[key] = bind(methods[key], this);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Initialize meta information like $index, $key & $value.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initMeta = function () {\r\n\t    var metas = this.$options._meta;\r\n\t    if (metas) {\r\n\t      for (var key in metas) {\r\n\t        defineReactive(this, key, metas[key]);\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\tvar eventRE = /^v-on:|^@/;\r\n\t\r\n\tfunction eventsMixin (Vue) {\r\n\t  /**\r\n\t   * Setup the instance's option events & watchers.\r\n\t   * If the value is a string, we pull it from the\r\n\t   * instance's methods by name.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initEvents = function () {\r\n\t    var options = this.$options;\r\n\t    if (options._asComponent) {\r\n\t      registerComponentEvents(this, options.el);\r\n\t    }\r\n\t    registerCallbacks(this, '$on', options.events);\r\n\t    registerCallbacks(this, '$watch', options.watch);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Register v-on events on a child component\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {Element} el\r\n\t   */\r\n\t\r\n\t  function registerComponentEvents(vm, el) {\r\n\t    var attrs = el.attributes;\r\n\t    var name, value, handler;\r\n\t    for (var i = 0, l = attrs.length; i < l; i++) {\r\n\t      name = attrs[i].name;\r\n\t      if (eventRE.test(name)) {\r\n\t        name = name.replace(eventRE, '');\r\n\t        // force the expression into a statement so that\r\n\t        // it always dynamically resolves the method to call (#2670)\r\n\t        // kinda ugly hack, but does the job.\r\n\t        value = attrs[i].value;\r\n\t        if (isSimplePath(value)) {\r\n\t          value += '.apply(this, $arguments)';\r\n\t        }\r\n\t        handler = (vm._scope || vm._context).$eval(value, true);\r\n\t        handler._fromParent = true;\r\n\t        vm.$on(name.replace(eventRE), handler);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Register callbacks for option events and watchers.\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {String} action\r\n\t   * @param {Object} hash\r\n\t   */\r\n\t\r\n\t  function registerCallbacks(vm, action, hash) {\r\n\t    if (!hash) return;\r\n\t    var handlers, key, i, j;\r\n\t    for (key in hash) {\r\n\t      handlers = hash[key];\r\n\t      if (isArray(handlers)) {\r\n\t        for (i = 0, j = handlers.length; i < j; i++) {\r\n\t          register(vm, action, key, handlers[i]);\r\n\t        }\r\n\t      } else {\r\n\t        register(vm, action, key, handlers);\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Helper to register an event/watch callback.\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {String} action\r\n\t   * @param {String} key\r\n\t   * @param {Function|String|Object} handler\r\n\t   * @param {Object} [options]\r\n\t   */\r\n\t\r\n\t  function register(vm, action, key, handler, options) {\r\n\t    var type = typeof handler;\r\n\t    if (type === 'function') {\r\n\t      vm[action](key, handler, options);\r\n\t    } else if (type === 'string') {\r\n\t      var methods = vm.$options.methods;\r\n\t      var method = methods && methods[handler];\r\n\t      if (method) {\r\n\t        vm[action](key, method, options);\r\n\t      } else {\r\n\t        (\"production\") !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\r\n\t      }\r\n\t    } else if (handler && type === 'object') {\r\n\t      register(vm, action, key, handler.handler, handler);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Setup recursive attached/detached calls\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initDOMHooks = function () {\r\n\t    this.$on('hook:attached', onAttached);\r\n\t    this.$on('hook:detached', onDetached);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Callback to recursively call attached hook on children\r\n\t   */\r\n\t\r\n\t  function onAttached() {\r\n\t    if (!this._isAttached) {\r\n\t      this._isAttached = true;\r\n\t      this.$children.forEach(callAttach);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Iterator to call attached hook\r\n\t   *\r\n\t   * @param {Vue} child\r\n\t   */\r\n\t\r\n\t  function callAttach(child) {\r\n\t    if (!child._isAttached && inDoc(child.$el)) {\r\n\t      child._callHook('attached');\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Callback to recursively call detached hook on children\r\n\t   */\r\n\t\r\n\t  function onDetached() {\r\n\t    if (this._isAttached) {\r\n\t      this._isAttached = false;\r\n\t      this.$children.forEach(callDetach);\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Iterator to call detached hook\r\n\t   *\r\n\t   * @param {Vue} child\r\n\t   */\r\n\t\r\n\t  function callDetach(child) {\r\n\t    if (child._isAttached && !inDoc(child.$el)) {\r\n\t      child._callHook('detached');\r\n\t    }\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Trigger all handlers for a hook\r\n\t   *\r\n\t   * @param {String} hook\r\n\t   */\r\n\t\r\n\t  Vue.prototype._callHook = function (hook) {\r\n\t    this.$emit('pre-hook:' + hook);\r\n\t    var handlers = this.$options[hook];\r\n\t    if (handlers) {\r\n\t      for (var i = 0, j = handlers.length; i < j; i++) {\r\n\t        handlers[i].call(this);\r\n\t      }\r\n\t    }\r\n\t    this.$emit('hook:' + hook);\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction noop$1() {}\r\n\t\r\n\t/**\r\n\t * A directive links a DOM element with a piece of data,\r\n\t * which is the result of evaluating an expression.\r\n\t * It registers a watcher with the expression and calls\r\n\t * the DOM update function when a change is triggered.\r\n\t *\r\n\t * @param {Object} descriptor\r\n\t *                 - {String} name\r\n\t *                 - {Object} def\r\n\t *                 - {String} expression\r\n\t *                 - {Array<Object>} [filters]\r\n\t *                 - {Object} [modifiers]\r\n\t *                 - {Boolean} literal\r\n\t *                 - {String} attr\r\n\t *                 - {String} arg\r\n\t *                 - {String} raw\r\n\t *                 - {String} [ref]\r\n\t *                 - {Array<Object>} [interp]\r\n\t *                 - {Boolean} [hasOneTime]\r\n\t * @param {Vue} vm\r\n\t * @param {Node} el\r\n\t * @param {Vue} [host] - transclusion host component\r\n\t * @param {Object} [scope] - v-for scope\r\n\t * @param {Fragment} [frag] - owner fragment\r\n\t * @constructor\r\n\t */\r\n\tfunction Directive(descriptor, vm, el, host, scope, frag) {\r\n\t  this.vm = vm;\r\n\t  this.el = el;\r\n\t  // copy descriptor properties\r\n\t  this.descriptor = descriptor;\r\n\t  this.name = descriptor.name;\r\n\t  this.expression = descriptor.expression;\r\n\t  this.arg = descriptor.arg;\r\n\t  this.modifiers = descriptor.modifiers;\r\n\t  this.filters = descriptor.filters;\r\n\t  this.literal = this.modifiers && this.modifiers.literal;\r\n\t  // private\r\n\t  this._locked = false;\r\n\t  this._bound = false;\r\n\t  this._listeners = null;\r\n\t  // link context\r\n\t  this._host = host;\r\n\t  this._scope = scope;\r\n\t  this._frag = frag;\r\n\t  // store directives on node in dev mode\r\n\t  if (false) {\r\n\t    this.el._vue_directives = this.el._vue_directives || [];\r\n\t    this.el._vue_directives.push(this);\r\n\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the directive, mixin definition properties,\r\n\t * setup the watcher, call definition bind() and update()\r\n\t * if present.\r\n\t */\r\n\t\r\n\tDirective.prototype._bind = function () {\r\n\t  var name = this.name;\r\n\t  var descriptor = this.descriptor;\r\n\t\r\n\t  // remove attribute\r\n\t  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\r\n\t    var attr = descriptor.attr || 'v-' + name;\r\n\t    this.el.removeAttribute(attr);\r\n\t  }\r\n\t\r\n\t  // copy def properties\r\n\t  var def = descriptor.def;\r\n\t  if (typeof def === 'function') {\r\n\t    this.update = def;\r\n\t  } else {\r\n\t    extend(this, def);\r\n\t  }\r\n\t\r\n\t  // setup directive params\r\n\t  this._setupParams();\r\n\t\r\n\t  // initial bind\r\n\t  if (this.bind) {\r\n\t    this.bind();\r\n\t  }\r\n\t  this._bound = true;\r\n\t\r\n\t  if (this.literal) {\r\n\t    this.update && this.update(descriptor.raw);\r\n\t  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\r\n\t    // wrapped updater for context\r\n\t    var dir = this;\r\n\t    if (this.update) {\r\n\t      this._update = function (val, oldVal) {\r\n\t        if (!dir._locked) {\r\n\t          dir.update(val, oldVal);\r\n\t        }\r\n\t      };\r\n\t    } else {\r\n\t      this._update = noop$1;\r\n\t    }\r\n\t    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\r\n\t    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\r\n\t    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\r\n\t    {\r\n\t      filters: this.filters,\r\n\t      twoWay: this.twoWay,\r\n\t      deep: this.deep,\r\n\t      preProcess: preProcess,\r\n\t      postProcess: postProcess,\r\n\t      scope: this._scope\r\n\t    });\r\n\t    // v-model with inital inline value need to sync back to\r\n\t    // model instead of update to DOM on init. They would\r\n\t    // set the afterBind hook to indicate that.\r\n\t    if (this.afterBind) {\r\n\t      this.afterBind();\r\n\t    } else if (this.update) {\r\n\t      this.update(watcher.value);\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Setup all param attributes, e.g. track-by,\r\n\t * transition-mode, etc...\r\n\t */\r\n\t\r\n\tDirective.prototype._setupParams = function () {\r\n\t  if (!this.params) {\r\n\t    return;\r\n\t  }\r\n\t  var params = this.params;\r\n\t  // swap the params array with a fresh object.\r\n\t  this.params = Object.create(null);\r\n\t  var i = params.length;\r\n\t  var key, val, mappedKey;\r\n\t  while (i--) {\r\n\t    key = hyphenate(params[i]);\r\n\t    mappedKey = camelize(key);\r\n\t    val = getBindAttr(this.el, key);\r\n\t    if (val != null) {\r\n\t      // dynamic\r\n\t      this._setupParamWatcher(mappedKey, val);\r\n\t    } else {\r\n\t      // static\r\n\t      val = getAttr(this.el, key);\r\n\t      if (val != null) {\r\n\t        this.params[mappedKey] = val === '' ? true : val;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Setup a watcher for a dynamic param.\r\n\t *\r\n\t * @param {String} key\r\n\t * @param {String} expression\r\n\t */\r\n\t\r\n\tDirective.prototype._setupParamWatcher = function (key, expression) {\r\n\t  var self = this;\r\n\t  var called = false;\r\n\t  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\r\n\t    self.params[key] = val;\r\n\t    // since we are in immediate mode,\r\n\t    // only call the param change callbacks if this is not the first update.\r\n\t    if (called) {\r\n\t      var cb = self.paramWatchers && self.paramWatchers[key];\r\n\t      if (cb) {\r\n\t        cb.call(self, val, oldVal);\r\n\t      }\r\n\t    } else {\r\n\t      called = true;\r\n\t    }\r\n\t  }, {\r\n\t    immediate: true,\r\n\t    user: false\r\n\t  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Check if the directive is a function caller\r\n\t * and if the expression is a callable one. If both true,\r\n\t * we wrap up the expression and use it as the event\r\n\t * handler.\r\n\t *\r\n\t * e.g. on-click=\"a++\"\r\n\t *\r\n\t * @return {Boolean}\r\n\t */\r\n\t\r\n\tDirective.prototype._checkStatement = function () {\r\n\t  var expression = this.expression;\r\n\t  if (expression && this.acceptStatement && !isSimplePath(expression)) {\r\n\t    var fn = parseExpression$1(expression).get;\r\n\t    var scope = this._scope || this.vm;\r\n\t    var handler = function handler(e) {\r\n\t      scope.$event = e;\r\n\t      fn.call(scope, scope);\r\n\t      scope.$event = null;\r\n\t    };\r\n\t    if (this.filters) {\r\n\t      handler = scope._applyFilters(handler, null, this.filters);\r\n\t    }\r\n\t    this.update(handler);\r\n\t    return true;\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Set the corresponding value with the setter.\r\n\t * This should only be used in two-way directives\r\n\t * e.g. v-model.\r\n\t *\r\n\t * @param {*} value\r\n\t * @public\r\n\t */\r\n\t\r\n\tDirective.prototype.set = function (value) {\r\n\t  /* istanbul ignore else */\r\n\t  if (this.twoWay) {\r\n\t    this._withLock(function () {\r\n\t      this._watcher.set(value);\r\n\t    });\r\n\t  } else if (false) {\r\n\t    warn('Directive.set() can only be used inside twoWay' + 'directives.');\r\n\t  }\r\n\t};\r\n\t\r\n\t/**\r\n\t * Execute a function while preventing that function from\r\n\t * triggering updates on this directive instance.\r\n\t *\r\n\t * @param {Function} fn\r\n\t */\r\n\t\r\n\tDirective.prototype._withLock = function (fn) {\r\n\t  var self = this;\r\n\t  self._locked = true;\r\n\t  fn.call(self);\r\n\t  nextTick(function () {\r\n\t    self._locked = false;\r\n\t  });\r\n\t};\r\n\t\r\n\t/**\r\n\t * Convenience method that attaches a DOM event listener\r\n\t * to the directive element and autometically tears it down\r\n\t * during unbind.\r\n\t *\r\n\t * @param {String} event\r\n\t * @param {Function} handler\r\n\t * @param {Boolean} [useCapture]\r\n\t */\r\n\t\r\n\tDirective.prototype.on = function (event, handler, useCapture) {\r\n\t  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Teardown the watcher and call unbind.\r\n\t */\r\n\t\r\n\tDirective.prototype._teardown = function () {\r\n\t  if (this._bound) {\r\n\t    this._bound = false;\r\n\t    if (this.unbind) {\r\n\t      this.unbind();\r\n\t    }\r\n\t    if (this._watcher) {\r\n\t      this._watcher.teardown();\r\n\t    }\r\n\t    var listeners = this._listeners;\r\n\t    var i;\r\n\t    if (listeners) {\r\n\t      i = listeners.length;\r\n\t      while (i--) {\r\n\t        off(this.el, listeners[i][0], listeners[i][1]);\r\n\t      }\r\n\t    }\r\n\t    var unwatchFns = this._paramUnwatchFns;\r\n\t    if (unwatchFns) {\r\n\t      i = unwatchFns.length;\r\n\t      while (i--) {\r\n\t        unwatchFns[i]();\r\n\t      }\r\n\t    }\r\n\t    if (false) {\r\n\t      this.el._vue_directives.$remove(this);\r\n\t    }\r\n\t    this.vm = this.el = this._watcher = this._listeners = null;\r\n\t  }\r\n\t};\r\n\t\r\n\tfunction lifecycleMixin (Vue) {\r\n\t  /**\r\n\t   * Update v-ref for component.\r\n\t   *\r\n\t   * @param {Boolean} remove\r\n\t   */\r\n\t\r\n\t  Vue.prototype._updateRef = function (remove) {\r\n\t    var ref = this.$options._ref;\r\n\t    if (ref) {\r\n\t      var refs = (this._scope || this._context).$refs;\r\n\t      if (remove) {\r\n\t        if (refs[ref] === this) {\r\n\t          refs[ref] = null;\r\n\t        }\r\n\t      } else {\r\n\t        refs[ref] = this;\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Transclude, compile and link element.\r\n\t   *\r\n\t   * If a pre-compiled linker is available, that means the\r\n\t   * passed in element will be pre-transcluded and compiled\r\n\t   * as well - all we need to do is to call the linker.\r\n\t   *\r\n\t   * Otherwise we need to call transclude/compile/link here.\r\n\t   *\r\n\t   * @param {Element} el\r\n\t   */\r\n\t\r\n\t  Vue.prototype._compile = function (el) {\r\n\t    var options = this.$options;\r\n\t\r\n\t    // transclude and init element\r\n\t    // transclude can potentially replace original\r\n\t    // so we need to keep reference; this step also injects\r\n\t    // the template and caches the original attributes\r\n\t    // on the container node and replacer node.\r\n\t    var original = el;\r\n\t    el = transclude(el, options);\r\n\t    this._initElement(el);\r\n\t\r\n\t    // handle v-pre on root node (#2026)\r\n\t    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    // root is always compiled per-instance, because\r\n\t    // container attrs and props can be different every time.\r\n\t    var contextOptions = this._context && this._context.$options;\r\n\t    var rootLinker = compileRoot(el, options, contextOptions);\r\n\t\r\n\t    // resolve slot distribution\r\n\t    resolveSlots(this, options._content);\r\n\t\r\n\t    // compile and link the rest\r\n\t    var contentLinkFn;\r\n\t    var ctor = this.constructor;\r\n\t    // component compilation can be cached\r\n\t    // as long as it's not using inline-template\r\n\t    if (options._linkerCachable) {\r\n\t      contentLinkFn = ctor.linker;\r\n\t      if (!contentLinkFn) {\r\n\t        contentLinkFn = ctor.linker = compile(el, options);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // link phase\r\n\t    // make sure to link root with prop scope!\r\n\t    var rootUnlinkFn = rootLinker(this, el, this._scope);\r\n\t    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\r\n\t\r\n\t    // register composite unlink function\r\n\t    // to be called during instance destruction\r\n\t    this._unlinkFn = function () {\r\n\t      rootUnlinkFn();\r\n\t      // passing destroying: true to avoid searching and\r\n\t      // splicing the directives\r\n\t      contentUnlinkFn(true);\r\n\t    };\r\n\t\r\n\t    // finally replace original\r\n\t    if (options.replace) {\r\n\t      replace(original, el);\r\n\t    }\r\n\t\r\n\t    this._isCompiled = true;\r\n\t    this._callHook('compiled');\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Initialize instance element. Called in the public\r\n\t   * $mount() method.\r\n\t   *\r\n\t   * @param {Element} el\r\n\t   */\r\n\t\r\n\t  Vue.prototype._initElement = function (el) {\r\n\t    if (isFragment(el)) {\r\n\t      this._isFragment = true;\r\n\t      this.$el = this._fragmentStart = el.firstChild;\r\n\t      this._fragmentEnd = el.lastChild;\r\n\t      // set persisted text anchors to empty\r\n\t      if (this._fragmentStart.nodeType === 3) {\r\n\t        this._fragmentStart.data = this._fragmentEnd.data = '';\r\n\t      }\r\n\t      this._fragment = el;\r\n\t    } else {\r\n\t      this.$el = el;\r\n\t    }\r\n\t    this.$el.__vue__ = this;\r\n\t    this._callHook('beforeCompile');\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Create and bind a directive to an element.\r\n\t   *\r\n\t   * @param {Object} descriptor - parsed directive descriptor\r\n\t   * @param {Node} node   - target node\r\n\t   * @param {Vue} [host] - transclusion host component\r\n\t   * @param {Object} [scope] - v-for scope\r\n\t   * @param {Fragment} [frag] - owner fragment\r\n\t   */\r\n\t\r\n\t  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\r\n\t    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Teardown an instance, unobserves the data, unbind all the\r\n\t   * directives, turn off all the event listeners, etc.\r\n\t   *\r\n\t   * @param {Boolean} remove - whether to remove the DOM node.\r\n\t   * @param {Boolean} deferCleanup - if true, defer cleanup to\r\n\t   *                                 be called later\r\n\t   */\r\n\t\r\n\t  Vue.prototype._destroy = function (remove, deferCleanup) {\r\n\t    if (this._isBeingDestroyed) {\r\n\t      if (!deferCleanup) {\r\n\t        this._cleanup();\r\n\t      }\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    var destroyReady;\r\n\t    var pendingRemoval;\r\n\t\r\n\t    var self = this;\r\n\t    // Cleanup should be called either synchronously or asynchronoysly as\r\n\t    // callback of this.$remove(), or if remove and deferCleanup are false.\r\n\t    // In any case it should be called after all other removing, unbinding and\r\n\t    // turning of is done\r\n\t    var cleanupIfPossible = function cleanupIfPossible() {\r\n\t      if (destroyReady && !pendingRemoval && !deferCleanup) {\r\n\t        self._cleanup();\r\n\t      }\r\n\t    };\r\n\t\r\n\t    // remove DOM element\r\n\t    if (remove && this.$el) {\r\n\t      pendingRemoval = true;\r\n\t      this.$remove(function () {\r\n\t        pendingRemoval = false;\r\n\t        cleanupIfPossible();\r\n\t      });\r\n\t    }\r\n\t\r\n\t    this._callHook('beforeDestroy');\r\n\t    this._isBeingDestroyed = true;\r\n\t    var i;\r\n\t    // remove self from parent. only necessary\r\n\t    // if parent is not being destroyed as well.\r\n\t    var parent = this.$parent;\r\n\t    if (parent && !parent._isBeingDestroyed) {\r\n\t      parent.$children.$remove(this);\r\n\t      // unregister ref (remove: true)\r\n\t      this._updateRef(true);\r\n\t    }\r\n\t    // destroy all children.\r\n\t    i = this.$children.length;\r\n\t    while (i--) {\r\n\t      this.$children[i].$destroy();\r\n\t    }\r\n\t    // teardown props\r\n\t    if (this._propsUnlinkFn) {\r\n\t      this._propsUnlinkFn();\r\n\t    }\r\n\t    // teardown all directives. this also tearsdown all\r\n\t    // directive-owned watchers.\r\n\t    if (this._unlinkFn) {\r\n\t      this._unlinkFn();\r\n\t    }\r\n\t    i = this._watchers.length;\r\n\t    while (i--) {\r\n\t      this._watchers[i].teardown();\r\n\t    }\r\n\t    // remove reference to self on $el\r\n\t    if (this.$el) {\r\n\t      this.$el.__vue__ = null;\r\n\t    }\r\n\t\r\n\t    destroyReady = true;\r\n\t    cleanupIfPossible();\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Clean up to ensure garbage collection.\r\n\t   * This is called after the leave transition if there\r\n\t   * is any.\r\n\t   */\r\n\t\r\n\t  Vue.prototype._cleanup = function () {\r\n\t    if (this._isDestroyed) {\r\n\t      return;\r\n\t    }\r\n\t    // remove self from owner fragment\r\n\t    // do it in cleanup so that we can call $destroy with\r\n\t    // defer right when a fragment is about to be removed.\r\n\t    if (this._frag) {\r\n\t      this._frag.children.$remove(this);\r\n\t    }\r\n\t    // remove reference from data ob\r\n\t    // frozen object may not have observer.\r\n\t    if (this._data && this._data.__ob__) {\r\n\t      this._data.__ob__.removeVm(this);\r\n\t    }\r\n\t    // Clean up references to private properties and other\r\n\t    // instances. preserve reference to _data so that proxy\r\n\t    // accessors still work. The only potential side effect\r\n\t    // here is that mutating the instance after it's destroyed\r\n\t    // may affect the state of other components that are still\r\n\t    // observing the same object, but that seems to be a\r\n\t    // reasonable responsibility for the user rather than\r\n\t    // always throwing an error on them.\r\n\t    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\r\n\t    // call the last hook...\r\n\t    this._isDestroyed = true;\r\n\t    this._callHook('destroyed');\r\n\t    // turn off all instance listeners.\r\n\t    this.$off();\r\n\t  };\r\n\t}\r\n\t\r\n\tfunction miscMixin (Vue) {\r\n\t  /**\r\n\t   * Apply a list of filter (descriptors) to a value.\r\n\t   * Using plain for loops here because this will be called in\r\n\t   * the getter of any watcher with filters so it is very\r\n\t   * performance sensitive.\r\n\t   *\r\n\t   * @param {*} value\r\n\t   * @param {*} [oldValue]\r\n\t   * @param {Array} filters\r\n\t   * @param {Boolean} write\r\n\t   * @return {*}\r\n\t   */\r\n\t\r\n\t  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\r\n\t    var filter, fn, args, arg, offset, i, l, j, k;\r\n\t    for (i = 0, l = filters.length; i < l; i++) {\r\n\t      filter = filters[write ? l - i - 1 : i];\r\n\t      fn = resolveAsset(this.$options, 'filters', filter.name, true);\r\n\t      if (!fn) continue;\r\n\t      fn = write ? fn.write : fn.read || fn;\r\n\t      if (typeof fn !== 'function') continue;\r\n\t      args = write ? [value, oldValue] : [value];\r\n\t      offset = write ? 2 : 1;\r\n\t      if (filter.args) {\r\n\t        for (j = 0, k = filter.args.length; j < k; j++) {\r\n\t          arg = filter.args[j];\r\n\t          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\r\n\t        }\r\n\t      }\r\n\t      value = fn.apply(this, args);\r\n\t    }\r\n\t    return value;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Resolve a component, depending on whether the component\r\n\t   * is defined normally or using an async factory function.\r\n\t   * Resolves synchronously if already resolved, otherwise\r\n\t   * resolves asynchronously and caches the resolved\r\n\t   * constructor on the factory.\r\n\t   *\r\n\t   * @param {String|Function} value\r\n\t   * @param {Function} cb\r\n\t   */\r\n\t\r\n\t  Vue.prototype._resolveComponent = function (value, cb) {\r\n\t    var factory;\r\n\t    if (typeof value === 'function') {\r\n\t      factory = value;\r\n\t    } else {\r\n\t      factory = resolveAsset(this.$options, 'components', value, true);\r\n\t    }\r\n\t    /* istanbul ignore if */\r\n\t    if (!factory) {\r\n\t      return;\r\n\t    }\r\n\t    // async component factory\r\n\t    if (!factory.options) {\r\n\t      if (factory.resolved) {\r\n\t        // cached\r\n\t        cb(factory.resolved);\r\n\t      } else if (factory.requested) {\r\n\t        // pool callbacks\r\n\t        factory.pendingCallbacks.push(cb);\r\n\t      } else {\r\n\t        factory.requested = true;\r\n\t        var cbs = factory.pendingCallbacks = [cb];\r\n\t        factory.call(this, function resolve(res) {\r\n\t          if (isPlainObject(res)) {\r\n\t            res = Vue.extend(res);\r\n\t          }\r\n\t          // cache resolved\r\n\t          factory.resolved = res;\r\n\t          // invoke callbacks\r\n\t          for (var i = 0, l = cbs.length; i < l; i++) {\r\n\t            cbs[i](res);\r\n\t          }\r\n\t        }, function reject(reason) {\r\n\t          (\"production\") !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\r\n\t        });\r\n\t      }\r\n\t    } else {\r\n\t      // normal component\r\n\t      cb(factory);\r\n\t    }\r\n\t  };\r\n\t}\r\n\t\r\n\tvar filterRE$1 = /[^|]\\|[^|]/;\r\n\t\r\n\tfunction dataAPI (Vue) {\r\n\t  /**\r\n\t   * Get the value from an expression on this vm.\r\n\t   *\r\n\t   * @param {String} exp\r\n\t   * @param {Boolean} [asStatement]\r\n\t   * @return {*}\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$get = function (exp, asStatement) {\r\n\t    var res = parseExpression$1(exp);\r\n\t    if (res) {\r\n\t      if (asStatement) {\r\n\t        var self = this;\r\n\t        return function statementHandler() {\r\n\t          self.$arguments = toArray(arguments);\r\n\t          var result = res.get.call(self, self);\r\n\t          self.$arguments = null;\r\n\t          return result;\r\n\t        };\r\n\t      } else {\r\n\t        try {\r\n\t          return res.get.call(this, this);\r\n\t        } catch (e) {}\r\n\t      }\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Set the value from an expression on this vm.\r\n\t   * The expression must be a valid left-hand\r\n\t   * expression in an assignment.\r\n\t   *\r\n\t   * @param {String} exp\r\n\t   * @param {*} val\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$set = function (exp, val) {\r\n\t    var res = parseExpression$1(exp, true);\r\n\t    if (res && res.set) {\r\n\t      res.set.call(this, this, val);\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Delete a property on the VM\r\n\t   *\r\n\t   * @param {String} key\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$delete = function (key) {\r\n\t    del(this._data, key);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Watch an expression, trigger callback when its\r\n\t   * value changes.\r\n\t   *\r\n\t   * @param {String|Function} expOrFn\r\n\t   * @param {Function} cb\r\n\t   * @param {Object} [options]\r\n\t   *                 - {Boolean} deep\r\n\t   *                 - {Boolean} immediate\r\n\t   * @return {Function} - unwatchFn\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$watch = function (expOrFn, cb, options) {\r\n\t    var vm = this;\r\n\t    var parsed;\r\n\t    if (typeof expOrFn === 'string') {\r\n\t      parsed = parseDirective(expOrFn);\r\n\t      expOrFn = parsed.expression;\r\n\t    }\r\n\t    var watcher = new Watcher(vm, expOrFn, cb, {\r\n\t      deep: options && options.deep,\r\n\t      sync: options && options.sync,\r\n\t      filters: parsed && parsed.filters,\r\n\t      user: !options || options.user !== false\r\n\t    });\r\n\t    if (options && options.immediate) {\r\n\t      cb.call(vm, watcher.value);\r\n\t    }\r\n\t    return function unwatchFn() {\r\n\t      watcher.teardown();\r\n\t    };\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Evaluate a text directive, including filters.\r\n\t   *\r\n\t   * @param {String} text\r\n\t   * @param {Boolean} [asStatement]\r\n\t   * @return {String}\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$eval = function (text, asStatement) {\r\n\t    // check for filters.\r\n\t    if (filterRE$1.test(text)) {\r\n\t      var dir = parseDirective(text);\r\n\t      // the filter regex check might give false positive\r\n\t      // for pipes inside strings, so it's possible that\r\n\t      // we don't get any filters here\r\n\t      var val = this.$get(dir.expression, asStatement);\r\n\t      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\r\n\t    } else {\r\n\t      // no filter\r\n\t      return this.$get(text, asStatement);\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Interpolate a piece of template text.\r\n\t   *\r\n\t   * @param {String} text\r\n\t   * @return {String}\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$interpolate = function (text) {\r\n\t    var tokens = parseText(text);\r\n\t    var vm = this;\r\n\t    if (tokens) {\r\n\t      if (tokens.length === 1) {\r\n\t        return vm.$eval(tokens[0].value) + '';\r\n\t      } else {\r\n\t        return tokens.map(function (token) {\r\n\t          return token.tag ? vm.$eval(token.value) : token.value;\r\n\t        }).join('');\r\n\t      }\r\n\t    } else {\r\n\t      return text;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Log instance data as a plain JS object\r\n\t   * so that it is easier to inspect in console.\r\n\t   * This method assumes console is available.\r\n\t   *\r\n\t   * @param {String} [path]\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$log = function (path) {\r\n\t    var data = path ? getPath(this._data, path) : this._data;\r\n\t    if (data) {\r\n\t      data = clean(data);\r\n\t    }\r\n\t    // include computed fields\r\n\t    if (!path) {\r\n\t      var key;\r\n\t      for (key in this.$options.computed) {\r\n\t        data[key] = clean(this[key]);\r\n\t      }\r\n\t      if (this._props) {\r\n\t        for (key in this._props) {\r\n\t          data[key] = clean(this[key]);\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    console.log(data);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * \"clean\" a getter/setter converted object into a plain\r\n\t   * object copy.\r\n\t   *\r\n\t   * @param {Object} - obj\r\n\t   * @return {Object}\r\n\t   */\r\n\t\r\n\t  function clean(obj) {\r\n\t    return JSON.parse(JSON.stringify(obj));\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction domAPI (Vue) {\r\n\t  /**\r\n\t   * Convenience on-instance nextTick. The callback is\r\n\t   * auto-bound to the instance, and this avoids component\r\n\t   * modules having to rely on the global Vue.\r\n\t   *\r\n\t   * @param {Function} fn\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$nextTick = function (fn) {\r\n\t    nextTick(fn, this);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Append instance to target\r\n\t   *\r\n\t   * @param {Node} target\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition] - defaults to true\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$appendTo = function (target, cb, withTransition) {\r\n\t    return insert(this, target, cb, withTransition, append, appendWithTransition);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Prepend instance to target\r\n\t   *\r\n\t   * @param {Node} target\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition] - defaults to true\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$prependTo = function (target, cb, withTransition) {\r\n\t    target = query(target);\r\n\t    if (target.hasChildNodes()) {\r\n\t      this.$before(target.firstChild, cb, withTransition);\r\n\t    } else {\r\n\t      this.$appendTo(target, cb, withTransition);\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Insert instance before target\r\n\t   *\r\n\t   * @param {Node} target\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition] - defaults to true\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$before = function (target, cb, withTransition) {\r\n\t    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Insert instance after target\r\n\t   *\r\n\t   * @param {Node} target\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition] - defaults to true\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$after = function (target, cb, withTransition) {\r\n\t    target = query(target);\r\n\t    if (target.nextSibling) {\r\n\t      this.$before(target.nextSibling, cb, withTransition);\r\n\t    } else {\r\n\t      this.$appendTo(target.parentNode, cb, withTransition);\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Remove instance from DOM\r\n\t   *\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition] - defaults to true\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$remove = function (cb, withTransition) {\r\n\t    if (!this.$el.parentNode) {\r\n\t      return cb && cb();\r\n\t    }\r\n\t    var inDocument = this._isAttached && inDoc(this.$el);\r\n\t    // if we are not in document, no need to check\r\n\t    // for transitions\r\n\t    if (!inDocument) withTransition = false;\r\n\t    var self = this;\r\n\t    var realCb = function realCb() {\r\n\t      if (inDocument) self._callHook('detached');\r\n\t      if (cb) cb();\r\n\t    };\r\n\t    if (this._isFragment) {\r\n\t      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\r\n\t    } else {\r\n\t      var op = withTransition === false ? removeWithCb : removeWithTransition;\r\n\t      op(this.$el, this, realCb);\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Shared DOM insertion function.\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {Element} target\r\n\t   * @param {Function} [cb]\r\n\t   * @param {Boolean} [withTransition]\r\n\t   * @param {Function} op1 - op for non-transition insert\r\n\t   * @param {Function} op2 - op for transition insert\r\n\t   * @return vm\r\n\t   */\r\n\t\r\n\t  function insert(vm, target, cb, withTransition, op1, op2) {\r\n\t    target = query(target);\r\n\t    var targetIsDetached = !inDoc(target);\r\n\t    var op = withTransition === false || targetIsDetached ? op1 : op2;\r\n\t    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\r\n\t    if (vm._isFragment) {\r\n\t      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\r\n\t        op(node, target, vm);\r\n\t      });\r\n\t      cb && cb();\r\n\t    } else {\r\n\t      op(vm.$el, target, vm, cb);\r\n\t    }\r\n\t    if (shouldCallHook) {\r\n\t      vm._callHook('attached');\r\n\t    }\r\n\t    return vm;\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Check for selectors\r\n\t   *\r\n\t   * @param {String|Element} el\r\n\t   */\r\n\t\r\n\t  function query(el) {\r\n\t    return typeof el === 'string' ? document.querySelector(el) : el;\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Append operation that takes a callback.\r\n\t   *\r\n\t   * @param {Node} el\r\n\t   * @param {Node} target\r\n\t   * @param {Vue} vm - unused\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  function append(el, target, vm, cb) {\r\n\t    target.appendChild(el);\r\n\t    if (cb) cb();\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * InsertBefore operation that takes a callback.\r\n\t   *\r\n\t   * @param {Node} el\r\n\t   * @param {Node} target\r\n\t   * @param {Vue} vm - unused\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  function beforeWithCb(el, target, vm, cb) {\r\n\t    before(el, target);\r\n\t    if (cb) cb();\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Remove operation that takes a callback.\r\n\t   *\r\n\t   * @param {Node} el\r\n\t   * @param {Vue} vm - unused\r\n\t   * @param {Function} [cb]\r\n\t   */\r\n\t\r\n\t  function removeWithCb(el, vm, cb) {\r\n\t    remove(el);\r\n\t    if (cb) cb();\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction eventsAPI (Vue) {\r\n\t  /**\r\n\t   * Listen on the given `event` with `fn`.\r\n\t   *\r\n\t   * @param {String} event\r\n\t   * @param {Function} fn\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$on = function (event, fn) {\r\n\t    (this._events[event] || (this._events[event] = [])).push(fn);\r\n\t    modifyListenerCount(this, event, 1);\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Adds an `event` listener that will be invoked a single\r\n\t   * time then automatically removed.\r\n\t   *\r\n\t   * @param {String} event\r\n\t   * @param {Function} fn\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$once = function (event, fn) {\r\n\t    var self = this;\r\n\t    function on() {\r\n\t      self.$off(event, on);\r\n\t      fn.apply(this, arguments);\r\n\t    }\r\n\t    on.fn = fn;\r\n\t    this.$on(event, on);\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Remove the given callback for `event` or all\r\n\t   * registered callbacks.\r\n\t   *\r\n\t   * @param {String} event\r\n\t   * @param {Function} fn\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$off = function (event, fn) {\r\n\t    var cbs;\r\n\t    // all\r\n\t    if (!arguments.length) {\r\n\t      if (this.$parent) {\r\n\t        for (event in this._events) {\r\n\t          cbs = this._events[event];\r\n\t          if (cbs) {\r\n\t            modifyListenerCount(this, event, -cbs.length);\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t      this._events = {};\r\n\t      return this;\r\n\t    }\r\n\t    // specific event\r\n\t    cbs = this._events[event];\r\n\t    if (!cbs) {\r\n\t      return this;\r\n\t    }\r\n\t    if (arguments.length === 1) {\r\n\t      modifyListenerCount(this, event, -cbs.length);\r\n\t      this._events[event] = null;\r\n\t      return this;\r\n\t    }\r\n\t    // specific handler\r\n\t    var cb;\r\n\t    var i = cbs.length;\r\n\t    while (i--) {\r\n\t      cb = cbs[i];\r\n\t      if (cb === fn || cb.fn === fn) {\r\n\t        modifyListenerCount(this, event, -1);\r\n\t        cbs.splice(i, 1);\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Trigger an event on self.\r\n\t   *\r\n\t   * @param {String|Object} event\r\n\t   * @return {Boolean} shouldPropagate\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$emit = function (event) {\r\n\t    var isSource = typeof event === 'string';\r\n\t    event = isSource ? event : event.name;\r\n\t    var cbs = this._events[event];\r\n\t    var shouldPropagate = isSource || !cbs;\r\n\t    if (cbs) {\r\n\t      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n\t      // this is a somewhat hacky solution to the question raised\r\n\t      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\r\n\t      // the propagation handling is somewhat broken. Therefore we\r\n\t      // need to treat these inline callbacks differently.\r\n\t      var hasParentCbs = isSource && cbs.some(function (cb) {\r\n\t        return cb._fromParent;\r\n\t      });\r\n\t      if (hasParentCbs) {\r\n\t        shouldPropagate = false;\r\n\t      }\r\n\t      var args = toArray(arguments, 1);\r\n\t      for (var i = 0, l = cbs.length; i < l; i++) {\r\n\t        var cb = cbs[i];\r\n\t        var res = cb.apply(this, args);\r\n\t        if (res === true && (!hasParentCbs || cb._fromParent)) {\r\n\t          shouldPropagate = true;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    return shouldPropagate;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Recursively broadcast an event to all children instances.\r\n\t   *\r\n\t   * @param {String|Object} event\r\n\t   * @param {...*} additional arguments\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$broadcast = function (event) {\r\n\t    var isSource = typeof event === 'string';\r\n\t    event = isSource ? event : event.name;\r\n\t    // if no child has registered for this event,\r\n\t    // then there's no need to broadcast.\r\n\t    if (!this._eventsCount[event]) return;\r\n\t    var children = this.$children;\r\n\t    var args = toArray(arguments);\r\n\t    if (isSource) {\r\n\t      // use object event to indicate non-source emit\r\n\t      // on children\r\n\t      args[0] = { name: event, source: this };\r\n\t    }\r\n\t    for (var i = 0, l = children.length; i < l; i++) {\r\n\t      var child = children[i];\r\n\t      var shouldPropagate = child.$emit.apply(child, args);\r\n\t      if (shouldPropagate) {\r\n\t        child.$broadcast.apply(child, args);\r\n\t      }\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Recursively propagate an event up the parent chain.\r\n\t   *\r\n\t   * @param {String} event\r\n\t   * @param {...*} additional arguments\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$dispatch = function (event) {\r\n\t    var shouldPropagate = this.$emit.apply(this, arguments);\r\n\t    if (!shouldPropagate) return;\r\n\t    var parent = this.$parent;\r\n\t    var args = toArray(arguments);\r\n\t    // use object event to indicate non-source emit\r\n\t    // on parents\r\n\t    args[0] = { name: event, source: this };\r\n\t    while (parent) {\r\n\t      shouldPropagate = parent.$emit.apply(parent, args);\r\n\t      parent = shouldPropagate ? parent.$parent : null;\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Modify the listener counts on all parents.\r\n\t   * This bookkeeping allows $broadcast to return early when\r\n\t   * no child has listened to a certain event.\r\n\t   *\r\n\t   * @param {Vue} vm\r\n\t   * @param {String} event\r\n\t   * @param {Number} count\r\n\t   */\r\n\t\r\n\t  var hookRE = /^hook:/;\r\n\t  function modifyListenerCount(vm, event, count) {\r\n\t    var parent = vm.$parent;\r\n\t    // hooks do not get broadcasted so no need\r\n\t    // to do bookkeeping for them\r\n\t    if (!parent || !count || hookRE.test(event)) return;\r\n\t    while (parent) {\r\n\t      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\r\n\t      parent = parent.$parent;\r\n\t    }\r\n\t  }\r\n\t}\r\n\t\r\n\tfunction lifecycleAPI (Vue) {\r\n\t  /**\r\n\t   * Set instance target element and kick off the compilation\r\n\t   * process. The passed in `el` can be a selector string, an\r\n\t   * existing Element, or a DocumentFragment (for block\r\n\t   * instances).\r\n\t   *\r\n\t   * @param {Element|DocumentFragment|string} el\r\n\t   * @public\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$mount = function (el) {\r\n\t    if (this._isCompiled) {\r\n\t      (\"production\") !== 'production' && warn('$mount() should be called only once.', this);\r\n\t      return;\r\n\t    }\r\n\t    el = query(el);\r\n\t    if (!el) {\r\n\t      el = document.createElement('div');\r\n\t    }\r\n\t    this._compile(el);\r\n\t    this._initDOMHooks();\r\n\t    if (inDoc(this.$el)) {\r\n\t      this._callHook('attached');\r\n\t      ready.call(this);\r\n\t    } else {\r\n\t      this.$once('hook:attached', ready);\r\n\t    }\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Mark an instance as ready.\r\n\t   */\r\n\t\r\n\t  function ready() {\r\n\t    this._isAttached = true;\r\n\t    this._isReady = true;\r\n\t    this._callHook('ready');\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Teardown the instance, simply delegate to the internal\r\n\t   * _destroy.\r\n\t   *\r\n\t   * @param {Boolean} remove\r\n\t   * @param {Boolean} deferCleanup\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$destroy = function (remove, deferCleanup) {\r\n\t    this._destroy(remove, deferCleanup);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Partially compile a piece of DOM and return a\r\n\t   * decompile function.\r\n\t   *\r\n\t   * @param {Element|DocumentFragment} el\r\n\t   * @param {Vue} [host]\r\n\t   * @param {Object} [scope]\r\n\t   * @param {Fragment} [frag]\r\n\t   * @return {Function}\r\n\t   */\r\n\t\r\n\t  Vue.prototype.$compile = function (el, host, scope, frag) {\r\n\t    return compile(el, this.$options, true)(this, el, host, scope, frag);\r\n\t  };\r\n\t}\r\n\t\r\n\t/**\r\n\t * The exposed Vue constructor.\r\n\t *\r\n\t * API conventions:\r\n\t * - public API methods/properties are prefixed with `$`\r\n\t * - internal methods/properties are prefixed with `_`\r\n\t * - non-prefixed properties are assumed to be proxied user\r\n\t *   data.\r\n\t *\r\n\t * @constructor\r\n\t * @param {Object} [options]\r\n\t * @public\r\n\t */\r\n\t\r\n\tfunction Vue(options) {\r\n\t  this._init(options);\r\n\t}\r\n\t\r\n\t// install internals\r\n\tinitMixin(Vue);\r\n\tstateMixin(Vue);\r\n\teventsMixin(Vue);\r\n\tlifecycleMixin(Vue);\r\n\tmiscMixin(Vue);\r\n\t\r\n\t// install instance APIs\r\n\tdataAPI(Vue);\r\n\tdomAPI(Vue);\r\n\teventsAPI(Vue);\r\n\tlifecycleAPI(Vue);\r\n\t\r\n\tvar slot = {\r\n\t\r\n\t  priority: SLOT,\r\n\t  params: ['name'],\r\n\t\r\n\t  bind: function bind() {\r\n\t    // this was resolved during component transclusion\r\n\t    var name = this.params.name || 'default';\r\n\t    var content = this.vm._slotContents && this.vm._slotContents[name];\r\n\t    if (!content || !content.hasChildNodes()) {\r\n\t      this.fallback();\r\n\t    } else {\r\n\t      this.compile(content.cloneNode(true), this.vm._context, this.vm);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  compile: function compile(content, context, host) {\r\n\t    if (content && context) {\r\n\t      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\r\n\t        // if the inserted slot has v-if\r\n\t        // inject fallback content as the v-else\r\n\t        var elseBlock = document.createElement('template');\r\n\t        elseBlock.setAttribute('v-else', '');\r\n\t        elseBlock.innerHTML = this.el.innerHTML;\r\n\t        // the else block should be compiled in child scope\r\n\t        elseBlock._context = this.vm;\r\n\t        content.appendChild(elseBlock);\r\n\t      }\r\n\t      var scope = host ? host._scope : this._scope;\r\n\t      this.unlink = context.$compile(content, host, scope, this._frag);\r\n\t    }\r\n\t    if (content) {\r\n\t      replace(this.el, content);\r\n\t    } else {\r\n\t      remove(this.el);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  fallback: function fallback() {\r\n\t    this.compile(extractContent(this.el, true), this.vm);\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    if (this.unlink) {\r\n\t      this.unlink();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar partial = {\r\n\t\r\n\t  priority: PARTIAL,\r\n\t\r\n\t  params: ['name'],\r\n\t\r\n\t  // watch changes to name for dynamic partials\r\n\t  paramWatchers: {\r\n\t    name: function name(value) {\r\n\t      vIf.remove.call(this);\r\n\t      if (value) {\r\n\t        this.insert(value);\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  bind: function bind() {\r\n\t    this.anchor = createAnchor('v-partial');\r\n\t    replace(this.el, this.anchor);\r\n\t    this.insert(this.params.name);\r\n\t  },\r\n\t\r\n\t  insert: function insert(id) {\r\n\t    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\r\n\t    if (partial) {\r\n\t      this.factory = new FragmentFactory(this.vm, partial);\r\n\t      vIf.insert.call(this);\r\n\t    }\r\n\t  },\r\n\t\r\n\t  unbind: function unbind() {\r\n\t    if (this.frag) {\r\n\t      this.frag.destroy();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tvar elementDirectives = {\r\n\t  slot: slot,\r\n\t  partial: partial\r\n\t};\r\n\t\r\n\tvar convertArray = vFor._postProcess;\r\n\t\r\n\t/**\r\n\t * Limit filter for arrays\r\n\t *\r\n\t * @param {Number} n\r\n\t * @param {Number} offset (Decimal expected)\r\n\t */\r\n\t\r\n\tfunction limitBy(arr, n, offset) {\r\n\t  offset = offset ? parseInt(offset, 10) : 0;\r\n\t  n = toNumber(n);\r\n\t  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Filter filter for arrays\r\n\t *\r\n\t * @param {String} search\r\n\t * @param {String} [delimiter]\r\n\t * @param {String} ...dataKeys\r\n\t */\r\n\t\r\n\tfunction filterBy(arr, search, delimiter) {\r\n\t  arr = convertArray(arr);\r\n\t  if (search == null) {\r\n\t    return arr;\r\n\t  }\r\n\t  if (typeof search === 'function') {\r\n\t    return arr.filter(search);\r\n\t  }\r\n\t  // cast to lowercase string\r\n\t  search = ('' + search).toLowerCase();\r\n\t  // allow optional `in` delimiter\r\n\t  // because why not\r\n\t  var n = delimiter === 'in' ? 3 : 2;\r\n\t  // extract and flatten keys\r\n\t  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\r\n\t  var res = [];\r\n\t  var item, key, val, j;\r\n\t  for (var i = 0, l = arr.length; i < l; i++) {\r\n\t    item = arr[i];\r\n\t    val = item && item.$value || item;\r\n\t    j = keys.length;\r\n\t    if (j) {\r\n\t      while (j--) {\r\n\t        key = keys[j];\r\n\t        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\r\n\t          res.push(item);\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t    } else if (contains(item, search)) {\r\n\t      res.push(item);\r\n\t    }\r\n\t  }\r\n\t  return res;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Order filter for arrays\r\n\t *\r\n\t * @param {String|Array<String>|Function} ...sortKeys\r\n\t * @param {Number} [order]\r\n\t */\r\n\t\r\n\tfunction orderBy(arr) {\r\n\t  var comparator = null;\r\n\t  var sortKeys = undefined;\r\n\t  arr = convertArray(arr);\r\n\t\r\n\t  // determine order (last argument)\r\n\t  var args = toArray(arguments, 1);\r\n\t  var order = args[args.length - 1];\r\n\t  if (typeof order === 'number') {\r\n\t    order = order < 0 ? -1 : 1;\r\n\t    args = args.length > 1 ? args.slice(0, -1) : args;\r\n\t  } else {\r\n\t    order = 1;\r\n\t  }\r\n\t\r\n\t  // determine sortKeys & comparator\r\n\t  var firstArg = args[0];\r\n\t  if (!firstArg) {\r\n\t    return arr;\r\n\t  } else if (typeof firstArg === 'function') {\r\n\t    // custom comparator\r\n\t    comparator = function (a, b) {\r\n\t      return firstArg(a, b) * order;\r\n\t    };\r\n\t  } else {\r\n\t    // string keys. flatten first\r\n\t    sortKeys = Array.prototype.concat.apply([], args);\r\n\t    comparator = function (a, b, i) {\r\n\t      i = i || 0;\r\n\t      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\r\n\t    };\r\n\t  }\r\n\t\r\n\t  function baseCompare(a, b, sortKeyIndex) {\r\n\t    var sortKey = sortKeys[sortKeyIndex];\r\n\t    if (sortKey) {\r\n\t      if (sortKey !== '$key') {\r\n\t        if (isObject(a) && '$value' in a) a = a.$value;\r\n\t        if (isObject(b) && '$value' in b) b = b.$value;\r\n\t      }\r\n\t      a = isObject(a) ? getPath(a, sortKey) : a;\r\n\t      b = isObject(b) ? getPath(b, sortKey) : b;\r\n\t    }\r\n\t    return a === b ? 0 : a > b ? order : -order;\r\n\t  }\r\n\t\r\n\t  // sort on a copy to avoid mutating original array\r\n\t  return arr.slice().sort(comparator);\r\n\t}\r\n\t\r\n\t/**\r\n\t * String contain helper\r\n\t *\r\n\t * @param {*} val\r\n\t * @param {String} search\r\n\t */\r\n\t\r\n\tfunction contains(val, search) {\r\n\t  var i;\r\n\t  if (isPlainObject(val)) {\r\n\t    var keys = Object.keys(val);\r\n\t    i = keys.length;\r\n\t    while (i--) {\r\n\t      if (contains(val[keys[i]], search)) {\r\n\t        return true;\r\n\t      }\r\n\t    }\r\n\t  } else if (isArray(val)) {\r\n\t    i = val.length;\r\n\t    while (i--) {\r\n\t      if (contains(val[i], search)) {\r\n\t        return true;\r\n\t      }\r\n\t    }\r\n\t  } else if (val != null) {\r\n\t    return val.toString().toLowerCase().indexOf(search) > -1;\r\n\t  }\r\n\t}\r\n\t\r\n\tvar digitsRE = /(\\d{3})(?=\\d)/g;\r\n\t\r\n\t// asset collections must be a plain object.\r\n\tvar filters = {\r\n\t\r\n\t  orderBy: orderBy,\r\n\t  filterBy: filterBy,\r\n\t  limitBy: limitBy,\r\n\t\r\n\t  /**\r\n\t   * Stringify value.\r\n\t   *\r\n\t   * @param {Number} indent\r\n\t   */\r\n\t\r\n\t  json: {\r\n\t    read: function read(value, indent) {\r\n\t      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\r\n\t    },\r\n\t    write: function write(value) {\r\n\t      try {\r\n\t        return JSON.parse(value);\r\n\t      } catch (e) {\r\n\t        return value;\r\n\t      }\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * 'abc' => 'Abc'\r\n\t   */\r\n\t\r\n\t  capitalize: function capitalize(value) {\r\n\t    if (!value && value !== 0) return '';\r\n\t    value = value.toString();\r\n\t    return value.charAt(0).toUpperCase() + value.slice(1);\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * 'abc' => 'ABC'\r\n\t   */\r\n\t\r\n\t  uppercase: function uppercase(value) {\r\n\t    return value || value === 0 ? value.toString().toUpperCase() : '';\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * 'AbC' => 'abc'\r\n\t   */\r\n\t\r\n\t  lowercase: function lowercase(value) {\r\n\t    return value || value === 0 ? value.toString().toLowerCase() : '';\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * 12345 => $12,345.00\r\n\t   *\r\n\t   * @param {String} sign\r\n\t   * @param {Number} decimals Decimal places\r\n\t   */\r\n\t\r\n\t  currency: function currency(value, _currency, decimals) {\r\n\t    value = parseFloat(value);\r\n\t    if (!isFinite(value) || !value && value !== 0) return '';\r\n\t    _currency = _currency != null ? _currency : '$';\r\n\t    decimals = decimals != null ? decimals : 2;\r\n\t    var stringified = Math.abs(value).toFixed(decimals);\r\n\t    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\r\n\t    var i = _int.length % 3;\r\n\t    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\r\n\t    var _float = decimals ? stringified.slice(-1 - decimals) : '';\r\n\t    var sign = value < 0 ? '-' : '';\r\n\t    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * 'item' => 'items'\r\n\t   *\r\n\t   * @params\r\n\t   *  an array of strings corresponding to\r\n\t   *  the single, double, triple ... forms of the word to\r\n\t   *  be pluralized. When the number to be pluralized\r\n\t   *  exceeds the length of the args, it will use the last\r\n\t   *  entry in the array.\r\n\t   *\r\n\t   *  e.g. ['single', 'double', 'triple', 'multiple']\r\n\t   */\r\n\t\r\n\t  pluralize: function pluralize(value) {\r\n\t    var args = toArray(arguments, 1);\r\n\t    var length = args.length;\r\n\t    if (length > 1) {\r\n\t      var index = value % 10 - 1;\r\n\t      return index in args ? args[index] : args[length - 1];\r\n\t    } else {\r\n\t      return args[0] + (value === 1 ? '' : 's');\r\n\t    }\r\n\t  },\r\n\t\r\n\t  /**\r\n\t   * Debounce a handler function.\r\n\t   *\r\n\t   * @param {Function} handler\r\n\t   * @param {Number} delay = 300\r\n\t   * @return {Function}\r\n\t   */\r\n\t\r\n\t  debounce: function debounce(handler, delay) {\r\n\t    if (!handler) return;\r\n\t    if (!delay) {\r\n\t      delay = 300;\r\n\t    }\r\n\t    return _debounce(handler, delay);\r\n\t  }\r\n\t};\r\n\t\r\n\tfunction installGlobalAPI (Vue) {\r\n\t  /**\r\n\t   * Vue and every constructor that extends Vue has an\r\n\t   * associated options object, which can be accessed during\r\n\t   * compilation steps as `this.constructor.options`.\r\n\t   *\r\n\t   * These can be seen as the default options of every\r\n\t   * Vue instance.\r\n\t   */\r\n\t\r\n\t  Vue.options = {\r\n\t    directives: directives,\r\n\t    elementDirectives: elementDirectives,\r\n\t    filters: filters,\r\n\t    transitions: {},\r\n\t    components: {},\r\n\t    partials: {},\r\n\t    replace: true\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Expose useful internals\r\n\t   */\r\n\t\r\n\t  Vue.util = util;\r\n\t  Vue.config = config;\r\n\t  Vue.set = set;\r\n\t  Vue['delete'] = del;\r\n\t  Vue.nextTick = nextTick;\r\n\t\r\n\t  /**\r\n\t   * The following are exposed for advanced usage / plugins\r\n\t   */\r\n\t\r\n\t  Vue.compiler = compiler;\r\n\t  Vue.FragmentFactory = FragmentFactory;\r\n\t  Vue.internalDirectives = internalDirectives;\r\n\t  Vue.parsers = {\r\n\t    path: path,\r\n\t    text: text,\r\n\t    template: template,\r\n\t    directive: directive,\r\n\t    expression: expression\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Each instance constructor, including Vue, has a unique\r\n\t   * cid. This enables us to create wrapped \"child\r\n\t   * constructors\" for prototypal inheritance and cache them.\r\n\t   */\r\n\t\r\n\t  Vue.cid = 0;\r\n\t  var cid = 1;\r\n\t\r\n\t  /**\r\n\t   * Class inheritance\r\n\t   *\r\n\t   * @param {Object} extendOptions\r\n\t   */\r\n\t\r\n\t  Vue.extend = function (extendOptions) {\r\n\t    extendOptions = extendOptions || {};\r\n\t    var Super = this;\r\n\t    var isFirstExtend = Super.cid === 0;\r\n\t    if (isFirstExtend && extendOptions._Ctor) {\r\n\t      return extendOptions._Ctor;\r\n\t    }\r\n\t    var name = extendOptions.name || Super.options.name;\r\n\t    if (false) {\r\n\t      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\r\n\t        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\r\n\t        name = null;\r\n\t      }\r\n\t    }\r\n\t    var Sub = createClass(name || 'VueComponent');\r\n\t    Sub.prototype = Object.create(Super.prototype);\r\n\t    Sub.prototype.constructor = Sub;\r\n\t    Sub.cid = cid++;\r\n\t    Sub.options = mergeOptions(Super.options, extendOptions);\r\n\t    Sub['super'] = Super;\r\n\t    // allow further extension\r\n\t    Sub.extend = Super.extend;\r\n\t    // create asset registers, so extended classes\r\n\t    // can have their private assets too.\r\n\t    config._assetTypes.forEach(function (type) {\r\n\t      Sub[type] = Super[type];\r\n\t    });\r\n\t    // enable recursive self-lookup\r\n\t    if (name) {\r\n\t      Sub.options.components[name] = Sub;\r\n\t    }\r\n\t    // cache constructor\r\n\t    if (isFirstExtend) {\r\n\t      extendOptions._Ctor = Sub;\r\n\t    }\r\n\t    return Sub;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * A function that returns a sub-class constructor with the\r\n\t   * given name. This gives us much nicer output when\r\n\t   * logging instances in the console.\r\n\t   *\r\n\t   * @param {String} name\r\n\t   * @return {Function}\r\n\t   */\r\n\t\r\n\t  function createClass(name) {\r\n\t    /* eslint-disable no-new-func */\r\n\t    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\r\n\t    /* eslint-enable no-new-func */\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Plugin system\r\n\t   *\r\n\t   * @param {Object} plugin\r\n\t   */\r\n\t\r\n\t  Vue.use = function (plugin) {\r\n\t    /* istanbul ignore if */\r\n\t    if (plugin.installed) {\r\n\t      return;\r\n\t    }\r\n\t    // additional parameters\r\n\t    var args = toArray(arguments, 1);\r\n\t    args.unshift(this);\r\n\t    if (typeof plugin.install === 'function') {\r\n\t      plugin.install.apply(plugin, args);\r\n\t    } else {\r\n\t      plugin.apply(null, args);\r\n\t    }\r\n\t    plugin.installed = true;\r\n\t    return this;\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Apply a global mixin by merging it into the default\r\n\t   * options.\r\n\t   */\r\n\t\r\n\t  Vue.mixin = function (mixin) {\r\n\t    Vue.options = mergeOptions(Vue.options, mixin);\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Create asset registration methods with the following\r\n\t   * signature:\r\n\t   *\r\n\t   * @param {String} id\r\n\t   * @param {*} definition\r\n\t   */\r\n\t\r\n\t  config._assetTypes.forEach(function (type) {\r\n\t    Vue[type] = function (id, definition) {\r\n\t      if (!definition) {\r\n\t        return this.options[type + 's'][id];\r\n\t      } else {\r\n\t        /* istanbul ignore if */\r\n\t        if (false) {\r\n\t          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\r\n\t            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\r\n\t          }\r\n\t        }\r\n\t        if (type === 'component' && isPlainObject(definition)) {\r\n\t          if (!definition.name) {\r\n\t            definition.name = id;\r\n\t          }\r\n\t          definition = Vue.extend(definition);\r\n\t        }\r\n\t        this.options[type + 's'][id] = definition;\r\n\t        return definition;\r\n\t      }\r\n\t    };\r\n\t  });\r\n\t\r\n\t  // expose internal transition API\r\n\t  extend(Vue.transition, transition);\r\n\t}\r\n\t\r\n\tinstallGlobalAPI(Vue);\r\n\t\r\n\tVue.version = '1.0.28';\r\n\t\r\n\t// devtools global hook\r\n\t/* istanbul ignore next */\r\n\tsetTimeout(function () {\r\n\t  if (config.devtools) {\r\n\t    if (devtools) {\r\n\t      devtools.emit('init', Vue);\r\n\t    } else if (false) {\r\n\t      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\r\n\t    }\r\n\t  }\r\n\t}, 0);\r\n\t\r\n\tmodule.exports = Vue;\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/vendor.40d72f1e08d4d0677cc0.js","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 5\n// module chunks = 3","/*!\r\n * vue-router v0.7.13\r\n * (c) 2016 Evan You\r\n * Released under the MIT License.\r\n */\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  global.VueRouter = factory();\r\n}(this, function () { 'use strict';\r\n\r\n  var babelHelpers = {};\r\n\r\n  babelHelpers.classCallCheck = function (instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n      throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n  };\r\n  function Target(path, matcher, delegate) {\r\n    this.path = path;\r\n    this.matcher = matcher;\r\n    this.delegate = delegate;\r\n  }\r\n\r\n  Target.prototype = {\r\n    to: function to(target, callback) {\r\n      var delegate = this.delegate;\r\n\r\n      if (delegate && delegate.willAddRoute) {\r\n        target = delegate.willAddRoute(this.matcher.target, target);\r\n      }\r\n\r\n      this.matcher.add(this.path, target);\r\n\r\n      if (callback) {\r\n        if (callback.length === 0) {\r\n          throw new Error(\"You must have an argument in the function passed to `to`\");\r\n        }\r\n        this.matcher.addChild(this.path, target, callback, this.delegate);\r\n      }\r\n      return this;\r\n    }\r\n  };\r\n\r\n  function Matcher(target) {\r\n    this.routes = {};\r\n    this.children = {};\r\n    this.target = target;\r\n  }\r\n\r\n  Matcher.prototype = {\r\n    add: function add(path, handler) {\r\n      this.routes[path] = handler;\r\n    },\r\n\r\n    addChild: function addChild(path, target, callback, delegate) {\r\n      var matcher = new Matcher(target);\r\n      this.children[path] = matcher;\r\n\r\n      var match = generateMatch(path, matcher, delegate);\r\n\r\n      if (delegate && delegate.contextEntered) {\r\n        delegate.contextEntered(target, match);\r\n      }\r\n\r\n      callback(match);\r\n    }\r\n  };\r\n\r\n  function generateMatch(startingPath, matcher, delegate) {\r\n    return function (path, nestedCallback) {\r\n      var fullPath = startingPath + path;\r\n\r\n      if (nestedCallback) {\r\n        nestedCallback(generateMatch(fullPath, matcher, delegate));\r\n      } else {\r\n        return new Target(startingPath + path, matcher, delegate);\r\n      }\r\n    };\r\n  }\r\n\r\n  function addRoute(routeArray, path, handler) {\r\n    var len = 0;\r\n    for (var i = 0, l = routeArray.length; i < l; i++) {\r\n      len += routeArray[i].path.length;\r\n    }\r\n\r\n    path = path.substr(len);\r\n    var route = { path: path, handler: handler };\r\n    routeArray.push(route);\r\n  }\r\n\r\n  function eachRoute(baseRoute, matcher, callback, binding) {\r\n    var routes = matcher.routes;\r\n\r\n    for (var path in routes) {\r\n      if (routes.hasOwnProperty(path)) {\r\n        var routeArray = baseRoute.slice();\r\n        addRoute(routeArray, path, routes[path]);\r\n\r\n        if (matcher.children[path]) {\r\n          eachRoute(routeArray, matcher.children[path], callback, binding);\r\n        } else {\r\n          callback.call(binding, routeArray);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function map (callback, addRouteCallback) {\r\n    var matcher = new Matcher();\r\n\r\n    callback(generateMatch(\"\", matcher, this.delegate));\r\n\r\n    eachRoute([], matcher, function (route) {\r\n      if (addRouteCallback) {\r\n        addRouteCallback(this, route);\r\n      } else {\r\n        this.add(route);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\r\n\r\n  var escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\r\n\r\n  var noWarning = false;\r\n  function warn(msg) {\r\n    if (!noWarning && typeof console !== 'undefined') {\r\n      console.error('[vue-router] ' + msg);\r\n    }\r\n  }\r\n\r\n  function tryDecode(uri, asComponent) {\r\n    try {\r\n      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);\r\n    } catch (e) {\r\n      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);\r\n    }\r\n  }\r\n\r\n  function isArray(test) {\r\n    return Object.prototype.toString.call(test) === \"[object Array]\";\r\n  }\r\n\r\n  // A Segment represents a segment in the original route description.\r\n  // Each Segment type provides an `eachChar` and `regex` method.\r\n  //\r\n  // The `eachChar` method invokes the callback with one or more character\r\n  // specifications. A character specification consumes one or more input\r\n  // characters.\r\n  //\r\n  // The `regex` method returns a regex fragment for the segment. If the\r\n  // segment is a dynamic of star segment, the regex fragment also includes\r\n  // a capture.\r\n  //\r\n  // A character specification contains:\r\n  //\r\n  // * `validChars`: a String with a list of all valid characters, or\r\n  // * `invalidChars`: a String with a list of all invalid characters\r\n  // * `repeat`: true if the character specification can repeat\r\n\r\n  function StaticSegment(string) {\r\n    this.string = string;\r\n  }\r\n  StaticSegment.prototype = {\r\n    eachChar: function eachChar(callback) {\r\n      var string = this.string,\r\n          ch;\r\n\r\n      for (var i = 0, l = string.length; i < l; i++) {\r\n        ch = string.charAt(i);\r\n        callback({ validChars: ch });\r\n      }\r\n    },\r\n\r\n    regex: function regex() {\r\n      return this.string.replace(escapeRegex, '\\\\$1');\r\n    },\r\n\r\n    generate: function generate() {\r\n      return this.string;\r\n    }\r\n  };\r\n\r\n  function DynamicSegment(name) {\r\n    this.name = name;\r\n  }\r\n  DynamicSegment.prototype = {\r\n    eachChar: function eachChar(callback) {\r\n      callback({ invalidChars: \"/\", repeat: true });\r\n    },\r\n\r\n    regex: function regex() {\r\n      return \"([^/]+)\";\r\n    },\r\n\r\n    generate: function generate(params) {\r\n      var val = params[this.name];\r\n      return val == null ? \":\" + this.name : val;\r\n    }\r\n  };\r\n\r\n  function StarSegment(name) {\r\n    this.name = name;\r\n  }\r\n  StarSegment.prototype = {\r\n    eachChar: function eachChar(callback) {\r\n      callback({ invalidChars: \"\", repeat: true });\r\n    },\r\n\r\n    regex: function regex() {\r\n      return \"(.+)\";\r\n    },\r\n\r\n    generate: function generate(params) {\r\n      var val = params[this.name];\r\n      return val == null ? \":\" + this.name : val;\r\n    }\r\n  };\r\n\r\n  function EpsilonSegment() {}\r\n  EpsilonSegment.prototype = {\r\n    eachChar: function eachChar() {},\r\n    regex: function regex() {\r\n      return \"\";\r\n    },\r\n    generate: function generate() {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  function parse(route, names, specificity) {\r\n    // normalize route as not starting with a \"/\". Recognition will\r\n    // also normalize.\r\n    if (route.charAt(0) === \"/\") {\r\n      route = route.substr(1);\r\n    }\r\n\r\n    var segments = route.split(\"/\"),\r\n        results = [];\r\n\r\n    // A routes has specificity determined by the order that its different segments\r\n    // appear in. This system mirrors how the magnitude of numbers written as strings\r\n    // works.\r\n    // Consider a number written as: \"abc\". An example would be \"200\". Any other number written\r\n    // \"xyz\" will be smaller than \"abc\" so long as `a > z`. For instance, \"199\" is smaller\r\n    // then \"200\", even though \"y\" and \"z\" (which are both 9) are larger than \"0\" (the value\r\n    // of (`b` and `c`). This is because the leading symbol, \"2\", is larger than the other\r\n    // leading symbol, \"1\".\r\n    // The rule is that symbols to the left carry more weight than symbols to the right\r\n    // when a number is written out as a string. In the above strings, the leading digit\r\n    // represents how many 100's are in the number, and it carries more weight than the middle\r\n    // number which represents how many 10's are in the number.\r\n    // This system of number magnitude works well for route specificity, too. A route written as\r\n    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than\r\n    // `x`, irrespective of the other parts.\r\n    // Because of this similarity, we assign each type of segment a number value written as a\r\n    // string. We can find the specificity of compound routes by concatenating these strings\r\n    // together, from left to right. After we have looped through all of the segments,\r\n    // we convert the string to a number.\r\n    specificity.val = '';\r\n\r\n    for (var i = 0, l = segments.length; i < l; i++) {\r\n      var segment = segments[i],\r\n          match;\r\n\r\n      if (match = segment.match(/^:([^\\/]+)$/)) {\r\n        results.push(new DynamicSegment(match[1]));\r\n        names.push(match[1]);\r\n        specificity.val += '3';\r\n      } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\r\n        results.push(new StarSegment(match[1]));\r\n        specificity.val += '2';\r\n        names.push(match[1]);\r\n      } else if (segment === \"\") {\r\n        results.push(new EpsilonSegment());\r\n        specificity.val += '1';\r\n      } else {\r\n        results.push(new StaticSegment(segment));\r\n        specificity.val += '4';\r\n      }\r\n    }\r\n\r\n    specificity.val = +specificity.val;\r\n\r\n    return results;\r\n  }\r\n\r\n  // A State has a character specification and (`charSpec`) and a list of possible\r\n  // subsequent states (`nextStates`).\r\n  //\r\n  // If a State is an accepting state, it will also have several additional\r\n  // properties:\r\n  //\r\n  // * `regex`: A regular expression that is used to extract parameters from paths\r\n  //   that reached this accepting state.\r\n  // * `handlers`: Information on how to convert the list of captures into calls\r\n  //   to registered handlers with the specified parameters\r\n  // * `types`: How many static, dynamic or star segments in this route. Used to\r\n  //   decide which route to use if multiple registered routes match a path.\r\n  //\r\n  // Currently, State is implemented naively by looping over `nextStates` and\r\n  // comparing a character specification against a character. A more efficient\r\n  // implementation would use a hash of keys pointing at one or more next states.\r\n\r\n  function State(charSpec) {\r\n    this.charSpec = charSpec;\r\n    this.nextStates = [];\r\n  }\r\n\r\n  State.prototype = {\r\n    get: function get(charSpec) {\r\n      var nextStates = this.nextStates;\r\n\r\n      for (var i = 0, l = nextStates.length; i < l; i++) {\r\n        var child = nextStates[i];\r\n\r\n        var isEqual = child.charSpec.validChars === charSpec.validChars;\r\n        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;\r\n\r\n        if (isEqual) {\r\n          return child;\r\n        }\r\n      }\r\n    },\r\n\r\n    put: function put(charSpec) {\r\n      var state;\r\n\r\n      // If the character specification already exists in a child of the current\r\n      // state, just return that state.\r\n      if (state = this.get(charSpec)) {\r\n        return state;\r\n      }\r\n\r\n      // Make a new state for the character spec\r\n      state = new State(charSpec);\r\n\r\n      // Insert the new state as a child of the current state\r\n      this.nextStates.push(state);\r\n\r\n      // If this character specification repeats, insert the new state as a child\r\n      // of itself. Note that this will not trigger an infinite loop because each\r\n      // transition during recognition consumes a character.\r\n      if (charSpec.repeat) {\r\n        state.nextStates.push(state);\r\n      }\r\n\r\n      // Return the new state\r\n      return state;\r\n    },\r\n\r\n    // Find a list of child states matching the next character\r\n    match: function match(ch) {\r\n      // DEBUG \"Processing `\" + ch + \"`:\"\r\n      var nextStates = this.nextStates,\r\n          child,\r\n          charSpec,\r\n          chars;\r\n\r\n      // DEBUG \"  \" + debugState(this)\r\n      var returned = [];\r\n\r\n      for (var i = 0, l = nextStates.length; i < l; i++) {\r\n        child = nextStates[i];\r\n\r\n        charSpec = child.charSpec;\r\n\r\n        if (typeof (chars = charSpec.validChars) !== 'undefined') {\r\n          if (chars.indexOf(ch) !== -1) {\r\n            returned.push(child);\r\n          }\r\n        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\r\n          if (chars.indexOf(ch) === -1) {\r\n            returned.push(child);\r\n          }\r\n        }\r\n      }\r\n\r\n      return returned;\r\n    }\r\n\r\n    /** IF DEBUG\r\n    , debug: function() {\r\n      var charSpec = this.charSpec,\r\n          debug = \"[\",\r\n          chars = charSpec.validChars || charSpec.invalidChars;\r\n       if (charSpec.invalidChars) { debug += \"^\"; }\r\n      debug += chars;\r\n      debug += \"]\";\r\n       if (charSpec.repeat) { debug += \"+\"; }\r\n       return debug;\r\n    }\r\n    END IF **/\r\n  };\r\n\r\n  /** IF DEBUG\r\n  function debug(log) {\r\n    console.log(log);\r\n  }\r\n\r\n  function debugState(state) {\r\n    return state.nextStates.map(function(n) {\r\n      if (n.nextStates.length === 0) { return \"( \" + n.debug() + \" [accepting] )\"; }\r\n      return \"( \" + n.debug() + \" <then> \" + n.nextStates.map(function(s) { return s.debug() }).join(\" or \") + \" )\";\r\n    }).join(\", \")\r\n  }\r\n  END IF **/\r\n\r\n  // Sort the routes by specificity\r\n  function sortSolutions(states) {\r\n    return states.sort(function (a, b) {\r\n      return b.specificity.val - a.specificity.val;\r\n    });\r\n  }\r\n\r\n  function recognizeChar(states, ch) {\r\n    var nextStates = [];\r\n\r\n    for (var i = 0, l = states.length; i < l; i++) {\r\n      var state = states[i];\r\n\r\n      nextStates = nextStates.concat(state.match(ch));\r\n    }\r\n\r\n    return nextStates;\r\n  }\r\n\r\n  var oCreate = Object.create || function (proto) {\r\n    function F() {}\r\n    F.prototype = proto;\r\n    return new F();\r\n  };\r\n\r\n  function RecognizeResults(queryParams) {\r\n    this.queryParams = queryParams || {};\r\n  }\r\n  RecognizeResults.prototype = oCreate({\r\n    splice: Array.prototype.splice,\r\n    slice: Array.prototype.slice,\r\n    push: Array.prototype.push,\r\n    length: 0,\r\n    queryParams: null\r\n  });\r\n\r\n  function findHandler(state, path, queryParams) {\r\n    var handlers = state.handlers,\r\n        regex = state.regex;\r\n    var captures = path.match(regex),\r\n        currentCapture = 1;\r\n    var result = new RecognizeResults(queryParams);\r\n\r\n    for (var i = 0, l = handlers.length; i < l; i++) {\r\n      var handler = handlers[i],\r\n          names = handler.names,\r\n          params = {};\r\n\r\n      for (var j = 0, m = names.length; j < m; j++) {\r\n        params[names[j]] = captures[currentCapture++];\r\n      }\r\n\r\n      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  function addSegment(currentState, segment) {\r\n    segment.eachChar(function (ch) {\r\n      var state;\r\n\r\n      currentState = currentState.put(ch);\r\n    });\r\n\r\n    return currentState;\r\n  }\r\n\r\n  function decodeQueryParamPart(part) {\r\n    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\r\n    part = part.replace(/\\+/gm, '%20');\r\n    return tryDecode(part, true);\r\n  }\r\n\r\n  // The main interface\r\n\r\n  var RouteRecognizer = function RouteRecognizer() {\r\n    this.rootState = new State();\r\n    this.names = {};\r\n  };\r\n\r\n  RouteRecognizer.prototype = {\r\n    add: function add(routes, options) {\r\n      var currentState = this.rootState,\r\n          regex = \"^\",\r\n          specificity = {},\r\n          handlers = [],\r\n          allSegments = [],\r\n          name;\r\n\r\n      var isEmpty = true;\r\n\r\n      for (var i = 0, l = routes.length; i < l; i++) {\r\n        var route = routes[i],\r\n            names = [];\r\n\r\n        var segments = parse(route.path, names, specificity);\r\n\r\n        allSegments = allSegments.concat(segments);\r\n\r\n        for (var j = 0, m = segments.length; j < m; j++) {\r\n          var segment = segments[j];\r\n\r\n          if (segment instanceof EpsilonSegment) {\r\n            continue;\r\n          }\r\n\r\n          isEmpty = false;\r\n\r\n          // Add a \"/\" for the new segment\r\n          currentState = currentState.put({ validChars: \"/\" });\r\n          regex += \"/\";\r\n\r\n          // Add a representation of the segment to the NFA and regex\r\n          currentState = addSegment(currentState, segment);\r\n          regex += segment.regex();\r\n        }\r\n\r\n        var handler = { handler: route.handler, names: names };\r\n        handlers.push(handler);\r\n      }\r\n\r\n      if (isEmpty) {\r\n        currentState = currentState.put({ validChars: \"/\" });\r\n        regex += \"/\";\r\n      }\r\n\r\n      currentState.handlers = handlers;\r\n      currentState.regex = new RegExp(regex + \"$\");\r\n      currentState.specificity = specificity;\r\n\r\n      if (name = options && options.as) {\r\n        this.names[name] = {\r\n          segments: allSegments,\r\n          handlers: handlers\r\n        };\r\n      }\r\n    },\r\n\r\n    handlersFor: function handlersFor(name) {\r\n      var route = this.names[name],\r\n          result = [];\r\n      if (!route) {\r\n        throw new Error(\"There is no route named \" + name);\r\n      }\r\n\r\n      for (var i = 0, l = route.handlers.length; i < l; i++) {\r\n        result.push(route.handlers[i]);\r\n      }\r\n\r\n      return result;\r\n    },\r\n\r\n    hasRoute: function hasRoute(name) {\r\n      return !!this.names[name];\r\n    },\r\n\r\n    generate: function generate(name, params) {\r\n      var route = this.names[name],\r\n          output = \"\";\r\n      if (!route) {\r\n        throw new Error(\"There is no route named \" + name);\r\n      }\r\n\r\n      var segments = route.segments;\r\n\r\n      for (var i = 0, l = segments.length; i < l; i++) {\r\n        var segment = segments[i];\r\n\r\n        if (segment instanceof EpsilonSegment) {\r\n          continue;\r\n        }\r\n\r\n        output += \"/\";\r\n        output += segment.generate(params);\r\n      }\r\n\r\n      if (output.charAt(0) !== '/') {\r\n        output = '/' + output;\r\n      }\r\n\r\n      if (params && params.queryParams) {\r\n        output += this.generateQueryString(params.queryParams);\r\n      }\r\n\r\n      return output;\r\n    },\r\n\r\n    generateQueryString: function generateQueryString(params) {\r\n      var pairs = [];\r\n      var keys = [];\r\n      for (var key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n          keys.push(key);\r\n        }\r\n      }\r\n      keys.sort();\r\n      for (var i = 0, len = keys.length; i < len; i++) {\r\n        key = keys[i];\r\n        var value = params[key];\r\n        if (value == null) {\r\n          continue;\r\n        }\r\n        var pair = encodeURIComponent(key);\r\n        if (isArray(value)) {\r\n          for (var j = 0, l = value.length; j < l; j++) {\r\n            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\r\n            pairs.push(arrayPair);\r\n          }\r\n        } else {\r\n          pair += \"=\" + encodeURIComponent(value);\r\n          pairs.push(pair);\r\n        }\r\n      }\r\n\r\n      if (pairs.length === 0) {\r\n        return '';\r\n      }\r\n\r\n      return \"?\" + pairs.join(\"&\");\r\n    },\r\n\r\n    parseQueryString: function parseQueryString(queryString) {\r\n      var pairs = queryString.split(\"&\"),\r\n          queryParams = {};\r\n      for (var i = 0; i < pairs.length; i++) {\r\n        var pair = pairs[i].split('='),\r\n            key = decodeQueryParamPart(pair[0]),\r\n            keyLength = key.length,\r\n            isArray = false,\r\n            value;\r\n        if (pair.length === 1) {\r\n          value = 'true';\r\n        } else {\r\n          //Handle arrays\r\n          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {\r\n            isArray = true;\r\n            key = key.slice(0, keyLength - 2);\r\n            if (!queryParams[key]) {\r\n              queryParams[key] = [];\r\n            }\r\n          }\r\n          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';\r\n        }\r\n        if (isArray) {\r\n          queryParams[key].push(value);\r\n        } else {\r\n          queryParams[key] = value;\r\n        }\r\n      }\r\n      return queryParams;\r\n    },\r\n\r\n    recognize: function recognize(path, silent) {\r\n      noWarning = silent;\r\n      var states = [this.rootState],\r\n          pathLen,\r\n          i,\r\n          l,\r\n          queryStart,\r\n          queryParams = {},\r\n          isSlashDropped = false;\r\n\r\n      queryStart = path.indexOf('?');\r\n      if (queryStart !== -1) {\r\n        var queryString = path.substr(queryStart + 1, path.length);\r\n        path = path.substr(0, queryStart);\r\n        if (queryString) {\r\n          queryParams = this.parseQueryString(queryString);\r\n        }\r\n      }\r\n\r\n      path = tryDecode(path);\r\n      if (!path) return;\r\n\r\n      // DEBUG GROUP path\r\n\r\n      if (path.charAt(0) !== \"/\") {\r\n        path = \"/\" + path;\r\n      }\r\n\r\n      pathLen = path.length;\r\n      if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\r\n        path = path.substr(0, pathLen - 1);\r\n        isSlashDropped = true;\r\n      }\r\n\r\n      for (i = 0, l = path.length; i < l; i++) {\r\n        states = recognizeChar(states, path.charAt(i));\r\n        if (!states.length) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // END DEBUG GROUP\r\n\r\n      var solutions = [];\r\n      for (i = 0, l = states.length; i < l; i++) {\r\n        if (states[i].handlers) {\r\n          solutions.push(states[i]);\r\n        }\r\n      }\r\n\r\n      states = sortSolutions(solutions);\r\n\r\n      var state = solutions[0];\r\n\r\n      if (state && state.handlers) {\r\n        // if a trailing slash was dropped and a star segment is the last segment\r\n        // specified, put the trailing slash back\r\n        if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\r\n          path = path + \"/\";\r\n        }\r\n        return findHandler(state, path, queryParams);\r\n      }\r\n    }\r\n  };\r\n\r\n  RouteRecognizer.prototype.map = map;\r\n\r\n  var genQuery = RouteRecognizer.prototype.generateQueryString;\r\n\r\n  // export default for holding the Vue reference\r\n  var exports$1 = {};\r\n  /**\r\n   * Warn stuff.\r\n   *\r\n   * @param {String} msg\r\n   */\r\n\r\n  function warn$1(msg) {\r\n    /* istanbul ignore next */\r\n    if (typeof console !== 'undefined') {\r\n      console.error('[vue-router] ' + msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resolve a relative path.\r\n   *\r\n   * @param {String} base\r\n   * @param {String} relative\r\n   * @param {Boolean} append\r\n   * @return {String}\r\n   */\r\n\r\n  function resolvePath(base, relative, append) {\r\n    var query = base.match(/(\\?.*)$/);\r\n    if (query) {\r\n      query = query[1];\r\n      base = base.slice(0, -query.length);\r\n    }\r\n    // a query!\r\n    if (relative.charAt(0) === '?') {\r\n      return base + relative;\r\n    }\r\n    var stack = base.split('/');\r\n    // remove trailing segment if:\r\n    // - not appending\r\n    // - appending to trailing slash (last segment is empty)\r\n    if (!append || !stack[stack.length - 1]) {\r\n      stack.pop();\r\n    }\r\n    // resolve relative path\r\n    var segments = relative.replace(/^\\//, '').split('/');\r\n    for (var i = 0; i < segments.length; i++) {\r\n      var segment = segments[i];\r\n      if (segment === '.') {\r\n        continue;\r\n      } else if (segment === '..') {\r\n        stack.pop();\r\n      } else {\r\n        stack.push(segment);\r\n      }\r\n    }\r\n    // ensure leading slash\r\n    if (stack[0] !== '') {\r\n      stack.unshift('');\r\n    }\r\n    return stack.join('/');\r\n  }\r\n\r\n  /**\r\n   * Forgiving check for a promise\r\n   *\r\n   * @param {Object} p\r\n   * @return {Boolean}\r\n   */\r\n\r\n  function isPromise(p) {\r\n    return p && typeof p.then === 'function';\r\n  }\r\n\r\n  /**\r\n   * Retrive a route config field from a component instance\r\n   * OR a component contructor.\r\n   *\r\n   * @param {Function|Vue} component\r\n   * @param {String} name\r\n   * @return {*}\r\n   */\r\n\r\n  function getRouteConfig(component, name) {\r\n    var options = component && (component.$options || component.options);\r\n    return options && options.route && options.route[name];\r\n  }\r\n\r\n  /**\r\n   * Resolve an async component factory. Have to do a dirty\r\n   * mock here because of Vue core's internal API depends on\r\n   * an ID check.\r\n   *\r\n   * @param {Object} handler\r\n   * @param {Function} cb\r\n   */\r\n\r\n  var resolver = undefined;\r\n\r\n  function resolveAsyncComponent(handler, cb) {\r\n    if (!resolver) {\r\n      resolver = {\r\n        resolve: exports$1.Vue.prototype._resolveComponent,\r\n        $options: {\r\n          components: {\r\n            _: handler.component\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      resolver.$options.components._ = handler.component;\r\n    }\r\n    resolver.resolve('_', function (Component) {\r\n      handler.component = Component;\r\n      cb(Component);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Map the dynamic segments in a path to params.\r\n   *\r\n   * @param {String} path\r\n   * @param {Object} params\r\n   * @param {Object} query\r\n   */\r\n\r\n  function mapParams(path, params, query) {\r\n    if (params === undefined) params = {};\r\n\r\n    path = path.replace(/:([^\\/]+)/g, function (_, key) {\r\n      var val = params[key];\r\n      /* istanbul ignore if */\r\n      if (!val) {\r\n        warn$1('param \"' + key + '\" not found when generating ' + 'path for \"' + path + '\" with params ' + JSON.stringify(params));\r\n      }\r\n      return val || '';\r\n    });\r\n    if (query) {\r\n      path += genQuery(query);\r\n    }\r\n    return path;\r\n  }\r\n\r\n  var hashRE = /#.*$/;\r\n\r\n  var HTML5History = (function () {\r\n    function HTML5History(_ref) {\r\n      var root = _ref.root;\r\n      var onChange = _ref.onChange;\r\n      babelHelpers.classCallCheck(this, HTML5History);\r\n\r\n      if (root && root !== '/') {\r\n        // make sure there's the starting slash\r\n        if (root.charAt(0) !== '/') {\r\n          root = '/' + root;\r\n        }\r\n        // remove trailing slash\r\n        this.root = root.replace(/\\/$/, '');\r\n        this.rootRE = new RegExp('^\\\\' + this.root);\r\n      } else {\r\n        this.root = null;\r\n      }\r\n      this.onChange = onChange;\r\n      // check base tag\r\n      var baseEl = document.querySelector('base');\r\n      this.base = baseEl && baseEl.getAttribute('href');\r\n    }\r\n\r\n    HTML5History.prototype.start = function start() {\r\n      var _this = this;\r\n\r\n      this.listener = function (e) {\r\n        var url = location.pathname + location.search;\r\n        if (_this.root) {\r\n          url = url.replace(_this.rootRE, '');\r\n        }\r\n        _this.onChange(url, e && e.state, location.hash);\r\n      };\r\n      window.addEventListener('popstate', this.listener);\r\n      this.listener();\r\n    };\r\n\r\n    HTML5History.prototype.stop = function stop() {\r\n      window.removeEventListener('popstate', this.listener);\r\n    };\r\n\r\n    HTML5History.prototype.go = function go(path, replace, append) {\r\n      var url = this.formatPath(path, append);\r\n      if (replace) {\r\n        history.replaceState({}, '', url);\r\n      } else {\r\n        // record scroll position by replacing current state\r\n        history.replaceState({\r\n          pos: {\r\n            x: window.pageXOffset,\r\n            y: window.pageYOffset\r\n          }\r\n        }, '', location.href);\r\n        // then push new state\r\n        history.pushState({}, '', url);\r\n      }\r\n      var hashMatch = path.match(hashRE);\r\n      var hash = hashMatch && hashMatch[0];\r\n      path = url\r\n      // strip hash so it doesn't mess up params\r\n      .replace(hashRE, '')\r\n      // remove root before matching\r\n      .replace(this.rootRE, '');\r\n      this.onChange(path, null, hash);\r\n    };\r\n\r\n    HTML5History.prototype.formatPath = function formatPath(path, append) {\r\n      return path.charAt(0) === '/'\r\n      // absolute path\r\n      ? this.root ? this.root + '/' + path.replace(/^\\//, '') : path : resolvePath(this.base || location.pathname, path, append);\r\n    };\r\n\r\n    return HTML5History;\r\n  })();\r\n\r\n  var HashHistory = (function () {\r\n    function HashHistory(_ref) {\r\n      var hashbang = _ref.hashbang;\r\n      var onChange = _ref.onChange;\r\n      babelHelpers.classCallCheck(this, HashHistory);\r\n\r\n      this.hashbang = hashbang;\r\n      this.onChange = onChange;\r\n    }\r\n\r\n    HashHistory.prototype.start = function start() {\r\n      var self = this;\r\n      this.listener = function () {\r\n        var path = location.hash;\r\n        var raw = path.replace(/^#!?/, '');\r\n        // always\r\n        if (raw.charAt(0) !== '/') {\r\n          raw = '/' + raw;\r\n        }\r\n        var formattedPath = self.formatPath(raw);\r\n        if (formattedPath !== path) {\r\n          location.replace(formattedPath);\r\n          return;\r\n        }\r\n        // determine query\r\n        // note it's possible to have queries in both the actual URL\r\n        // and the hash fragment itself.\r\n        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;\r\n        self.onChange(path.replace(/^#!?/, '') + query);\r\n      };\r\n      window.addEventListener('hashchange', this.listener);\r\n      this.listener();\r\n    };\r\n\r\n    HashHistory.prototype.stop = function stop() {\r\n      window.removeEventListener('hashchange', this.listener);\r\n    };\r\n\r\n    HashHistory.prototype.go = function go(path, replace, append) {\r\n      path = this.formatPath(path, append);\r\n      if (replace) {\r\n        location.replace(path);\r\n      } else {\r\n        location.hash = path;\r\n      }\r\n    };\r\n\r\n    HashHistory.prototype.formatPath = function formatPath(path, append) {\r\n      var isAbsoloute = path.charAt(0) === '/';\r\n      var prefix = '#' + (this.hashbang ? '!' : '');\r\n      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);\r\n    };\r\n\r\n    return HashHistory;\r\n  })();\r\n\r\n  var AbstractHistory = (function () {\r\n    function AbstractHistory(_ref) {\r\n      var onChange = _ref.onChange;\r\n      babelHelpers.classCallCheck(this, AbstractHistory);\r\n\r\n      this.onChange = onChange;\r\n      this.currentPath = '/';\r\n    }\r\n\r\n    AbstractHistory.prototype.start = function start() {\r\n      this.onChange('/');\r\n    };\r\n\r\n    AbstractHistory.prototype.stop = function stop() {\r\n      // noop\r\n    };\r\n\r\n    AbstractHistory.prototype.go = function go(path, replace, append) {\r\n      path = this.currentPath = this.formatPath(path, append);\r\n      this.onChange(path);\r\n    };\r\n\r\n    AbstractHistory.prototype.formatPath = function formatPath(path, append) {\r\n      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);\r\n    };\r\n\r\n    return AbstractHistory;\r\n  })();\r\n\r\n  /**\r\n   * Determine the reusability of an existing router view.\r\n   *\r\n   * @param {Directive} view\r\n   * @param {Object} handler\r\n   * @param {Transition} transition\r\n   */\r\n\r\n  function canReuse(view, handler, transition) {\r\n    var component = view.childVM;\r\n    if (!component || !handler) {\r\n      return false;\r\n    }\r\n    // important: check view.Component here because it may\r\n    // have been changed in activate hook\r\n    if (view.Component !== handler.component) {\r\n      return false;\r\n    }\r\n    var canReuseFn = getRouteConfig(component, 'canReuse');\r\n    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {\r\n      to: transition.to,\r\n      from: transition.from\r\n    }) : true; // defaults to true\r\n  }\r\n\r\n  /**\r\n   * Check if a component can deactivate.\r\n   *\r\n   * @param {Directive} view\r\n   * @param {Transition} transition\r\n   * @param {Function} next\r\n   */\r\n\r\n  function canDeactivate(view, transition, next) {\r\n    var fromComponent = view.childVM;\r\n    var hook = getRouteConfig(fromComponent, 'canDeactivate');\r\n    if (!hook) {\r\n      next();\r\n    } else {\r\n      transition.callHook(hook, fromComponent, next, {\r\n        expectBoolean: true\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a component can activate.\r\n   *\r\n   * @param {Object} handler\r\n   * @param {Transition} transition\r\n   * @param {Function} next\r\n   */\r\n\r\n  function canActivate(handler, transition, next) {\r\n    resolveAsyncComponent(handler, function (Component) {\r\n      // have to check due to async-ness\r\n      if (transition.aborted) {\r\n        return;\r\n      }\r\n      // determine if this component can be activated\r\n      var hook = getRouteConfig(Component, 'canActivate');\r\n      if (!hook) {\r\n        next();\r\n      } else {\r\n        transition.callHook(hook, null, next, {\r\n          expectBoolean: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Call deactivate hooks for existing router-views.\r\n   *\r\n   * @param {Directive} view\r\n   * @param {Transition} transition\r\n   * @param {Function} next\r\n   */\r\n\r\n  function deactivate(view, transition, next) {\r\n    var component = view.childVM;\r\n    var hook = getRouteConfig(component, 'deactivate');\r\n    if (!hook) {\r\n      next();\r\n    } else {\r\n      transition.callHooks(hook, component, next);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate / switch component for a router-view.\r\n   *\r\n   * @param {Directive} view\r\n   * @param {Transition} transition\r\n   * @param {Number} depth\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  function activate(view, transition, depth, cb, reuse) {\r\n    var handler = transition.activateQueue[depth];\r\n    if (!handler) {\r\n      saveChildView(view);\r\n      if (view._bound) {\r\n        view.setComponent(null);\r\n      }\r\n      cb && cb();\r\n      return;\r\n    }\r\n\r\n    var Component = view.Component = handler.component;\r\n    var activateHook = getRouteConfig(Component, 'activate');\r\n    var dataHook = getRouteConfig(Component, 'data');\r\n    var waitForData = getRouteConfig(Component, 'waitForData');\r\n\r\n    view.depth = depth;\r\n    view.activated = false;\r\n\r\n    var component = undefined;\r\n    var loading = !!(dataHook && !waitForData);\r\n\r\n    // \"reuse\" is a flag passed down when the parent view is\r\n    // either reused via keep-alive or as a child of a kept-alive view.\r\n    // of course we can only reuse if the current kept-alive instance\r\n    // is of the correct type.\r\n    reuse = reuse && view.childVM && view.childVM.constructor === Component;\r\n\r\n    if (reuse) {\r\n      // just reuse\r\n      component = view.childVM;\r\n      component.$loadingRouteData = loading;\r\n    } else {\r\n      saveChildView(view);\r\n\r\n      // unbuild current component. this step also destroys\r\n      // and removes all nested child views.\r\n      view.unbuild(true);\r\n\r\n      // build the new component. this will also create the\r\n      // direct child view of the current one. it will register\r\n      // itself as view.childView.\r\n      component = view.build({\r\n        _meta: {\r\n          $loadingRouteData: loading\r\n        },\r\n        created: function created() {\r\n          this._routerView = view;\r\n        }\r\n      });\r\n\r\n      // handle keep-alive.\r\n      // when a kept-alive child vm is restored, we need to\r\n      // add its cached child views into the router's view list,\r\n      // and also properly update current view's child view.\r\n      if (view.keepAlive) {\r\n        component.$loadingRouteData = loading;\r\n        var cachedChildView = component._keepAliveRouterView;\r\n        if (cachedChildView) {\r\n          view.childView = cachedChildView;\r\n          component._keepAliveRouterView = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // cleanup the component in case the transition is aborted\r\n    // before the component is ever inserted.\r\n    var cleanup = function cleanup() {\r\n      component.$destroy();\r\n    };\r\n\r\n    // actually insert the component and trigger transition\r\n    var insert = function insert() {\r\n      if (reuse) {\r\n        cb && cb();\r\n        return;\r\n      }\r\n      var router = transition.router;\r\n      if (router._rendered || router._transitionOnLoad) {\r\n        view.transition(component);\r\n      } else {\r\n        // no transition on first render, manual transition\r\n        /* istanbul ignore if */\r\n        if (view.setCurrent) {\r\n          // 0.12 compat\r\n          view.setCurrent(component);\r\n        } else {\r\n          // 1.0\r\n          view.childVM = component;\r\n        }\r\n        component.$before(view.anchor, null, false);\r\n      }\r\n      cb && cb();\r\n    };\r\n\r\n    var afterData = function afterData() {\r\n      // activate the child view\r\n      if (view.childView) {\r\n        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);\r\n      }\r\n      insert();\r\n    };\r\n\r\n    // called after activation hook is resolved\r\n    var afterActivate = function afterActivate() {\r\n      view.activated = true;\r\n      if (dataHook && waitForData) {\r\n        // wait until data loaded to insert\r\n        loadData(component, transition, dataHook, afterData, cleanup);\r\n      } else {\r\n        // load data and insert at the same time\r\n        if (dataHook) {\r\n          loadData(component, transition, dataHook);\r\n        }\r\n        afterData();\r\n      }\r\n    };\r\n\r\n    if (activateHook) {\r\n      transition.callHooks(activateHook, component, afterActivate, {\r\n        cleanup: cleanup,\r\n        postActivate: true\r\n      });\r\n    } else {\r\n      afterActivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reuse a view, just reload data if necessary.\r\n   *\r\n   * @param {Directive} view\r\n   * @param {Transition} transition\r\n   */\r\n\r\n  function reuse(view, transition) {\r\n    var component = view.childVM;\r\n    var dataHook = getRouteConfig(component, 'data');\r\n    if (dataHook) {\r\n      loadData(component, transition, dataHook);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asynchronously load and apply data to component.\r\n   *\r\n   * @param {Vue} component\r\n   * @param {Transition} transition\r\n   * @param {Function} hook\r\n   * @param {Function} cb\r\n   * @param {Function} cleanup\r\n   */\r\n\r\n  function loadData(component, transition, hook, cb, cleanup) {\r\n    component.$loadingRouteData = true;\r\n    transition.callHooks(hook, component, function () {\r\n      component.$loadingRouteData = false;\r\n      component.$emit('route-data-loaded', component);\r\n      cb && cb();\r\n    }, {\r\n      cleanup: cleanup,\r\n      postActivate: true,\r\n      processData: function processData(data) {\r\n        // handle promise sugar syntax\r\n        var promises = [];\r\n        if (isPlainObject(data)) {\r\n          Object.keys(data).forEach(function (key) {\r\n            var val = data[key];\r\n            if (isPromise(val)) {\r\n              promises.push(val.then(function (resolvedVal) {\r\n                component.$set(key, resolvedVal);\r\n              }));\r\n            } else {\r\n              component.$set(key, val);\r\n            }\r\n          });\r\n        }\r\n        if (promises.length) {\r\n          return promises[0].constructor.all(promises);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Save the child view for a kept-alive view so that\r\n   * we can restore it when it is switched back to.\r\n   *\r\n   * @param {Directive} view\r\n   */\r\n\r\n  function saveChildView(view) {\r\n    if (view.keepAlive && view.childVM && view.childView) {\r\n      view.childVM._keepAliveRouterView = view.childView;\r\n    }\r\n    view.childView = null;\r\n  }\r\n\r\n  /**\r\n   * Check plain object.\r\n   *\r\n   * @param {*} val\r\n   */\r\n\r\n  function isPlainObject(val) {\r\n    return Object.prototype.toString.call(val) === '[object Object]';\r\n  }\r\n\r\n  /**\r\n   * A RouteTransition object manages the pipeline of a\r\n   * router-view switching process. This is also the object\r\n   * passed into user route hooks.\r\n   *\r\n   * @param {Router} router\r\n   * @param {Route} to\r\n   * @param {Route} from\r\n   */\r\n\r\n  var RouteTransition = (function () {\r\n    function RouteTransition(router, to, from) {\r\n      babelHelpers.classCallCheck(this, RouteTransition);\r\n\r\n      this.router = router;\r\n      this.to = to;\r\n      this.from = from;\r\n      this.next = null;\r\n      this.aborted = false;\r\n      this.done = false;\r\n    }\r\n\r\n    /**\r\n     * Abort current transition and return to previous location.\r\n     */\r\n\r\n    RouteTransition.prototype.abort = function abort() {\r\n      if (!this.aborted) {\r\n        this.aborted = true;\r\n        // if the root path throws an error during validation\r\n        // on initial load, it gets caught in an infinite loop.\r\n        var abortingOnLoad = !this.from.path && this.to.path === '/';\r\n        if (!abortingOnLoad) {\r\n          this.router.replace(this.from.path || '/');\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Abort current transition and redirect to a new location.\r\n     *\r\n     * @param {String} path\r\n     */\r\n\r\n    RouteTransition.prototype.redirect = function redirect(path) {\r\n      if (!this.aborted) {\r\n        this.aborted = true;\r\n        if (typeof path === 'string') {\r\n          path = mapParams(path, this.to.params, this.to.query);\r\n        } else {\r\n          path.params = path.params || this.to.params;\r\n          path.query = path.query || this.to.query;\r\n        }\r\n        this.router.replace(path);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * A router view transition's pipeline can be described as\r\n     * follows, assuming we are transitioning from an existing\r\n     * <router-view> chain [Component A, Component B] to a new\r\n     * chain [Component A, Component C]:\r\n     *\r\n     *  A    A\r\n     *  | => |\r\n     *  B    C\r\n     *\r\n     * 1. Reusablity phase:\r\n     *   -> canReuse(A, A)\r\n     *   -> canReuse(B, C)\r\n     *   -> determine new queues:\r\n     *      - deactivation: [B]\r\n     *      - activation: [C]\r\n     *\r\n     * 2. Validation phase:\r\n     *   -> canDeactivate(B)\r\n     *   -> canActivate(C)\r\n     *\r\n     * 3. Activation phase:\r\n     *   -> deactivate(B)\r\n     *   -> activate(C)\r\n     *\r\n     * Each of these steps can be asynchronous, and any\r\n     * step can potentially abort the transition.\r\n     *\r\n     * @param {Function} cb\r\n     */\r\n\r\n    RouteTransition.prototype.start = function start(cb) {\r\n      var transition = this;\r\n\r\n      // determine the queue of views to deactivate\r\n      var deactivateQueue = [];\r\n      var view = this.router._rootView;\r\n      while (view) {\r\n        deactivateQueue.unshift(view);\r\n        view = view.childView;\r\n      }\r\n      var reverseDeactivateQueue = deactivateQueue.slice().reverse();\r\n\r\n      // determine the queue of route handlers to activate\r\n      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {\r\n        return match.handler;\r\n      });\r\n\r\n      // 1. Reusability phase\r\n      var i = undefined,\r\n          reuseQueue = undefined;\r\n      for (i = 0; i < reverseDeactivateQueue.length; i++) {\r\n        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {\r\n          break;\r\n        }\r\n      }\r\n      if (i > 0) {\r\n        reuseQueue = reverseDeactivateQueue.slice(0, i);\r\n        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();\r\n        activateQueue = activateQueue.slice(i);\r\n      }\r\n\r\n      // 2. Validation phase\r\n      transition.runQueue(deactivateQueue, canDeactivate, function () {\r\n        transition.runQueue(activateQueue, canActivate, function () {\r\n          transition.runQueue(deactivateQueue, deactivate, function () {\r\n            // 3. Activation phase\r\n\r\n            // Update router current route\r\n            transition.router._onTransitionValidated(transition);\r\n\r\n            // trigger reuse for all reused views\r\n            reuseQueue && reuseQueue.forEach(function (view) {\r\n              return reuse(view, transition);\r\n            });\r\n\r\n            // the root of the chain that needs to be replaced\r\n            // is the top-most non-reusable view.\r\n            if (deactivateQueue.length) {\r\n              var _view = deactivateQueue[deactivateQueue.length - 1];\r\n              var depth = reuseQueue ? reuseQueue.length : 0;\r\n              activate(_view, transition, depth, cb);\r\n            } else {\r\n              cb();\r\n            }\r\n          });\r\n        });\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Asynchronously and sequentially apply a function to a\r\n     * queue.\r\n     *\r\n     * @param {Array} queue\r\n     * @param {Function} fn\r\n     * @param {Function} cb\r\n     */\r\n\r\n    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {\r\n      var transition = this;\r\n      step(0);\r\n      function step(index) {\r\n        if (index >= queue.length) {\r\n          cb();\r\n        } else {\r\n          fn(queue[index], transition, function () {\r\n            step(index + 1);\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Call a user provided route transition hook and handle\r\n     * the response (e.g. if the user returns a promise).\r\n     *\r\n     * If the user neither expects an argument nor returns a\r\n     * promise, the hook is assumed to be synchronous.\r\n     *\r\n     * @param {Function} hook\r\n     * @param {*} [context]\r\n     * @param {Function} [cb]\r\n     * @param {Object} [options]\r\n     *                 - {Boolean} expectBoolean\r\n     *                 - {Boolean} postActive\r\n     *                 - {Function} processData\r\n     *                 - {Function} cleanup\r\n     */\r\n\r\n    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {\r\n      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];\r\n\r\n      var _ref$expectBoolean = _ref.expectBoolean;\r\n      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;\r\n      var _ref$postActivate = _ref.postActivate;\r\n      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;\r\n      var processData = _ref.processData;\r\n      var cleanup = _ref.cleanup;\r\n\r\n      var transition = this;\r\n      var nextCalled = false;\r\n\r\n      // abort the transition\r\n      var abort = function abort() {\r\n        cleanup && cleanup();\r\n        transition.abort();\r\n      };\r\n\r\n      // handle errors\r\n      var onError = function onError(err) {\r\n        postActivate ? next() : abort();\r\n        if (err && !transition.router._suppress) {\r\n          warn$1('Uncaught error during transition: ');\r\n          throw err instanceof Error ? err : new Error(err);\r\n        }\r\n      };\r\n\r\n      // since promise swallows errors, we have to\r\n      // throw it in the next tick...\r\n      var onPromiseError = function onPromiseError(err) {\r\n        try {\r\n          onError(err);\r\n        } catch (e) {\r\n          setTimeout(function () {\r\n            throw e;\r\n          }, 0);\r\n        }\r\n      };\r\n\r\n      // advance the transition to the next step\r\n      var next = function next() {\r\n        if (nextCalled) {\r\n          warn$1('transition.next() should be called only once.');\r\n          return;\r\n        }\r\n        nextCalled = true;\r\n        if (transition.aborted) {\r\n          cleanup && cleanup();\r\n          return;\r\n        }\r\n        cb && cb();\r\n      };\r\n\r\n      var nextWithBoolean = function nextWithBoolean(res) {\r\n        if (typeof res === 'boolean') {\r\n          res ? next() : abort();\r\n        } else if (isPromise(res)) {\r\n          res.then(function (ok) {\r\n            ok ? next() : abort();\r\n          }, onPromiseError);\r\n        } else if (!hook.length) {\r\n          next();\r\n        }\r\n      };\r\n\r\n      var nextWithData = function nextWithData(data) {\r\n        var res = undefined;\r\n        try {\r\n          res = processData(data);\r\n        } catch (err) {\r\n          return onError(err);\r\n        }\r\n        if (isPromise(res)) {\r\n          res.then(next, onPromiseError);\r\n        } else {\r\n          next();\r\n        }\r\n      };\r\n\r\n      // expose a clone of the transition object, so that each\r\n      // hook gets a clean copy and prevent the user from\r\n      // messing with the internals.\r\n      var exposed = {\r\n        to: transition.to,\r\n        from: transition.from,\r\n        abort: abort,\r\n        next: processData ? nextWithData : next,\r\n        redirect: function redirect() {\r\n          transition.redirect.apply(transition, arguments);\r\n        }\r\n      };\r\n\r\n      // actually call the hook\r\n      var res = undefined;\r\n      try {\r\n        res = hook.call(context, exposed);\r\n      } catch (err) {\r\n        return onError(err);\r\n      }\r\n\r\n      if (expectBoolean) {\r\n        // boolean hooks\r\n        nextWithBoolean(res);\r\n      } else if (isPromise(res)) {\r\n        // promise\r\n        if (processData) {\r\n          res.then(nextWithData, onPromiseError);\r\n        } else {\r\n          res.then(next, onPromiseError);\r\n        }\r\n      } else if (processData && isPlainOjbect(res)) {\r\n        // data promise sugar\r\n        nextWithData(res);\r\n      } else if (!hook.length) {\r\n        next();\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Call a single hook or an array of async hooks in series.\r\n     *\r\n     * @param {Array} hooks\r\n     * @param {*} context\r\n     * @param {Function} cb\r\n     * @param {Object} [options]\r\n     */\r\n\r\n    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {\r\n      var _this = this;\r\n\r\n      if (Array.isArray(hooks)) {\r\n        this.runQueue(hooks, function (hook, _, next) {\r\n          if (!_this.aborted) {\r\n            _this.callHook(hook, context, next, options);\r\n          }\r\n        }, cb);\r\n      } else {\r\n        this.callHook(hooks, context, cb, options);\r\n      }\r\n    };\r\n\r\n    return RouteTransition;\r\n  })();\r\n\r\n  function isPlainOjbect(val) {\r\n    return Object.prototype.toString.call(val) === '[object Object]';\r\n  }\r\n\r\n  function toArray(val) {\r\n    return val ? Array.prototype.slice.call(val) : [];\r\n  }\r\n\r\n  var internalKeysRE = /^(component|subRoutes|fullPath)$/;\r\n\r\n  /**\r\n   * Route Context Object\r\n   *\r\n   * @param {String} path\r\n   * @param {Router} router\r\n   */\r\n\r\n  var Route = function Route(path, router) {\r\n    var _this = this;\r\n\r\n    babelHelpers.classCallCheck(this, Route);\r\n\r\n    var matched = router._recognizer.recognize(path);\r\n    if (matched) {\r\n      // copy all custom fields from route configs\r\n      [].forEach.call(matched, function (match) {\r\n        for (var key in match.handler) {\r\n          if (!internalKeysRE.test(key)) {\r\n            _this[key] = match.handler[key];\r\n          }\r\n        }\r\n      });\r\n      // set query and params\r\n      this.query = matched.queryParams;\r\n      this.params = [].reduce.call(matched, function (prev, cur) {\r\n        if (cur.params) {\r\n          for (var key in cur.params) {\r\n            prev[key] = cur.params[key];\r\n          }\r\n        }\r\n        return prev;\r\n      }, {});\r\n    }\r\n    // expose path and router\r\n    this.path = path;\r\n    // for internal use\r\n    this.matched = matched || router._notFoundHandler;\r\n    // internal reference to router\r\n    Object.defineProperty(this, 'router', {\r\n      enumerable: false,\r\n      value: router\r\n    });\r\n    // Important: freeze self to prevent observation\r\n    Object.freeze(this);\r\n  };\r\n\r\n  function applyOverride (Vue) {\r\n    var _Vue$util = Vue.util;\r\n    var extend = _Vue$util.extend;\r\n    var isArray = _Vue$util.isArray;\r\n    var defineReactive = _Vue$util.defineReactive;\r\n\r\n    // override Vue's init and destroy process to keep track of router instances\r\n    var init = Vue.prototype._init;\r\n    Vue.prototype._init = function (options) {\r\n      options = options || {};\r\n      var root = options._parent || options.parent || this;\r\n      var router = root.$router;\r\n      var route = root.$route;\r\n      if (router) {\r\n        // expose router\r\n        this.$router = router;\r\n        router._children.push(this);\r\n        /* istanbul ignore if */\r\n        if (this._defineMeta) {\r\n          // 0.12\r\n          this._defineMeta('$route', route);\r\n        } else {\r\n          // 1.0\r\n          defineReactive(this, '$route', route);\r\n        }\r\n      }\r\n      init.call(this, options);\r\n    };\r\n\r\n    var destroy = Vue.prototype._destroy;\r\n    Vue.prototype._destroy = function () {\r\n      if (!this._isBeingDestroyed && this.$router) {\r\n        this.$router._children.$remove(this);\r\n      }\r\n      destroy.apply(this, arguments);\r\n    };\r\n\r\n    // 1.0 only: enable route mixins\r\n    var strats = Vue.config.optionMergeStrategies;\r\n    var hooksToMergeRE = /^(data|activate|deactivate)$/;\r\n\r\n    if (strats) {\r\n      strats.route = function (parentVal, childVal) {\r\n        if (!childVal) return parentVal;\r\n        if (!parentVal) return childVal;\r\n        var ret = {};\r\n        extend(ret, parentVal);\r\n        for (var key in childVal) {\r\n          var a = ret[key];\r\n          var b = childVal[key];\r\n          // for data, activate and deactivate, we need to merge them into\r\n          // arrays similar to lifecycle hooks.\r\n          if (a && hooksToMergeRE.test(key)) {\r\n            ret[key] = (isArray(a) ? a : [a]).concat(b);\r\n          } else {\r\n            ret[key] = b;\r\n          }\r\n        }\r\n        return ret;\r\n      };\r\n    }\r\n  }\r\n\r\n  function View (Vue) {\r\n\r\n    var _ = Vue.util;\r\n    var componentDef =\r\n    // 0.12\r\n    Vue.directive('_component') ||\r\n    // 1.0\r\n    Vue.internalDirectives.component;\r\n    // <router-view> extends the internal component directive\r\n    var viewDef = _.extend({}, componentDef);\r\n\r\n    // with some overrides\r\n    _.extend(viewDef, {\r\n\r\n      _isRouterView: true,\r\n\r\n      bind: function bind() {\r\n        var route = this.vm.$route;\r\n        /* istanbul ignore if */\r\n        if (!route) {\r\n          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');\r\n          return;\r\n        }\r\n        // force dynamic directive so v-component doesn't\r\n        // attempt to build right now\r\n        this._isDynamicLiteral = true;\r\n        // finally, init by delegating to v-component\r\n        componentDef.bind.call(this);\r\n\r\n        // locate the parent view\r\n        var parentView = undefined;\r\n        var parent = this.vm;\r\n        while (parent) {\r\n          if (parent._routerView) {\r\n            parentView = parent._routerView;\r\n            break;\r\n          }\r\n          parent = parent.$parent;\r\n        }\r\n        if (parentView) {\r\n          // register self as a child of the parent view,\r\n          // instead of activating now. This is so that the\r\n          // child's activate hook is called after the\r\n          // parent's has resolved.\r\n          this.parentView = parentView;\r\n          parentView.childView = this;\r\n        } else {\r\n          // this is the root view!\r\n          var router = route.router;\r\n          router._rootView = this;\r\n        }\r\n\r\n        // handle late-rendered view\r\n        // two possibilities:\r\n        // 1. root view rendered after transition has been\r\n        //    validated;\r\n        // 2. child view rendered after parent view has been\r\n        //    activated.\r\n        var transition = route.router._currentTransition;\r\n        if (!parentView && transition.done || parentView && parentView.activated) {\r\n          var depth = parentView ? parentView.depth + 1 : 0;\r\n          activate(this, transition, depth);\r\n        }\r\n      },\r\n\r\n      unbind: function unbind() {\r\n        if (this.parentView) {\r\n          this.parentView.childView = null;\r\n        }\r\n        componentDef.unbind.call(this);\r\n      }\r\n    });\r\n\r\n    Vue.elementDirective('router-view', viewDef);\r\n  }\r\n\r\n  var trailingSlashRE = /\\/$/;\r\n  var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n  var queryStringRE = /\\?.*$/;\r\n\r\n  // install v-link, which provides navigation support for\r\n  // HTML5 history mode\r\n  function Link (Vue) {\r\n    var _Vue$util = Vue.util;\r\n    var _bind = _Vue$util.bind;\r\n    var isObject = _Vue$util.isObject;\r\n    var addClass = _Vue$util.addClass;\r\n    var removeClass = _Vue$util.removeClass;\r\n\r\n    var onPriority = Vue.directive('on').priority;\r\n    var LINK_UPDATE = '__vue-router-link-update__';\r\n\r\n    var activeId = 0;\r\n\r\n    Vue.directive('link-active', {\r\n      priority: 9999,\r\n      bind: function bind() {\r\n        var _this = this;\r\n\r\n        var id = String(activeId++);\r\n        // collect v-links contained within this element.\r\n        // we need do this here before the parent-child relationship\r\n        // gets messed up by terminal directives (if, for, components)\r\n        var childLinks = this.el.querySelectorAll('[v-link]');\r\n        for (var i = 0, l = childLinks.length; i < l; i++) {\r\n          var link = childLinks[i];\r\n          var existingId = link.getAttribute(LINK_UPDATE);\r\n          var value = existingId ? existingId + ',' + id : id;\r\n          // leave a mark on the link element which can be persisted\r\n          // through fragment clones.\r\n          link.setAttribute(LINK_UPDATE, value);\r\n        }\r\n        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {\r\n          if (link.activeIds.indexOf(id) > -1) {\r\n            link.updateClasses(path, _this.el);\r\n          }\r\n        });\r\n      },\r\n      unbind: function unbind() {\r\n        this.vm.$off(LINK_UPDATE, this.cb);\r\n      }\r\n    });\r\n\r\n    Vue.directive('link', {\r\n      priority: onPriority - 2,\r\n\r\n      bind: function bind() {\r\n        var vm = this.vm;\r\n        /* istanbul ignore if */\r\n        if (!vm.$route) {\r\n          warn$1('v-link can only be used inside a router-enabled app.');\r\n          return;\r\n        }\r\n        this.router = vm.$route.router;\r\n        // update things when the route changes\r\n        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));\r\n        // check v-link-active ids\r\n        var activeIds = this.el.getAttribute(LINK_UPDATE);\r\n        if (activeIds) {\r\n          this.el.removeAttribute(LINK_UPDATE);\r\n          this.activeIds = activeIds.split(',');\r\n        }\r\n        // no need to handle click if link expects to be opened\r\n        // in a new window/tab.\r\n        /* istanbul ignore if */\r\n        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {\r\n          return;\r\n        }\r\n        // handle click\r\n        this.handler = _bind(this.onClick, this);\r\n        this.el.addEventListener('click', this.handler);\r\n      },\r\n\r\n      update: function update(target) {\r\n        this.target = target;\r\n        if (isObject(target)) {\r\n          this.append = target.append;\r\n          this.exact = target.exact;\r\n          this.prevActiveClass = this.activeClass;\r\n          this.activeClass = target.activeClass;\r\n        }\r\n        this.onRouteUpdate(this.vm.$route);\r\n      },\r\n\r\n      onClick: function onClick(e) {\r\n        // don't redirect with control keys\r\n        /* istanbul ignore if */\r\n        if (e.metaKey || e.ctrlKey || e.shiftKey) return;\r\n        // don't redirect when preventDefault called\r\n        /* istanbul ignore if */\r\n        if (e.defaultPrevented) return;\r\n        // don't redirect on right click\r\n        /* istanbul ignore if */\r\n        if (e.button !== 0) return;\r\n\r\n        var target = this.target;\r\n        if (target) {\r\n          // v-link with expression, just go\r\n          e.preventDefault();\r\n          this.router.go(target);\r\n        } else {\r\n          // no expression, delegate for an <a> inside\r\n          var el = e.target;\r\n          while (el.tagName !== 'A' && el !== this.el) {\r\n            el = el.parentNode;\r\n          }\r\n          if (el.tagName === 'A' && sameOrigin(el)) {\r\n            e.preventDefault();\r\n            var path = el.pathname;\r\n            if (this.router.history.root) {\r\n              path = path.replace(this.router.history.rootRE, '');\r\n            }\r\n            this.router.go({\r\n              path: path,\r\n              replace: target && target.replace,\r\n              append: target && target.append\r\n            });\r\n          }\r\n        }\r\n      },\r\n\r\n      onRouteUpdate: function onRouteUpdate(route) {\r\n        // router.stringifyPath is dependent on current route\r\n        // and needs to be called again whenver route changes.\r\n        var newPath = this.router.stringifyPath(this.target);\r\n        if (this.path !== newPath) {\r\n          this.path = newPath;\r\n          this.updateActiveMatch();\r\n          this.updateHref();\r\n        }\r\n        if (this.activeIds) {\r\n          this.vm.$emit(LINK_UPDATE, this, route.path);\r\n        } else {\r\n          this.updateClasses(route.path, this.el);\r\n        }\r\n      },\r\n\r\n      updateActiveMatch: function updateActiveMatch() {\r\n        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\\\$&') + '(\\\\/|$)') : null;\r\n      },\r\n\r\n      updateHref: function updateHref() {\r\n        if (this.el.tagName !== 'A') {\r\n          return;\r\n        }\r\n        var path = this.path;\r\n        var router = this.router;\r\n        var isAbsolute = path.charAt(0) === '/';\r\n        // do not format non-hash relative paths\r\n        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;\r\n        if (href) {\r\n          this.el.href = href;\r\n        } else {\r\n          this.el.removeAttribute('href');\r\n        }\r\n      },\r\n\r\n      updateClasses: function updateClasses(path, el) {\r\n        var activeClass = this.activeClass || this.router._linkActiveClass;\r\n        // clear old class\r\n        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {\r\n          toggleClasses(el, this.prevActiveClass, removeClass);\r\n        }\r\n        // remove query string before matching\r\n        var dest = this.path.replace(queryStringRE, '');\r\n        path = path.replace(queryStringRE, '');\r\n        // add new class\r\n        if (this.exact) {\r\n          if (dest === path ||\r\n          // also allow additional trailing slash\r\n          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {\r\n            toggleClasses(el, activeClass, addClass);\r\n          } else {\r\n            toggleClasses(el, activeClass, removeClass);\r\n          }\r\n        } else {\r\n          if (this.activeRE && this.activeRE.test(path)) {\r\n            toggleClasses(el, activeClass, addClass);\r\n          } else {\r\n            toggleClasses(el, activeClass, removeClass);\r\n          }\r\n        }\r\n      },\r\n\r\n      unbind: function unbind() {\r\n        this.el.removeEventListener('click', this.handler);\r\n        this.unwatch && this.unwatch();\r\n      }\r\n    });\r\n\r\n    function sameOrigin(link) {\r\n      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;\r\n    }\r\n\r\n    // this function is copied from v-bind:class implementation until\r\n    // we properly expose it...\r\n    function toggleClasses(el, key, fn) {\r\n      key = key.trim();\r\n      if (key.indexOf(' ') === -1) {\r\n        fn(el, key);\r\n        return;\r\n      }\r\n      var keys = key.split(/\\s+/);\r\n      for (var i = 0, l = keys.length; i < l; i++) {\r\n        fn(el, keys[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  var historyBackends = {\r\n    abstract: AbstractHistory,\r\n    hash: HashHistory,\r\n    html5: HTML5History\r\n  };\r\n\r\n  // late bind during install\r\n  var Vue = undefined;\r\n\r\n  /**\r\n   * Router constructor\r\n   *\r\n   * @param {Object} [options]\r\n   */\r\n\r\n  var Router = (function () {\r\n    function Router() {\r\n      var _this = this;\r\n\r\n      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n      var _ref$hashbang = _ref.hashbang;\r\n      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;\r\n      var _ref$abstract = _ref.abstract;\r\n      var abstract = _ref$abstract === undefined ? false : _ref$abstract;\r\n      var _ref$history = _ref.history;\r\n      var history = _ref$history === undefined ? false : _ref$history;\r\n      var _ref$saveScrollPosition = _ref.saveScrollPosition;\r\n      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;\r\n      var _ref$transitionOnLoad = _ref.transitionOnLoad;\r\n      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;\r\n      var _ref$suppressTransitionError = _ref.suppressTransitionError;\r\n      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;\r\n      var _ref$root = _ref.root;\r\n      var root = _ref$root === undefined ? null : _ref$root;\r\n      var _ref$linkActiveClass = _ref.linkActiveClass;\r\n      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;\r\n      babelHelpers.classCallCheck(this, Router);\r\n\r\n      /* istanbul ignore if */\r\n      if (!Router.installed) {\r\n        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');\r\n      }\r\n\r\n      // Vue instances\r\n      this.app = null;\r\n      this._children = [];\r\n\r\n      // route recognizer\r\n      this._recognizer = new RouteRecognizer();\r\n      this._guardRecognizer = new RouteRecognizer();\r\n\r\n      // state\r\n      this._started = false;\r\n      this._startCb = null;\r\n      this._currentRoute = {};\r\n      this._currentTransition = null;\r\n      this._previousTransition = null;\r\n      this._notFoundHandler = null;\r\n      this._notFoundRedirect = null;\r\n      this._beforeEachHooks = [];\r\n      this._afterEachHooks = [];\r\n\r\n      // trigger transition on initial render?\r\n      this._rendered = false;\r\n      this._transitionOnLoad = transitionOnLoad;\r\n\r\n      // history mode\r\n      this._root = root;\r\n      this._abstract = abstract;\r\n      this._hashbang = hashbang;\r\n\r\n      // check if HTML5 history is available\r\n      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;\r\n      this._history = history && hasPushState;\r\n      this._historyFallback = history && !hasPushState;\r\n\r\n      // create history object\r\n      var inBrowser = Vue.util.inBrowser;\r\n      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';\r\n\r\n      var History = historyBackends[this.mode];\r\n      this.history = new History({\r\n        root: root,\r\n        hashbang: this._hashbang,\r\n        onChange: function onChange(path, state, anchor) {\r\n          _this._match(path, state, anchor);\r\n        }\r\n      });\r\n\r\n      // other options\r\n      this._saveScrollPosition = saveScrollPosition;\r\n      this._linkActiveClass = linkActiveClass;\r\n      this._suppress = suppressTransitionError;\r\n    }\r\n\r\n    /**\r\n     * Allow directly passing components to a route\r\n     * definition.\r\n     *\r\n     * @param {String} path\r\n     * @param {Object} handler\r\n     */\r\n\r\n    // API ===================================================\r\n\r\n    /**\r\n    * Register a map of top-level paths.\r\n    *\r\n    * @param {Object} map\r\n    */\r\n\r\n    Router.prototype.map = function map(_map) {\r\n      for (var route in _map) {\r\n        this.on(route, _map[route]);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Register a single root-level path\r\n     *\r\n     * @param {String} rootPath\r\n     * @param {Object} handler\r\n     *                 - {String} component\r\n     *                 - {Object} [subRoutes]\r\n     *                 - {Boolean} [forceRefresh]\r\n     *                 - {Function} [before]\r\n     *                 - {Function} [after]\r\n     */\r\n\r\n    Router.prototype.on = function on(rootPath, handler) {\r\n      if (rootPath === '*') {\r\n        this._notFound(handler);\r\n      } else {\r\n        this._addRoute(rootPath, handler, []);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Set redirects.\r\n     *\r\n     * @param {Object} map\r\n     */\r\n\r\n    Router.prototype.redirect = function redirect(map) {\r\n      for (var path in map) {\r\n        this._addRedirect(path, map[path]);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Set aliases.\r\n     *\r\n     * @param {Object} map\r\n     */\r\n\r\n    Router.prototype.alias = function alias(map) {\r\n      for (var path in map) {\r\n        this._addAlias(path, map[path]);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Set global before hook.\r\n     *\r\n     * @param {Function} fn\r\n     */\r\n\r\n    Router.prototype.beforeEach = function beforeEach(fn) {\r\n      this._beforeEachHooks.push(fn);\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Set global after hook.\r\n     *\r\n     * @param {Function} fn\r\n     */\r\n\r\n    Router.prototype.afterEach = function afterEach(fn) {\r\n      this._afterEachHooks.push(fn);\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * Navigate to a given path.\r\n     * The path can be an object describing a named path in\r\n     * the format of { name: '...', params: {}, query: {}}\r\n     * The path is assumed to be already decoded, and will\r\n     * be resolved against root (if provided)\r\n     *\r\n     * @param {String|Object} path\r\n     * @param {Boolean} [replace]\r\n     */\r\n\r\n    Router.prototype.go = function go(path) {\r\n      var replace = false;\r\n      var append = false;\r\n      if (Vue.util.isObject(path)) {\r\n        replace = path.replace;\r\n        append = path.append;\r\n      }\r\n      path = this.stringifyPath(path);\r\n      if (path) {\r\n        this.history.go(path, replace, append);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Short hand for replacing current path\r\n     *\r\n     * @param {String} path\r\n     */\r\n\r\n    Router.prototype.replace = function replace(path) {\r\n      if (typeof path === 'string') {\r\n        path = { path: path };\r\n      }\r\n      path.replace = true;\r\n      this.go(path);\r\n    };\r\n\r\n    /**\r\n     * Start the router.\r\n     *\r\n     * @param {VueConstructor} App\r\n     * @param {String|Element} container\r\n     * @param {Function} [cb]\r\n     */\r\n\r\n    Router.prototype.start = function start(App, container, cb) {\r\n      /* istanbul ignore if */\r\n      if (this._started) {\r\n        warn$1('already started.');\r\n        return;\r\n      }\r\n      this._started = true;\r\n      this._startCb = cb;\r\n      if (!this.app) {\r\n        /* istanbul ignore if */\r\n        if (!App || !container) {\r\n          throw new Error('Must start vue-router with a component and a ' + 'root container.');\r\n        }\r\n        /* istanbul ignore if */\r\n        if (App instanceof Vue) {\r\n          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');\r\n        }\r\n        this._appContainer = container;\r\n        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);\r\n        // give it a name for better debugging\r\n        Ctor.options.name = Ctor.options.name || 'RouterApp';\r\n      }\r\n\r\n      // handle history fallback in browsers that do not\r\n      // support HTML5 history API\r\n      if (this._historyFallback) {\r\n        var _location = window.location;\r\n        var _history = new HTML5History({ root: this._root });\r\n        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;\r\n        if (path && path !== '/') {\r\n          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);\r\n          return;\r\n        }\r\n      }\r\n\r\n      this.history.start();\r\n    };\r\n\r\n    /**\r\n     * Stop listening to route changes.\r\n     */\r\n\r\n    Router.prototype.stop = function stop() {\r\n      this.history.stop();\r\n      this._started = false;\r\n    };\r\n\r\n    /**\r\n     * Normalize named route object / string paths into\r\n     * a string.\r\n     *\r\n     * @param {Object|String|Number} path\r\n     * @return {String}\r\n     */\r\n\r\n    Router.prototype.stringifyPath = function stringifyPath(path) {\r\n      var generatedPath = '';\r\n      if (path && typeof path === 'object') {\r\n        if (path.name) {\r\n          var extend = Vue.util.extend;\r\n          var currentParams = this._currentTransition && this._currentTransition.to.params;\r\n          var targetParams = path.params || {};\r\n          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;\r\n          generatedPath = encodeURI(this._recognizer.generate(path.name, params));\r\n        } else if (path.path) {\r\n          generatedPath = encodeURI(path.path);\r\n        }\r\n        if (path.query) {\r\n          // note: the generated query string is pre-URL-encoded by the recognizer\r\n          var query = this._recognizer.generateQueryString(path.query);\r\n          if (generatedPath.indexOf('?') > -1) {\r\n            generatedPath += '&' + query.slice(1);\r\n          } else {\r\n            generatedPath += query;\r\n          }\r\n        }\r\n      } else {\r\n        generatedPath = encodeURI(path ? path + '' : '');\r\n      }\r\n      return generatedPath;\r\n    };\r\n\r\n    // Internal methods ======================================\r\n\r\n    /**\r\n    * Add a route containing a list of segments to the internal\r\n    * route recognizer. Will be called recursively to add all\r\n    * possible sub-routes.\r\n    *\r\n    * @param {String} path\r\n    * @param {Object} handler\r\n    * @param {Array} segments\r\n    */\r\n\r\n    Router.prototype._addRoute = function _addRoute(path, handler, segments) {\r\n      guardComponent(path, handler);\r\n      handler.path = path;\r\n      handler.fullPath = (segments.reduce(function (path, segment) {\r\n        return path + segment.path;\r\n      }, '') + path).replace('//', '/');\r\n      segments.push({\r\n        path: path,\r\n        handler: handler\r\n      });\r\n      this._recognizer.add(segments, {\r\n        as: handler.name\r\n      });\r\n      // add sub routes\r\n      if (handler.subRoutes) {\r\n        for (var subPath in handler.subRoutes) {\r\n          // recursively walk all sub routes\r\n          this._addRoute(subPath, handler.subRoutes[subPath],\r\n          // pass a copy in recursion to avoid mutating\r\n          // across branches\r\n          segments.slice());\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Set the notFound route handler.\r\n     *\r\n     * @param {Object} handler\r\n     */\r\n\r\n    Router.prototype._notFound = function _notFound(handler) {\r\n      guardComponent('*', handler);\r\n      this._notFoundHandler = [{ handler: handler }];\r\n    };\r\n\r\n    /**\r\n     * Add a redirect record.\r\n     *\r\n     * @param {String} path\r\n     * @param {String} redirectPath\r\n     */\r\n\r\n    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {\r\n      if (path === '*') {\r\n        this._notFoundRedirect = redirectPath;\r\n      } else {\r\n        this._addGuard(path, redirectPath, this.replace);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Add an alias record.\r\n     *\r\n     * @param {String} path\r\n     * @param {String} aliasPath\r\n     */\r\n\r\n    Router.prototype._addAlias = function _addAlias(path, aliasPath) {\r\n      this._addGuard(path, aliasPath, this._match);\r\n    };\r\n\r\n    /**\r\n     * Add a path guard.\r\n     *\r\n     * @param {String} path\r\n     * @param {String} mappedPath\r\n     * @param {Function} handler\r\n     */\r\n\r\n    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {\r\n      var _this2 = this;\r\n\r\n      this._guardRecognizer.add([{\r\n        path: path,\r\n        handler: function handler(match, query) {\r\n          var realPath = mapParams(mappedPath, match.params, query);\r\n          _handler.call(_this2, realPath);\r\n        }\r\n      }]);\r\n    };\r\n\r\n    /**\r\n     * Check if a path matches any redirect records.\r\n     *\r\n     * @param {String} path\r\n     * @return {Boolean} - if true, will skip normal match.\r\n     */\r\n\r\n    Router.prototype._checkGuard = function _checkGuard(path) {\r\n      var matched = this._guardRecognizer.recognize(path, true);\r\n      if (matched) {\r\n        matched[0].handler(matched[0], matched.queryParams);\r\n        return true;\r\n      } else if (this._notFoundRedirect) {\r\n        matched = this._recognizer.recognize(path);\r\n        if (!matched) {\r\n          this.replace(this._notFoundRedirect);\r\n          return true;\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Match a URL path and set the route context on vm,\r\n     * triggering view updates.\r\n     *\r\n     * @param {String} path\r\n     * @param {Object} [state]\r\n     * @param {String} [anchor]\r\n     */\r\n\r\n    Router.prototype._match = function _match(path, state, anchor) {\r\n      var _this3 = this;\r\n\r\n      if (this._checkGuard(path)) {\r\n        return;\r\n      }\r\n\r\n      var currentRoute = this._currentRoute;\r\n      var currentTransition = this._currentTransition;\r\n\r\n      if (currentTransition) {\r\n        if (currentTransition.to.path === path) {\r\n          // do nothing if we have an active transition going to the same path\r\n          return;\r\n        } else if (currentRoute.path === path) {\r\n          // We are going to the same path, but we also have an ongoing but\r\n          // not-yet-validated transition. Abort that transition and reset to\r\n          // prev transition.\r\n          currentTransition.aborted = true;\r\n          this._currentTransition = this._prevTransition;\r\n          return;\r\n        } else {\r\n          // going to a totally different path. abort ongoing transition.\r\n          currentTransition.aborted = true;\r\n        }\r\n      }\r\n\r\n      // construct new route and transition context\r\n      var route = new Route(path, this);\r\n      var transition = new RouteTransition(this, route, currentRoute);\r\n\r\n      // current transition is updated right now.\r\n      // however, current route will only be updated after the transition has\r\n      // been validated.\r\n      this._prevTransition = currentTransition;\r\n      this._currentTransition = transition;\r\n\r\n      if (!this.app) {\r\n        (function () {\r\n          // initial render\r\n          var router = _this3;\r\n          _this3.app = new _this3._appConstructor({\r\n            el: _this3._appContainer,\r\n            created: function created() {\r\n              this.$router = router;\r\n            },\r\n            _meta: {\r\n              $route: route\r\n            }\r\n          });\r\n        })();\r\n      }\r\n\r\n      // check global before hook\r\n      var beforeHooks = this._beforeEachHooks;\r\n      var startTransition = function startTransition() {\r\n        transition.start(function () {\r\n          _this3._postTransition(route, state, anchor);\r\n        });\r\n      };\r\n\r\n      if (beforeHooks.length) {\r\n        transition.runQueue(beforeHooks, function (hook, _, next) {\r\n          if (transition === _this3._currentTransition) {\r\n            transition.callHook(hook, null, next, {\r\n              expectBoolean: true\r\n            });\r\n          }\r\n        }, startTransition);\r\n      } else {\r\n        startTransition();\r\n      }\r\n\r\n      if (!this._rendered && this._startCb) {\r\n        this._startCb.call(null);\r\n      }\r\n\r\n      // HACK:\r\n      // set rendered to true after the transition start, so\r\n      // that components that are acitvated synchronously know\r\n      // whether it is the initial render.\r\n      this._rendered = true;\r\n    };\r\n\r\n    /**\r\n     * Set current to the new transition.\r\n     * This is called by the transition object when the\r\n     * validation of a route has succeeded.\r\n     *\r\n     * @param {Transition} transition\r\n     */\r\n\r\n    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {\r\n      // set current route\r\n      var route = this._currentRoute = transition.to;\r\n      // update route context for all children\r\n      if (this.app.$route !== route) {\r\n        this.app.$route = route;\r\n        this._children.forEach(function (child) {\r\n          child.$route = route;\r\n        });\r\n      }\r\n      // call global after hook\r\n      if (this._afterEachHooks.length) {\r\n        this._afterEachHooks.forEach(function (hook) {\r\n          return hook.call(null, {\r\n            to: transition.to,\r\n            from: transition.from\r\n          });\r\n        });\r\n      }\r\n      this._currentTransition.done = true;\r\n    };\r\n\r\n    /**\r\n     * Handle stuff after the transition.\r\n     *\r\n     * @param {Route} route\r\n     * @param {Object} [state]\r\n     * @param {String} [anchor]\r\n     */\r\n\r\n    Router.prototype._postTransition = function _postTransition(route, state, anchor) {\r\n      // handle scroll positions\r\n      // saved scroll positions take priority\r\n      // then we check if the path has an anchor\r\n      var pos = state && state.pos;\r\n      if (pos && this._saveScrollPosition) {\r\n        Vue.nextTick(function () {\r\n          window.scrollTo(pos.x, pos.y);\r\n        });\r\n      } else if (anchor) {\r\n        Vue.nextTick(function () {\r\n          var el = document.getElementById(anchor.slice(1));\r\n          if (el) {\r\n            window.scrollTo(window.scrollX, el.offsetTop);\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    return Router;\r\n  })();\r\n\r\n  function guardComponent(path, handler) {\r\n    var comp = handler.component;\r\n    if (Vue.util.isPlainObject(comp)) {\r\n      comp = handler.component = Vue.extend(comp);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof comp !== 'function') {\r\n      handler.component = null;\r\n      warn$1('invalid component for route \"' + path + '\".');\r\n    }\r\n  }\r\n\r\n  /* Installation */\r\n\r\n  Router.installed = false;\r\n\r\n  /**\r\n   * Installation interface.\r\n   * Install the necessary directives.\r\n   */\r\n\r\n  Router.install = function (externalVue) {\r\n    /* istanbul ignore if */\r\n    if (Router.installed) {\r\n      warn$1('already installed.');\r\n      return;\r\n    }\r\n    Vue = externalVue;\r\n    applyOverride(Vue);\r\n    View(Vue);\r\n    Link(Vue);\r\n    exports$1.Vue = Vue;\r\n    Router.installed = true;\r\n  };\r\n\r\n  // auto install\r\n  /* istanbul ignore if */\r\n  if (typeof window !== 'undefined' && window.Vue) {\r\n    window.Vue.use(Router);\r\n  }\r\n\r\n  return Router;\r\n\r\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-router/dist/vue-router.js\n// module id = 21\n// module chunks = 3","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif (media) {\r\n\t\tstyleElement.setAttribute(\"media\", media);\r\n\t}\r\n\r\n\tif (sourceMap) {\r\n\t\t// https://developer.chrome.com/devtools/docs/javascript-debugging\r\n\t\t// this makes source maps inside style tags work properly in Chrome\r\n\t\tcss += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */';\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader/addStyles.js\n// module id = 22\n// module chunks = 3","/*!\r\n * Vue.js v1.0.28\r\n * (c) 2016 Evan You\r\n * Released under the MIT License.\r\n */\r\n'use strict';\r\n\r\nfunction set(obj, key, val) {\r\n  if (hasOwn(obj, key)) {\r\n    obj[key] = val;\r\n    return;\r\n  }\r\n  if (obj._isVue) {\r\n    set(obj._data, key, val);\r\n    return;\r\n  }\r\n  var ob = obj.__ob__;\r\n  if (!ob) {\r\n    obj[key] = val;\r\n    return;\r\n  }\r\n  ob.convert(key, val);\r\n  ob.dep.notify();\r\n  if (ob.vms) {\r\n    var i = ob.vms.length;\r\n    while (i--) {\r\n      var vm = ob.vms[i];\r\n      vm._proxy(key);\r\n      vm._digest();\r\n    }\r\n  }\r\n  return val;\r\n}\r\n\r\n/**\r\n * Delete a property and trigger change if necessary.\r\n *\r\n * @param {Object} obj\r\n * @param {String} key\r\n */\r\n\r\nfunction del(obj, key) {\r\n  if (!hasOwn(obj, key)) {\r\n    return;\r\n  }\r\n  delete obj[key];\r\n  var ob = obj.__ob__;\r\n  if (!ob) {\r\n    if (obj._isVue) {\r\n      delete obj._data[key];\r\n      obj._digest();\r\n    }\r\n    return;\r\n  }\r\n  ob.dep.notify();\r\n  if (ob.vms) {\r\n    var i = ob.vms.length;\r\n    while (i--) {\r\n      var vm = ob.vms[i];\r\n      vm._unproxy(key);\r\n      vm._digest();\r\n    }\r\n  }\r\n}\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/**\r\n * Check whether the object has the property.\r\n *\r\n * @param {Object} obj\r\n * @param {String} key\r\n * @return {Boolean}\r\n */\r\n\r\nfunction hasOwn(obj, key) {\r\n  return hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Check if an expression is a literal value.\r\n *\r\n * @param {String} exp\r\n * @return {Boolean}\r\n */\r\n\r\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\r\n\r\nfunction isLiteral(exp) {\r\n  return literalValueRE.test(exp);\r\n}\r\n\r\n/**\r\n * Check if a string starts with $ or _\r\n *\r\n * @param {String} str\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isReserved(str) {\r\n  var c = (str + '').charCodeAt(0);\r\n  return c === 0x24 || c === 0x5F;\r\n}\r\n\r\n/**\r\n * Guard text output, make sure undefined outputs\r\n * empty string\r\n *\r\n * @param {*} value\r\n * @return {String}\r\n */\r\n\r\nfunction _toString(value) {\r\n  return value == null ? '' : value.toString();\r\n}\r\n\r\n/**\r\n * Check and convert possible numeric strings to numbers\r\n * before setting back to data\r\n *\r\n * @param {*} value\r\n * @return {*|Number}\r\n */\r\n\r\nfunction toNumber(value) {\r\n  if (typeof value !== 'string') {\r\n    return value;\r\n  } else {\r\n    var parsed = Number(value);\r\n    return isNaN(parsed) ? value : parsed;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert string boolean literals into real booleans.\r\n *\r\n * @param {*} value\r\n * @return {*|Boolean}\r\n */\r\n\r\nfunction toBoolean(value) {\r\n  return value === 'true' ? true : value === 'false' ? false : value;\r\n}\r\n\r\n/**\r\n * Strip quotes from a string\r\n *\r\n * @param {String} str\r\n * @return {String | false}\r\n */\r\n\r\nfunction stripQuotes(str) {\r\n  var a = str.charCodeAt(0);\r\n  var b = str.charCodeAt(str.length - 1);\r\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\r\n}\r\n\r\n/**\r\n * Camelize a hyphen-delimited string.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\n\r\nvar camelizeRE = /-(\\w)/g;\r\n\r\nfunction camelize(str) {\r\n  return str.replace(camelizeRE, toUpper);\r\n}\r\n\r\nfunction toUpper(_, c) {\r\n  return c ? c.toUpperCase() : '';\r\n}\r\n\r\n/**\r\n * Hyphenate a camelCase string.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\n\r\nvar hyphenateRE = /([^-])([A-Z])/g;\r\n\r\nfunction hyphenate(str) {\r\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts hyphen/underscore/slash delimitered names into\r\n * camelized classNames.\r\n *\r\n * e.g. my-component => MyComponent\r\n *      some_else    => SomeElse\r\n *      some/comp    => SomeComp\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\n\r\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\r\n\r\nfunction classify(str) {\r\n  return str.replace(classifyRE, toUpper);\r\n}\r\n\r\n/**\r\n * Simple bind, faster than native\r\n *\r\n * @param {Function} fn\r\n * @param {Object} ctx\r\n * @return {Function}\r\n */\r\n\r\nfunction bind(fn, ctx) {\r\n  return function (a) {\r\n    var l = arguments.length;\r\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\r\n  };\r\n}\r\n\r\n/**\r\n * Convert an Array-like object to a real Array.\r\n *\r\n * @param {Array-like} list\r\n * @param {Number} [start] - start index\r\n * @return {Array}\r\n */\r\n\r\nfunction toArray(list, start) {\r\n  start = start || 0;\r\n  var i = list.length - start;\r\n  var ret = new Array(i);\r\n  while (i--) {\r\n    ret[i] = list[i + start];\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Mix properties into target object.\r\n *\r\n * @param {Object} to\r\n * @param {Object} from\r\n */\r\n\r\nfunction extend(to, from) {\r\n  var keys = Object.keys(from);\r\n  var i = keys.length;\r\n  while (i--) {\r\n    to[keys[i]] = from[keys[i]];\r\n  }\r\n  return to;\r\n}\r\n\r\n/**\r\n * Quick object check - this is primarily used to tell\r\n * Objects from primitive values when we know the value\r\n * is a JSON-compliant type.\r\n *\r\n * @param {*} obj\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isObject(obj) {\r\n  return obj !== null && typeof obj === 'object';\r\n}\r\n\r\n/**\r\n * Strict object type check. Only returns true\r\n * for plain JavaScript objects.\r\n *\r\n * @param {*} obj\r\n * @return {Boolean}\r\n */\r\n\r\nvar toString = Object.prototype.toString;\r\nvar OBJECT_STRING = '[object Object]';\r\n\r\nfunction isPlainObject(obj) {\r\n  return toString.call(obj) === OBJECT_STRING;\r\n}\r\n\r\n/**\r\n * Array type check.\r\n *\r\n * @param {*} obj\r\n * @return {Boolean}\r\n */\r\n\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Define a property.\r\n *\r\n * @param {Object} obj\r\n * @param {String} key\r\n * @param {*} val\r\n * @param {Boolean} [enumerable]\r\n */\r\n\r\nfunction def(obj, key, val, enumerable) {\r\n  Object.defineProperty(obj, key, {\r\n    value: val,\r\n    enumerable: !!enumerable,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\n/**\r\n * Debounce a function so it only gets called after the\r\n * input stops arriving after the given wait period.\r\n *\r\n * @param {Function} func\r\n * @param {Number} wait\r\n * @return {Function} - the debounced function\r\n */\r\n\r\nfunction _debounce(func, wait) {\r\n  var timeout, args, context, timestamp, result;\r\n  var later = function later() {\r\n    var last = Date.now() - timestamp;\r\n    if (last < wait && last >= 0) {\r\n      timeout = setTimeout(later, wait - last);\r\n    } else {\r\n      timeout = null;\r\n      result = func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    }\r\n  };\r\n  return function () {\r\n    context = this;\r\n    args = arguments;\r\n    timestamp = Date.now();\r\n    if (!timeout) {\r\n      timeout = setTimeout(later, wait);\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Manual indexOf because it's slightly faster than\r\n * native.\r\n *\r\n * @param {Array} arr\r\n * @param {*} obj\r\n */\r\n\r\nfunction indexOf(arr, obj) {\r\n  var i = arr.length;\r\n  while (i--) {\r\n    if (arr[i] === obj) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * Make a cancellable version of an async callback.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n */\r\n\r\nfunction cancellable(fn) {\r\n  var cb = function cb() {\r\n    if (!cb.cancelled) {\r\n      return fn.apply(this, arguments);\r\n    }\r\n  };\r\n  cb.cancel = function () {\r\n    cb.cancelled = true;\r\n  };\r\n  return cb;\r\n}\r\n\r\n/**\r\n * Check if two values are loosely equal - that is,\r\n * if they are plain objects, do they have the same shape?\r\n *\r\n * @param {*} a\r\n * @param {*} b\r\n * @return {Boolean}\r\n */\r\n\r\nfunction looseEqual(a, b) {\r\n  /* eslint-disable eqeqeq */\r\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\r\n  /* eslint-enable eqeqeq */\r\n}\r\n\r\nvar hasProto = ('__proto__' in {});\r\n\r\n// Browser environment sniffing\r\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\r\n\r\n// detect devtools\r\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n\r\n// UA sniffing for working around browser-specific quirks\r\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\nvar isIE = UA && UA.indexOf('trident') > 0;\r\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\nvar isAndroid = UA && UA.indexOf('android') > 0;\r\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\r\n\r\nvar transitionProp = undefined;\r\nvar transitionEndEvent = undefined;\r\nvar animationProp = undefined;\r\nvar animationEndEvent = undefined;\r\n\r\n// Transition property/event sniffing\r\nif (inBrowser && !isIE9) {\r\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\r\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\r\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\r\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\r\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\r\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction isNative(Ctor) {\r\n  return (/native code/.test(Ctor.toString())\r\n  );\r\n}\r\n\r\n/**\r\n * Defer a task to execute it asynchronously. Ideally this\r\n * should be executed as a microtask, so we leverage\r\n * MutationObserver if it's available, and fallback to\r\n * setTimeout(0).\r\n *\r\n * @param {Function} cb\r\n * @param {Object} ctx\r\n */\r\n\r\nvar nextTick = (function () {\r\n  var callbacks = [];\r\n  var pending = false;\r\n  var timerFunc = undefined;\r\n\r\n  function nextTickHandler() {\r\n    pending = false;\r\n    var copies = callbacks.slice(0);\r\n    callbacks.length = 0;\r\n    for (var i = 0; i < copies.length; i++) {\r\n      copies[i]();\r\n    }\r\n  }\r\n\r\n  // the nextTick behavior leverages the microtask queue, which can be accessed\r\n  // via either native Promise.then or MutationObserver.\r\n  // MutationObserver has wider support, however it is seriously bugged in\r\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n  // completely stops working after triggering a few times... so, if native\r\n  // Promise is available, we will use it:\r\n  /* istanbul ignore if */\r\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n    var p = Promise.resolve();\r\n    var noop = function noop() {};\r\n    timerFunc = function () {\r\n      p.then(nextTickHandler);\r\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\r\n      // it can get stuck in a weird state where callbacks are pushed into the\r\n      // microtask queue but the queue isn't being flushed, until the browser\r\n      // needs to do some other work, e.g. handle a timer. Therefore we can\r\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n      if (isIOS) setTimeout(noop);\r\n    };\r\n  } else if (typeof MutationObserver !== 'undefined') {\r\n    // use MutationObserver where native Promise is not available,\r\n    // e.g. IE11, iOS7, Android 4.4\r\n    var counter = 1;\r\n    var observer = new MutationObserver(nextTickHandler);\r\n    var textNode = document.createTextNode(String(counter));\r\n    observer.observe(textNode, {\r\n      characterData: true\r\n    });\r\n    timerFunc = function () {\r\n      counter = (counter + 1) % 2;\r\n      textNode.data = String(counter);\r\n    };\r\n  } else {\r\n    // fallback to setTimeout\r\n    /* istanbul ignore next */\r\n    timerFunc = setTimeout;\r\n  }\r\n\r\n  return function (cb, ctx) {\r\n    var func = ctx ? function () {\r\n      cb.call(ctx);\r\n    } : cb;\r\n    callbacks.push(func);\r\n    if (pending) return;\r\n    pending = true;\r\n    timerFunc(nextTickHandler, 0);\r\n  };\r\n})();\r\n\r\nvar _Set = undefined;\r\n/* istanbul ignore if */\r\nif (typeof Set !== 'undefined' && isNative(Set)) {\r\n  // use native Set when available.\r\n  _Set = Set;\r\n} else {\r\n  // a non-standard Set polyfill that only works with primitive keys.\r\n  _Set = function () {\r\n    this.set = Object.create(null);\r\n  };\r\n  _Set.prototype.has = function (key) {\r\n    return this.set[key] !== undefined;\r\n  };\r\n  _Set.prototype.add = function (key) {\r\n    this.set[key] = 1;\r\n  };\r\n  _Set.prototype.clear = function () {\r\n    this.set = Object.create(null);\r\n  };\r\n}\r\n\r\nfunction Cache(limit) {\r\n  this.size = 0;\r\n  this.limit = limit;\r\n  this.head = this.tail = undefined;\r\n  this._keymap = Object.create(null);\r\n}\r\n\r\nvar p = Cache.prototype;\r\n\r\n/**\r\n * Put <value> into the cache associated with <key>.\r\n * Returns the entry which was removed to make room for\r\n * the new entry. Otherwise undefined is returned.\r\n * (i.e. if there was enough room already).\r\n *\r\n * @param {String} key\r\n * @param {*} value\r\n * @return {Entry|undefined}\r\n */\r\n\r\np.put = function (key, value) {\r\n  var removed;\r\n\r\n  var entry = this.get(key, true);\r\n  if (!entry) {\r\n    if (this.size === this.limit) {\r\n      removed = this.shift();\r\n    }\r\n    entry = {\r\n      key: key\r\n    };\r\n    this._keymap[key] = entry;\r\n    if (this.tail) {\r\n      this.tail.newer = entry;\r\n      entry.older = this.tail;\r\n    } else {\r\n      this.head = entry;\r\n    }\r\n    this.tail = entry;\r\n    this.size++;\r\n  }\r\n  entry.value = value;\r\n\r\n  return removed;\r\n};\r\n\r\n/**\r\n * Purge the least recently used (oldest) entry from the\r\n * cache. Returns the removed entry or undefined if the\r\n * cache was empty.\r\n */\r\n\r\np.shift = function () {\r\n  var entry = this.head;\r\n  if (entry) {\r\n    this.head = this.head.newer;\r\n    this.head.older = undefined;\r\n    entry.newer = entry.older = undefined;\r\n    this._keymap[entry.key] = undefined;\r\n    this.size--;\r\n  }\r\n  return entry;\r\n};\r\n\r\n/**\r\n * Get and register recent use of <key>. Returns the value\r\n * associated with <key> or undefined if not in cache.\r\n *\r\n * @param {String} key\r\n * @param {Boolean} returnEntry\r\n * @return {Entry|*}\r\n */\r\n\r\np.get = function (key, returnEntry) {\r\n  var entry = this._keymap[key];\r\n  if (entry === undefined) return;\r\n  if (entry === this.tail) {\r\n    return returnEntry ? entry : entry.value;\r\n  }\r\n  // HEAD--------------TAIL\r\n  //   <.older   .newer>\r\n  //  <--- add direction --\r\n  //   A  B  C  <D>  E\r\n  if (entry.newer) {\r\n    if (entry === this.head) {\r\n      this.head = entry.newer;\r\n    }\r\n    entry.newer.older = entry.older; // C <-- E.\r\n  }\r\n  if (entry.older) {\r\n    entry.older.newer = entry.newer; // C. --> E\r\n  }\r\n  entry.newer = undefined; // D --x\r\n  entry.older = this.tail; // D. --> E\r\n  if (this.tail) {\r\n    this.tail.newer = entry; // E. <-- D\r\n  }\r\n  this.tail = entry;\r\n  return returnEntry ? entry : entry.value;\r\n};\r\n\r\nvar cache$1 = new Cache(1000);\r\nvar reservedArgRE = /^in$|^-?\\d+/;\r\n\r\n/**\r\n * Parser state\r\n */\r\n\r\nvar str;\r\nvar dir;\r\nvar len;\r\nvar index;\r\nvar chr;\r\nvar state;\r\nvar startState = 0;\r\nvar filterState = 1;\r\nvar filterNameState = 2;\r\nvar filterArgState = 3;\r\n\r\nvar doubleChr = 0x22;\r\nvar singleChr = 0x27;\r\nvar pipeChr = 0x7C;\r\nvar escapeChr = 0x5C;\r\nvar spaceChr = 0x20;\r\n\r\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\r\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\r\n\r\nfunction peek() {\r\n  return str.charCodeAt(index + 1);\r\n}\r\n\r\nfunction next() {\r\n  return str.charCodeAt(++index);\r\n}\r\n\r\nfunction eof() {\r\n  return index >= len;\r\n}\r\n\r\nfunction eatSpace() {\r\n  while (peek() === spaceChr) {\r\n    next();\r\n  }\r\n}\r\n\r\nfunction isStringStart(chr) {\r\n  return chr === doubleChr || chr === singleChr;\r\n}\r\n\r\nfunction isExpStart(chr) {\r\n  return expStartChr[chr];\r\n}\r\n\r\nfunction isExpEnd(start, chr) {\r\n  return expChrPair[start] === chr;\r\n}\r\n\r\nfunction parseString() {\r\n  var stringQuote = next();\r\n  var chr;\r\n  while (!eof()) {\r\n    chr = next();\r\n    // escape char\r\n    if (chr === escapeChr) {\r\n      next();\r\n    } else if (chr === stringQuote) {\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseSpecialExp(chr) {\r\n  var inExp = 0;\r\n  var startChr = chr;\r\n\r\n  while (!eof()) {\r\n    chr = peek();\r\n    if (isStringStart(chr)) {\r\n      parseString();\r\n      continue;\r\n    }\r\n\r\n    if (startChr === chr) {\r\n      inExp++;\r\n    }\r\n    if (isExpEnd(startChr, chr)) {\r\n      inExp--;\r\n    }\r\n\r\n    next();\r\n\r\n    if (inExp === 0) {\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * syntax:\r\n * expression | filterName  [arg  arg [| filterName arg arg]]\r\n */\r\n\r\nfunction parseExpression() {\r\n  var start = index;\r\n  while (!eof()) {\r\n    chr = peek();\r\n    if (isStringStart(chr)) {\r\n      parseString();\r\n    } else if (isExpStart(chr)) {\r\n      parseSpecialExp(chr);\r\n    } else if (chr === pipeChr) {\r\n      next();\r\n      chr = peek();\r\n      if (chr === pipeChr) {\r\n        next();\r\n      } else {\r\n        if (state === startState || state === filterArgState) {\r\n          state = filterState;\r\n        }\r\n        break;\r\n      }\r\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\r\n      eatSpace();\r\n      break;\r\n    } else {\r\n      if (state === filterState) {\r\n        state = filterNameState;\r\n      }\r\n      next();\r\n    }\r\n  }\r\n\r\n  return str.slice(start + 1, index) || null;\r\n}\r\n\r\nfunction parseFilterList() {\r\n  var filters = [];\r\n  while (!eof()) {\r\n    filters.push(parseFilter());\r\n  }\r\n  return filters;\r\n}\r\n\r\nfunction parseFilter() {\r\n  var filter = {};\r\n  var args;\r\n\r\n  state = filterState;\r\n  filter.name = parseExpression().trim();\r\n\r\n  state = filterArgState;\r\n  args = parseFilterArguments();\r\n\r\n  if (args.length) {\r\n    filter.args = args;\r\n  }\r\n  return filter;\r\n}\r\n\r\nfunction parseFilterArguments() {\r\n  var args = [];\r\n  while (!eof() && state !== filterState) {\r\n    var arg = parseExpression();\r\n    if (!arg) {\r\n      break;\r\n    }\r\n    args.push(processFilterArg(arg));\r\n  }\r\n\r\n  return args;\r\n}\r\n\r\n/**\r\n * Check if an argument is dynamic and strip quotes.\r\n *\r\n * @param {String} arg\r\n * @return {Object}\r\n */\r\n\r\nfunction processFilterArg(arg) {\r\n  if (reservedArgRE.test(arg)) {\r\n    return {\r\n      value: toNumber(arg),\r\n      dynamic: false\r\n    };\r\n  } else {\r\n    var stripped = stripQuotes(arg);\r\n    var dynamic = stripped === arg;\r\n    return {\r\n      value: dynamic ? arg : stripped,\r\n      dynamic: dynamic\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a directive value and extract the expression\r\n * and its filters into a descriptor.\r\n *\r\n * Example:\r\n *\r\n * \"a + 1 | uppercase\" will yield:\r\n * {\r\n *   expression: 'a + 1',\r\n *   filters: [\r\n *     { name: 'uppercase', args: null }\r\n *   ]\r\n * }\r\n *\r\n * @param {String} s\r\n * @return {Object}\r\n */\r\n\r\nfunction parseDirective(s) {\r\n  var hit = cache$1.get(s);\r\n  if (hit) {\r\n    return hit;\r\n  }\r\n\r\n  // reset parser state\r\n  str = s;\r\n  dir = {};\r\n  len = str.length;\r\n  index = -1;\r\n  chr = '';\r\n  state = startState;\r\n\r\n  var filters;\r\n\r\n  if (str.indexOf('|') < 0) {\r\n    dir.expression = str.trim();\r\n  } else {\r\n    dir.expression = parseExpression().trim();\r\n    filters = parseFilterList();\r\n    if (filters.length) {\r\n      dir.filters = filters;\r\n    }\r\n  }\r\n\r\n  cache$1.put(s, dir);\r\n  return dir;\r\n}\r\n\r\nvar directive = Object.freeze({\r\n  parseDirective: parseDirective\r\n});\r\n\r\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\nvar cache = undefined;\r\nvar tagRE = undefined;\r\nvar htmlRE = undefined;\r\n/**\r\n * Escape a string so it can be used in a RegExp\r\n * constructor.\r\n *\r\n * @param {String} str\r\n */\r\n\r\nfunction escapeRegex(str) {\r\n  return str.replace(regexEscapeRE, '\\\\$&');\r\n}\r\n\r\nfunction compileRegex() {\r\n  var open = escapeRegex(config.delimiters[0]);\r\n  var close = escapeRegex(config.delimiters[1]);\r\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\r\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\r\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\r\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\r\n  // reset cache\r\n  cache = new Cache(1000);\r\n}\r\n\r\n/**\r\n * Parse a template text string into an array of tokens.\r\n *\r\n * @param {String} text\r\n * @return {Array<Object> | null}\r\n *               - {String} type\r\n *               - {String} value\r\n *               - {Boolean} [html]\r\n *               - {Boolean} [oneTime]\r\n */\r\n\r\nfunction parseText(text) {\r\n  if (!cache) {\r\n    compileRegex();\r\n  }\r\n  var hit = cache.get(text);\r\n  if (hit) {\r\n    return hit;\r\n  }\r\n  if (!tagRE.test(text)) {\r\n    return null;\r\n  }\r\n  var tokens = [];\r\n  var lastIndex = tagRE.lastIndex = 0;\r\n  var match, index, html, value, first, oneTime;\r\n  /* eslint-disable no-cond-assign */\r\n  while (match = tagRE.exec(text)) {\r\n    /* eslint-enable no-cond-assign */\r\n    index = match.index;\r\n    // push text token\r\n    if (index > lastIndex) {\r\n      tokens.push({\r\n        value: text.slice(lastIndex, index)\r\n      });\r\n    }\r\n    // tag token\r\n    html = htmlRE.test(match[0]);\r\n    value = html ? match[1] : match[2];\r\n    first = value.charCodeAt(0);\r\n    oneTime = first === 42; // *\r\n    value = oneTime ? value.slice(1) : value;\r\n    tokens.push({\r\n      tag: true,\r\n      value: value.trim(),\r\n      html: html,\r\n      oneTime: oneTime\r\n    });\r\n    lastIndex = index + match[0].length;\r\n  }\r\n  if (lastIndex < text.length) {\r\n    tokens.push({\r\n      value: text.slice(lastIndex)\r\n    });\r\n  }\r\n  cache.put(text, tokens);\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * Format a list of tokens into an expression.\r\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\r\n * into one single expression as '\"a \" + b + \" c\"'.\r\n *\r\n * @param {Array} tokens\r\n * @param {Vue} [vm]\r\n * @return {String}\r\n */\r\n\r\nfunction tokensToExp(tokens, vm) {\r\n  if (tokens.length > 1) {\r\n    return tokens.map(function (token) {\r\n      return formatToken(token, vm);\r\n    }).join('+');\r\n  } else {\r\n    return formatToken(tokens[0], vm, true);\r\n  }\r\n}\r\n\r\n/**\r\n * Format a single token.\r\n *\r\n * @param {Object} token\r\n * @param {Vue} [vm]\r\n * @param {Boolean} [single]\r\n * @return {String}\r\n */\r\n\r\nfunction formatToken(token, vm, single) {\r\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\r\n}\r\n\r\n/**\r\n * For an attribute with multiple interpolation tags,\r\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\r\n * the whole thing into a single watchable expression, we\r\n * have to inline those filters. This function does exactly\r\n * that. This is a bit hacky but it avoids heavy changes\r\n * to directive parser and watcher mechanism.\r\n *\r\n * @param {String} exp\r\n * @param {Boolean} single\r\n * @return {String}\r\n */\r\n\r\nvar filterRE = /[^|]\\|[^|]/;\r\nfunction inlineFilters(exp, single) {\r\n  if (!filterRE.test(exp)) {\r\n    return single ? exp : '(' + exp + ')';\r\n  } else {\r\n    var dir = parseDirective(exp);\r\n    if (!dir.filters) {\r\n      return '(' + exp + ')';\r\n    } else {\r\n      return 'this._applyFilters(' + dir.expression + // value\r\n      ',null,' + // oldValue (null for read)\r\n      JSON.stringify(dir.filters) + // filter descriptors\r\n      ',false)'; // write?\r\n    }\r\n  }\r\n}\r\n\r\nvar text = Object.freeze({\r\n  compileRegex: compileRegex,\r\n  parseText: parseText,\r\n  tokensToExp: tokensToExp\r\n});\r\n\r\nvar delimiters = ['{{', '}}'];\r\nvar unsafeDelimiters = ['{{{', '}}}'];\r\n\r\nvar config = Object.defineProperties({\r\n\r\n  /**\r\n   * Whether to print debug messages.\r\n   * Also enables stack trace for warnings.\r\n   *\r\n   * @type {Boolean}\r\n   */\r\n\r\n  debug: false,\r\n\r\n  /**\r\n   * Whether to suppress warnings.\r\n   *\r\n   * @type {Boolean}\r\n   */\r\n\r\n  silent: false,\r\n\r\n  /**\r\n   * Whether to use async rendering.\r\n   */\r\n\r\n  async: true,\r\n\r\n  /**\r\n   * Whether to warn against errors caught when evaluating\r\n   * expressions.\r\n   */\r\n\r\n  warnExpressionErrors: true,\r\n\r\n  /**\r\n   * Whether to allow devtools inspection.\r\n   * Disabled by default in production builds.\r\n   */\r\n\r\n  devtools: process.env.NODE_ENV !== 'production',\r\n\r\n  /**\r\n   * Internal flag to indicate the delimiters have been\r\n   * changed.\r\n   *\r\n   * @type {Boolean}\r\n   */\r\n\r\n  _delimitersChanged: true,\r\n\r\n  /**\r\n   * List of asset types that a component can own.\r\n   *\r\n   * @type {Array}\r\n   */\r\n\r\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\r\n\r\n  /**\r\n   * prop binding modes\r\n   */\r\n\r\n  _propBindingModes: {\r\n    ONE_WAY: 0,\r\n    TWO_WAY: 1,\r\n    ONE_TIME: 2\r\n  },\r\n\r\n  /**\r\n   * Max circular updates allowed in a batcher flush cycle.\r\n   */\r\n\r\n  _maxUpdateCount: 100\r\n\r\n}, {\r\n  delimiters: { /**\r\n                 * Interpolation delimiters. Changing these would trigger\r\n                 * the text parser to re-compile the regular expressions.\r\n                 *\r\n                 * @type {Array<String>}\r\n                 */\r\n\r\n    get: function get() {\r\n      return delimiters;\r\n    },\r\n    set: function set(val) {\r\n      delimiters = val;\r\n      compileRegex();\r\n    },\r\n    configurable: true,\r\n    enumerable: true\r\n  },\r\n  unsafeDelimiters: {\r\n    get: function get() {\r\n      return unsafeDelimiters;\r\n    },\r\n    set: function set(val) {\r\n      unsafeDelimiters = val;\r\n      compileRegex();\r\n    },\r\n    configurable: true,\r\n    enumerable: true\r\n  }\r\n});\r\n\r\nvar warn = undefined;\r\nvar formatComponentName = undefined;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  (function () {\r\n    var hasConsole = typeof console !== 'undefined';\r\n\r\n    warn = function (msg, vm) {\r\n      if (hasConsole && !config.silent) {\r\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\r\n      }\r\n    };\r\n\r\n    formatComponentName = function (vm) {\r\n      var name = vm._isVue ? vm.$options.name : vm.name;\r\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\r\n    };\r\n  })();\r\n}\r\n\r\n/**\r\n * Append with transition.\r\n *\r\n * @param {Element} el\r\n * @param {Element} target\r\n * @param {Vue} vm\r\n * @param {Function} [cb]\r\n */\r\n\r\nfunction appendWithTransition(el, target, vm, cb) {\r\n  applyTransition(el, 1, function () {\r\n    target.appendChild(el);\r\n  }, vm, cb);\r\n}\r\n\r\n/**\r\n * InsertBefore with transition.\r\n *\r\n * @param {Element} el\r\n * @param {Element} target\r\n * @param {Vue} vm\r\n * @param {Function} [cb]\r\n */\r\n\r\nfunction beforeWithTransition(el, target, vm, cb) {\r\n  applyTransition(el, 1, function () {\r\n    before(el, target);\r\n  }, vm, cb);\r\n}\r\n\r\n/**\r\n * Remove with transition.\r\n *\r\n * @param {Element} el\r\n * @param {Vue} vm\r\n * @param {Function} [cb]\r\n */\r\n\r\nfunction removeWithTransition(el, vm, cb) {\r\n  applyTransition(el, -1, function () {\r\n    remove(el);\r\n  }, vm, cb);\r\n}\r\n\r\n/**\r\n * Apply transitions with an operation callback.\r\n *\r\n * @param {Element} el\r\n * @param {Number} direction\r\n *                  1: enter\r\n *                 -1: leave\r\n * @param {Function} op - the actual DOM operation\r\n * @param {Vue} vm\r\n * @param {Function} [cb]\r\n */\r\n\r\nfunction applyTransition(el, direction, op, vm, cb) {\r\n  var transition = el.__v_trans;\r\n  if (!transition ||\r\n  // skip if there are no js hooks and CSS transition is\r\n  // not supported\r\n  !transition.hooks && !transitionEndEvent ||\r\n  // skip transitions for initial compile\r\n  !vm._isCompiled ||\r\n  // if the vm is being manipulated by a parent directive\r\n  // during the parent's compilation phase, skip the\r\n  // animation.\r\n  vm.$parent && !vm.$parent._isCompiled) {\r\n    op();\r\n    if (cb) cb();\r\n    return;\r\n  }\r\n  var action = direction > 0 ? 'enter' : 'leave';\r\n  transition[action](op, cb);\r\n}\r\n\r\nvar transition = Object.freeze({\r\n  appendWithTransition: appendWithTransition,\r\n  beforeWithTransition: beforeWithTransition,\r\n  removeWithTransition: removeWithTransition,\r\n  applyTransition: applyTransition\r\n});\r\n\r\n/**\r\n * Query an element selector if it's not an element already.\r\n *\r\n * @param {String|Element} el\r\n * @return {Element}\r\n */\r\n\r\nfunction query(el) {\r\n  if (typeof el === 'string') {\r\n    var selector = el;\r\n    el = document.querySelector(el);\r\n    if (!el) {\r\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\r\n    }\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * Check if a node is in the document.\r\n * Note: document.documentElement.contains should work here\r\n * but always returns false for comment nodes in phantomjs,\r\n * making unit tests difficult. This is fixed by doing the\r\n * contains() check on the node's parentNode instead of\r\n * the node itself.\r\n *\r\n * @param {Node} node\r\n * @return {Boolean}\r\n */\r\n\r\nfunction inDoc(node) {\r\n  if (!node) return false;\r\n  var doc = node.ownerDocument.documentElement;\r\n  var parent = node.parentNode;\r\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\r\n}\r\n\r\n/**\r\n * Get and remove an attribute from a node.\r\n *\r\n * @param {Node} node\r\n * @param {String} _attr\r\n */\r\n\r\nfunction getAttr(node, _attr) {\r\n  var val = node.getAttribute(_attr);\r\n  if (val !== null) {\r\n    node.removeAttribute(_attr);\r\n  }\r\n  return val;\r\n}\r\n\r\n/**\r\n * Get an attribute with colon or v-bind: prefix.\r\n *\r\n * @param {Node} node\r\n * @param {String} name\r\n * @return {String|null}\r\n */\r\n\r\nfunction getBindAttr(node, name) {\r\n  var val = getAttr(node, ':' + name);\r\n  if (val === null) {\r\n    val = getAttr(node, 'v-bind:' + name);\r\n  }\r\n  return val;\r\n}\r\n\r\n/**\r\n * Check the presence of a bind attribute.\r\n *\r\n * @param {Node} node\r\n * @param {String} name\r\n * @return {Boolean}\r\n */\r\n\r\nfunction hasBindAttr(node, name) {\r\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\r\n}\r\n\r\n/**\r\n * Insert el before target\r\n *\r\n * @param {Element} el\r\n * @param {Element} target\r\n */\r\n\r\nfunction before(el, target) {\r\n  target.parentNode.insertBefore(el, target);\r\n}\r\n\r\n/**\r\n * Insert el after target\r\n *\r\n * @param {Element} el\r\n * @param {Element} target\r\n */\r\n\r\nfunction after(el, target) {\r\n  if (target.nextSibling) {\r\n    before(el, target.nextSibling);\r\n  } else {\r\n    target.parentNode.appendChild(el);\r\n  }\r\n}\r\n\r\n/**\r\n * Remove el from DOM\r\n *\r\n * @param {Element} el\r\n */\r\n\r\nfunction remove(el) {\r\n  el.parentNode.removeChild(el);\r\n}\r\n\r\n/**\r\n * Prepend el to target\r\n *\r\n * @param {Element} el\r\n * @param {Element} target\r\n */\r\n\r\nfunction prepend(el, target) {\r\n  if (target.firstChild) {\r\n    before(el, target.firstChild);\r\n  } else {\r\n    target.appendChild(el);\r\n  }\r\n}\r\n\r\n/**\r\n * Replace target with el\r\n *\r\n * @param {Element} target\r\n * @param {Element} el\r\n */\r\n\r\nfunction replace(target, el) {\r\n  var parent = target.parentNode;\r\n  if (parent) {\r\n    parent.replaceChild(el, target);\r\n  }\r\n}\r\n\r\n/**\r\n * Add event listener shorthand.\r\n *\r\n * @param {Element} el\r\n * @param {String} event\r\n * @param {Function} cb\r\n * @param {Boolean} [useCapture]\r\n */\r\n\r\nfunction on(el, event, cb, useCapture) {\r\n  el.addEventListener(event, cb, useCapture);\r\n}\r\n\r\n/**\r\n * Remove event listener shorthand.\r\n *\r\n * @param {Element} el\r\n * @param {String} event\r\n * @param {Function} cb\r\n */\r\n\r\nfunction off(el, event, cb) {\r\n  el.removeEventListener(event, cb);\r\n}\r\n\r\n/**\r\n * For IE9 compat: when both class and :class are present\r\n * getAttribute('class') returns wrong value...\r\n *\r\n * @param {Element} el\r\n * @return {String}\r\n */\r\n\r\nfunction getClass(el) {\r\n  var classname = el.className;\r\n  if (typeof classname === 'object') {\r\n    classname = classname.baseVal || '';\r\n  }\r\n  return classname;\r\n}\r\n\r\n/**\r\n * In IE9, setAttribute('class') will result in empty class\r\n * if the element also has the :class attribute; However in\r\n * PhantomJS, setting `className` does not work on SVG elements...\r\n * So we have to do a conditional check here.\r\n *\r\n * @param {Element} el\r\n * @param {String} cls\r\n */\r\n\r\nfunction setClass(el, cls) {\r\n  /* istanbul ignore if */\r\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\r\n    el.className = cls;\r\n  } else {\r\n    el.setAttribute('class', cls);\r\n  }\r\n}\r\n\r\n/**\r\n * Add class with compatibility for IE & SVG\r\n *\r\n * @param {Element} el\r\n * @param {String} cls\r\n */\r\n\r\nfunction addClass(el, cls) {\r\n  if (el.classList) {\r\n    el.classList.add(cls);\r\n  } else {\r\n    var cur = ' ' + getClass(el) + ' ';\r\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n      setClass(el, (cur + cls).trim());\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remove class with compatibility for IE & SVG\r\n *\r\n * @param {Element} el\r\n * @param {String} cls\r\n */\r\n\r\nfunction removeClass(el, cls) {\r\n  if (el.classList) {\r\n    el.classList.remove(cls);\r\n  } else {\r\n    var cur = ' ' + getClass(el) + ' ';\r\n    var tar = ' ' + cls + ' ';\r\n    while (cur.indexOf(tar) >= 0) {\r\n      cur = cur.replace(tar, ' ');\r\n    }\r\n    setClass(el, cur.trim());\r\n  }\r\n  if (!el.className) {\r\n    el.removeAttribute('class');\r\n  }\r\n}\r\n\r\n/**\r\n * Extract raw content inside an element into a temporary\r\n * container div\r\n *\r\n * @param {Element} el\r\n * @param {Boolean} asFragment\r\n * @return {Element|DocumentFragment}\r\n */\r\n\r\nfunction extractContent(el, asFragment) {\r\n  var child;\r\n  var rawContent;\r\n  /* istanbul ignore if */\r\n  if (isTemplate(el) && isFragment(el.content)) {\r\n    el = el.content;\r\n  }\r\n  if (el.hasChildNodes()) {\r\n    trimNode(el);\r\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\r\n    /* eslint-disable no-cond-assign */\r\n    while (child = el.firstChild) {\r\n      /* eslint-enable no-cond-assign */\r\n      rawContent.appendChild(child);\r\n    }\r\n  }\r\n  return rawContent;\r\n}\r\n\r\n/**\r\n * Trim possible empty head/tail text and comment\r\n * nodes inside a parent.\r\n *\r\n * @param {Node} node\r\n */\r\n\r\nfunction trimNode(node) {\r\n  var child;\r\n  /* eslint-disable no-sequences */\r\n  while ((child = node.firstChild, isTrimmable(child))) {\r\n    node.removeChild(child);\r\n  }\r\n  while ((child = node.lastChild, isTrimmable(child))) {\r\n    node.removeChild(child);\r\n  }\r\n  /* eslint-enable no-sequences */\r\n}\r\n\r\nfunction isTrimmable(node) {\r\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\r\n}\r\n\r\n/**\r\n * Check if an element is a template tag.\r\n * Note if the template appears inside an SVG its tagName\r\n * will be in lowercase.\r\n *\r\n * @param {Element} el\r\n */\r\n\r\nfunction isTemplate(el) {\r\n  return el.tagName && el.tagName.toLowerCase() === 'template';\r\n}\r\n\r\n/**\r\n * Create an \"anchor\" for performing dom insertion/removals.\r\n * This is used in a number of scenarios:\r\n * - fragment instance\r\n * - v-html\r\n * - v-if\r\n * - v-for\r\n * - component\r\n *\r\n * @param {String} content\r\n * @param {Boolean} persist - IE trashes empty textNodes on\r\n *                            cloneNode(true), so in certain\r\n *                            cases the anchor needs to be\r\n *                            non-empty to be persisted in\r\n *                            templates.\r\n * @return {Comment|Text}\r\n */\r\n\r\nfunction createAnchor(content, persist) {\r\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\r\n  anchor.__v_anchor = true;\r\n  return anchor;\r\n}\r\n\r\n/**\r\n * Find a component ref attribute that starts with $.\r\n *\r\n * @param {Element} node\r\n * @return {String|undefined}\r\n */\r\n\r\nvar refRE = /^v-ref:/;\r\n\r\nfunction findRef(node) {\r\n  if (node.hasAttributes()) {\r\n    var attrs = node.attributes;\r\n    for (var i = 0, l = attrs.length; i < l; i++) {\r\n      var name = attrs[i].name;\r\n      if (refRE.test(name)) {\r\n        return camelize(name.replace(refRE, ''));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Map a function to a range of nodes .\r\n *\r\n * @param {Node} node\r\n * @param {Node} end\r\n * @param {Function} op\r\n */\r\n\r\nfunction mapNodeRange(node, end, op) {\r\n  var next;\r\n  while (node !== end) {\r\n    next = node.nextSibling;\r\n    op(node);\r\n    node = next;\r\n  }\r\n  op(end);\r\n}\r\n\r\n/**\r\n * Remove a range of nodes with transition, store\r\n * the nodes in a fragment with correct ordering,\r\n * and call callback when done.\r\n *\r\n * @param {Node} start\r\n * @param {Node} end\r\n * @param {Vue} vm\r\n * @param {DocumentFragment} frag\r\n * @param {Function} cb\r\n */\r\n\r\nfunction removeNodeRange(start, end, vm, frag, cb) {\r\n  var done = false;\r\n  var removed = 0;\r\n  var nodes = [];\r\n  mapNodeRange(start, end, function (node) {\r\n    if (node === end) done = true;\r\n    nodes.push(node);\r\n    removeWithTransition(node, vm, onRemoved);\r\n  });\r\n  function onRemoved() {\r\n    removed++;\r\n    if (done && removed >= nodes.length) {\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        frag.appendChild(nodes[i]);\r\n      }\r\n      cb && cb();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check if a node is a DocumentFragment.\r\n *\r\n * @param {Node} node\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isFragment(node) {\r\n  return node && node.nodeType === 11;\r\n}\r\n\r\n/**\r\n * Get outerHTML of elements, taking care\r\n * of SVG elements in IE as well.\r\n *\r\n * @param {Element} el\r\n * @return {String}\r\n */\r\n\r\nfunction getOuterHTML(el) {\r\n  if (el.outerHTML) {\r\n    return el.outerHTML;\r\n  } else {\r\n    var container = document.createElement('div');\r\n    container.appendChild(el.cloneNode(true));\r\n    return container.innerHTML;\r\n  }\r\n}\r\n\r\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\r\nvar reservedTagRE = /^(slot|partial|component)$/i;\r\n\r\nvar isUnknownElement = undefined;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  isUnknownElement = function (el, tag) {\r\n    if (tag.indexOf('-') > -1) {\r\n      // http://stackoverflow.com/a/28210364/1070244\r\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\r\n    } else {\r\n      return (/HTMLUnknownElement/.test(el.toString()) &&\r\n        // Chrome returns unknown for several HTML5 elements.\r\n        // https://code.google.com/p/chromium/issues/detail?id=540526\r\n        // Firefox returns unknown for some \"Interactive elements.\"\r\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Check if an element is a component, if yes return its\r\n * component id.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Object|undefined}\r\n */\r\n\r\nfunction checkComponentAttr(el, options) {\r\n  var tag = el.tagName.toLowerCase();\r\n  var hasAttrs = el.hasAttributes();\r\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\r\n    if (resolveAsset(options, 'components', tag)) {\r\n      return { id: tag };\r\n    } else {\r\n      var is = hasAttrs && getIsBinding(el, options);\r\n      if (is) {\r\n        return is;\r\n      } else if (process.env.NODE_ENV !== 'production') {\r\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\r\n        if (expectedTag) {\r\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\r\n        } else if (isUnknownElement(el, tag)) {\r\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\r\n        }\r\n      }\r\n    }\r\n  } else if (hasAttrs) {\r\n    return getIsBinding(el, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Get \"is\" binding from an element.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Object|undefined}\r\n */\r\n\r\nfunction getIsBinding(el, options) {\r\n  // dynamic syntax\r\n  var exp = el.getAttribute('is');\r\n  if (exp != null) {\r\n    if (resolveAsset(options, 'components', exp)) {\r\n      el.removeAttribute('is');\r\n      return { id: exp };\r\n    }\r\n  } else {\r\n    exp = getBindAttr(el, 'is');\r\n    if (exp != null) {\r\n      return { id: exp, dynamic: true };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Option overwriting strategies are functions that handle\r\n * how to merge a parent option value and a child option\r\n * value into the final value.\r\n *\r\n * All strategy functions follow the same signature:\r\n *\r\n * @param {*} parentVal\r\n * @param {*} childVal\r\n * @param {Vue} [vm]\r\n */\r\n\r\nvar strats = config.optionMergeStrategies = Object.create(null);\r\n\r\n/**\r\n * Helper that recursively merges two data objects together.\r\n */\r\n\r\nfunction mergeData(to, from) {\r\n  var key, toVal, fromVal;\r\n  for (key in from) {\r\n    toVal = to[key];\r\n    fromVal = from[key];\r\n    if (!hasOwn(to, key)) {\r\n      set(to, key, fromVal);\r\n    } else if (isObject(toVal) && isObject(fromVal)) {\r\n      mergeData(toVal, fromVal);\r\n    }\r\n  }\r\n  return to;\r\n}\r\n\r\n/**\r\n * Data\r\n */\r\n\r\nstrats.data = function (parentVal, childVal, vm) {\r\n  if (!vm) {\r\n    // in a Vue.extend merge, both should be functions\r\n    if (!childVal) {\r\n      return parentVal;\r\n    }\r\n    if (typeof childVal !== 'function') {\r\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\r\n      return parentVal;\r\n    }\r\n    if (!parentVal) {\r\n      return childVal;\r\n    }\r\n    // when parentVal & childVal are both present,\r\n    // we need to return a function that returns the\r\n    // merged result of both functions... no need to\r\n    // check if parentVal is a function here because\r\n    // it has to be a function to pass previous merges.\r\n    return function mergedDataFn() {\r\n      return mergeData(childVal.call(this), parentVal.call(this));\r\n    };\r\n  } else if (parentVal || childVal) {\r\n    return function mergedInstanceDataFn() {\r\n      // instance merge\r\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\r\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\r\n      if (instanceData) {\r\n        return mergeData(instanceData, defaultData);\r\n      } else {\r\n        return defaultData;\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * El\r\n */\r\n\r\nstrats.el = function (parentVal, childVal, vm) {\r\n  if (!vm && childVal && typeof childVal !== 'function') {\r\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\r\n    return;\r\n  }\r\n  var ret = childVal || parentVal;\r\n  // invoke the element factory if this is instance merge\r\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\r\n};\r\n\r\n/**\r\n * Hooks and param attributes are merged as arrays.\r\n */\r\n\r\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\r\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\r\n};\r\n\r\n/**\r\n * Assets\r\n *\r\n * When a vm is present (instance creation), we need to do\r\n * a three-way merge between constructor options, instance\r\n * options and parent options.\r\n */\r\n\r\nfunction mergeAssets(parentVal, childVal) {\r\n  var res = Object.create(parentVal || null);\r\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\r\n}\r\n\r\nconfig._assetTypes.forEach(function (type) {\r\n  strats[type + 's'] = mergeAssets;\r\n});\r\n\r\n/**\r\n * Events & Watchers.\r\n *\r\n * Events & watchers hashes should not overwrite one\r\n * another, so we merge them as arrays.\r\n */\r\n\r\nstrats.watch = strats.events = function (parentVal, childVal) {\r\n  if (!childVal) return parentVal;\r\n  if (!parentVal) return childVal;\r\n  var ret = {};\r\n  extend(ret, parentVal);\r\n  for (var key in childVal) {\r\n    var parent = ret[key];\r\n    var child = childVal[key];\r\n    if (parent && !isArray(parent)) {\r\n      parent = [parent];\r\n    }\r\n    ret[key] = parent ? parent.concat(child) : [child];\r\n  }\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Other object hashes.\r\n */\r\n\r\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\r\n  if (!childVal) return parentVal;\r\n  if (!parentVal) return childVal;\r\n  var ret = Object.create(null);\r\n  extend(ret, parentVal);\r\n  extend(ret, childVal);\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Default strategy.\r\n */\r\n\r\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\r\n  return childVal === undefined ? parentVal : childVal;\r\n};\r\n\r\n/**\r\n * Make sure component options get converted to actual\r\n * constructors.\r\n *\r\n * @param {Object} options\r\n */\r\n\r\nfunction guardComponents(options) {\r\n  if (options.components) {\r\n    var components = options.components = guardArrayAssets(options.components);\r\n    var ids = Object.keys(components);\r\n    var def;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var map = options._componentNameMap = {};\r\n    }\r\n    for (var i = 0, l = ids.length; i < l; i++) {\r\n      var key = ids[i];\r\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\r\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\r\n        continue;\r\n      }\r\n      // record a all lowercase <-> kebab-case mapping for\r\n      // possible custom element case error warning\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\r\n      }\r\n      def = components[key];\r\n      if (isPlainObject(def)) {\r\n        components[key] = Vue.extend(def);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure all props option syntax are normalized into the\r\n * Object-based format.\r\n *\r\n * @param {Object} options\r\n */\r\n\r\nfunction guardProps(options) {\r\n  var props = options.props;\r\n  var i, val;\r\n  if (isArray(props)) {\r\n    options.props = {};\r\n    i = props.length;\r\n    while (i--) {\r\n      val = props[i];\r\n      if (typeof val === 'string') {\r\n        options.props[val] = null;\r\n      } else if (val.name) {\r\n        options.props[val.name] = val;\r\n      }\r\n    }\r\n  } else if (isPlainObject(props)) {\r\n    var keys = Object.keys(props);\r\n    i = keys.length;\r\n    while (i--) {\r\n      val = props[keys[i]];\r\n      if (typeof val === 'function') {\r\n        props[keys[i]] = { type: val };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Guard an Array-format assets option and converted it\r\n * into the key-value Object format.\r\n *\r\n * @param {Object|Array} assets\r\n * @return {Object}\r\n */\r\n\r\nfunction guardArrayAssets(assets) {\r\n  if (isArray(assets)) {\r\n    var res = {};\r\n    var i = assets.length;\r\n    var asset;\r\n    while (i--) {\r\n      asset = assets[i];\r\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\r\n      if (!id) {\r\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\r\n      } else {\r\n        res[id] = asset;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  return assets;\r\n}\r\n\r\n/**\r\n * Merge two option objects into a new one.\r\n * Core utility used in both instantiation and inheritance.\r\n *\r\n * @param {Object} parent\r\n * @param {Object} child\r\n * @param {Vue} [vm] - if vm is present, indicates this is\r\n *                     an instantiation merge.\r\n */\r\n\r\nfunction mergeOptions(parent, child, vm) {\r\n  guardComponents(child);\r\n  guardProps(child);\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (child.propsData && !vm) {\r\n      warn('propsData can only be used as an instantiation option.');\r\n    }\r\n  }\r\n  var options = {};\r\n  var key;\r\n  if (child['extends']) {\r\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\r\n  }\r\n  if (child.mixins) {\r\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n      var mixin = child.mixins[i];\r\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\r\n      parent = mergeOptions(parent, mixinOptions, vm);\r\n    }\r\n  }\r\n  for (key in parent) {\r\n    mergeField(key);\r\n  }\r\n  for (key in child) {\r\n    if (!hasOwn(parent, key)) {\r\n      mergeField(key);\r\n    }\r\n  }\r\n  function mergeField(key) {\r\n    var strat = strats[key] || defaultStrat;\r\n    options[key] = strat(parent[key], child[key], vm, key);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Resolve an asset.\r\n * This function is used because child instances need access\r\n * to assets defined in its ancestor chain.\r\n *\r\n * @param {Object} options\r\n * @param {String} type\r\n * @param {String} id\r\n * @param {Boolean} warnMissing\r\n * @return {Object|Function}\r\n */\r\n\r\nfunction resolveAsset(options, type, id, warnMissing) {\r\n  /* istanbul ignore if */\r\n  if (typeof id !== 'string') {\r\n    return;\r\n  }\r\n  var assets = options[type];\r\n  var camelizedId;\r\n  var res = assets[id] ||\r\n  // camelCase ID\r\n  assets[camelizedId = camelize(id)] ||\r\n  // Pascal Case ID\r\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\r\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\r\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\r\n  }\r\n  return res;\r\n}\r\n\r\nvar uid$1 = 0;\r\n\r\n/**\r\n * A dep is an observable that can have multiple\r\n * directives subscribing to it.\r\n *\r\n * @constructor\r\n */\r\nfunction Dep() {\r\n  this.id = uid$1++;\r\n  this.subs = [];\r\n}\r\n\r\n// the current target watcher being evaluated.\r\n// this is globally unique because there could be only one\r\n// watcher being evaluated at any time.\r\nDep.target = null;\r\n\r\n/**\r\n * Add a directive subscriber.\r\n *\r\n * @param {Directive} sub\r\n */\r\n\r\nDep.prototype.addSub = function (sub) {\r\n  this.subs.push(sub);\r\n};\r\n\r\n/**\r\n * Remove a directive subscriber.\r\n *\r\n * @param {Directive} sub\r\n */\r\n\r\nDep.prototype.removeSub = function (sub) {\r\n  this.subs.$remove(sub);\r\n};\r\n\r\n/**\r\n * Add self as a dependency to the target watcher.\r\n */\r\n\r\nDep.prototype.depend = function () {\r\n  Dep.target.addDep(this);\r\n};\r\n\r\n/**\r\n * Notify all subscribers of a new value.\r\n */\r\n\r\nDep.prototype.notify = function () {\r\n  // stablize the subscriber list first\r\n  var subs = toArray(this.subs);\r\n  for (var i = 0, l = subs.length; i < l; i++) {\r\n    subs[i].update();\r\n  }\r\n};\r\n\r\nvar arrayProto = Array.prototype;\r\nvar arrayMethods = Object.create(arrayProto)\r\n\r\n/**\r\n * Intercept mutating methods and emit events\r\n */\r\n\r\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\r\n  // cache original method\r\n  var original = arrayProto[method];\r\n  def(arrayMethods, method, function mutator() {\r\n    // avoid leaking arguments:\r\n    // http://jsperf.com/closure-with-arguments\r\n    var i = arguments.length;\r\n    var args = new Array(i);\r\n    while (i--) {\r\n      args[i] = arguments[i];\r\n    }\r\n    var result = original.apply(this, args);\r\n    var ob = this.__ob__;\r\n    var inserted;\r\n    switch (method) {\r\n      case 'push':\r\n        inserted = args;\r\n        break;\r\n      case 'unshift':\r\n        inserted = args;\r\n        break;\r\n      case 'splice':\r\n        inserted = args.slice(2);\r\n        break;\r\n    }\r\n    if (inserted) ob.observeArray(inserted);\r\n    // notify change\r\n    ob.dep.notify();\r\n    return result;\r\n  });\r\n});\r\n\r\n/**\r\n * Swap the element at the given index with a new value\r\n * and emits corresponding event.\r\n *\r\n * @param {Number} index\r\n * @param {*} val\r\n * @return {*} - replaced element\r\n */\r\n\r\ndef(arrayProto, '$set', function $set(index, val) {\r\n  if (index >= this.length) {\r\n    this.length = Number(index) + 1;\r\n  }\r\n  return this.splice(index, 1, val)[0];\r\n});\r\n\r\n/**\r\n * Convenience method to remove the element at given index or target element reference.\r\n *\r\n * @param {*} item\r\n */\r\n\r\ndef(arrayProto, '$remove', function $remove(item) {\r\n  /* istanbul ignore if */\r\n  if (!this.length) return;\r\n  var index = indexOf(this, item);\r\n  if (index > -1) {\r\n    return this.splice(index, 1);\r\n  }\r\n});\r\n\r\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\n\r\n/**\r\n * By default, when a reactive property is set, the new value is\r\n * also converted to become reactive. However in certain cases, e.g.\r\n * v-for scope alias and props, we don't want to force conversion\r\n * because the value may be a nested value under a frozen data structure.\r\n *\r\n * So whenever we want to set a reactive property without forcing\r\n * conversion on the new value, we wrap that call inside this function.\r\n */\r\n\r\nvar shouldConvert = true;\r\n\r\nfunction withoutConversion(fn) {\r\n  shouldConvert = false;\r\n  fn();\r\n  shouldConvert = true;\r\n}\r\n\r\n/**\r\n * Observer class that are attached to each observed\r\n * object. Once attached, the observer converts target\r\n * object's property keys into getter/setters that\r\n * collect dependencies and dispatches updates.\r\n *\r\n * @param {Array|Object} value\r\n * @constructor\r\n */\r\n\r\nfunction Observer(value) {\r\n  this.value = value;\r\n  this.dep = new Dep();\r\n  def(value, '__ob__', this);\r\n  if (isArray(value)) {\r\n    var augment = hasProto ? protoAugment : copyAugment;\r\n    augment(value, arrayMethods, arrayKeys);\r\n    this.observeArray(value);\r\n  } else {\r\n    this.walk(value);\r\n  }\r\n}\r\n\r\n// Instance methods\r\n\r\n/**\r\n * Walk through each property and convert them into\r\n * getter/setters. This method should only be called when\r\n * value type is Object.\r\n *\r\n * @param {Object} obj\r\n */\r\n\r\nObserver.prototype.walk = function (obj) {\r\n  var keys = Object.keys(obj);\r\n  for (var i = 0, l = keys.length; i < l; i++) {\r\n    this.convert(keys[i], obj[keys[i]]);\r\n  }\r\n};\r\n\r\n/**\r\n * Observe a list of Array items.\r\n *\r\n * @param {Array} items\r\n */\r\n\r\nObserver.prototype.observeArray = function (items) {\r\n  for (var i = 0, l = items.length; i < l; i++) {\r\n    observe(items[i]);\r\n  }\r\n};\r\n\r\n/**\r\n * Convert a property into getter/setter so we can emit\r\n * the events when the property is accessed/changed.\r\n *\r\n * @param {String} key\r\n * @param {*} val\r\n */\r\n\r\nObserver.prototype.convert = function (key, val) {\r\n  defineReactive(this.value, key, val);\r\n};\r\n\r\n/**\r\n * Add an owner vm, so that when $set/$delete mutations\r\n * happen we can notify owner vms to proxy the keys and\r\n * digest the watchers. This is only called when the object\r\n * is observed as an instance's root $data.\r\n *\r\n * @param {Vue} vm\r\n */\r\n\r\nObserver.prototype.addVm = function (vm) {\r\n  (this.vms || (this.vms = [])).push(vm);\r\n};\r\n\r\n/**\r\n * Remove an owner vm. This is called when the object is\r\n * swapped out as an instance's $data object.\r\n *\r\n * @param {Vue} vm\r\n */\r\n\r\nObserver.prototype.removeVm = function (vm) {\r\n  this.vms.$remove(vm);\r\n};\r\n\r\n// helpers\r\n\r\n/**\r\n * Augment an target Object or Array by intercepting\r\n * the prototype chain using __proto__\r\n *\r\n * @param {Object|Array} target\r\n * @param {Object} src\r\n */\r\n\r\nfunction protoAugment(target, src) {\r\n  /* eslint-disable no-proto */\r\n  target.__proto__ = src;\r\n  /* eslint-enable no-proto */\r\n}\r\n\r\n/**\r\n * Augment an target Object or Array by defining\r\n * hidden properties.\r\n *\r\n * @param {Object|Array} target\r\n * @param {Object} proto\r\n */\r\n\r\nfunction copyAugment(target, src, keys) {\r\n  for (var i = 0, l = keys.length; i < l; i++) {\r\n    var key = keys[i];\r\n    def(target, key, src[key]);\r\n  }\r\n}\r\n\r\n/**\r\n * Attempt to create an observer instance for a value,\r\n * returns the new observer if successfully observed,\r\n * or the existing observer if the value already has one.\r\n *\r\n * @param {*} value\r\n * @param {Vue} [vm]\r\n * @return {Observer|undefined}\r\n * @static\r\n */\r\n\r\nfunction observe(value, vm) {\r\n  if (!value || typeof value !== 'object') {\r\n    return;\r\n  }\r\n  var ob;\r\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n    ob = value.__ob__;\r\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\r\n    ob = new Observer(value);\r\n  }\r\n  if (ob && vm) {\r\n    ob.addVm(vm);\r\n  }\r\n  return ob;\r\n}\r\n\r\n/**\r\n * Define a reactive property on an Object.\r\n *\r\n * @param {Object} obj\r\n * @param {String} key\r\n * @param {*} val\r\n */\r\n\r\nfunction defineReactive(obj, key, val) {\r\n  var dep = new Dep();\r\n\r\n  var property = Object.getOwnPropertyDescriptor(obj, key);\r\n  if (property && property.configurable === false) {\r\n    return;\r\n  }\r\n\r\n  // cater for pre-defined getter/setters\r\n  var getter = property && property.get;\r\n  var setter = property && property.set;\r\n\r\n  var childOb = observe(val);\r\n  Object.defineProperty(obj, key, {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: function reactiveGetter() {\r\n      var value = getter ? getter.call(obj) : val;\r\n      if (Dep.target) {\r\n        dep.depend();\r\n        if (childOb) {\r\n          childOb.dep.depend();\r\n        }\r\n        if (isArray(value)) {\r\n          for (var e, i = 0, l = value.length; i < l; i++) {\r\n            e = value[i];\r\n            e && e.__ob__ && e.__ob__.dep.depend();\r\n          }\r\n        }\r\n      }\r\n      return value;\r\n    },\r\n    set: function reactiveSetter(newVal) {\r\n      var value = getter ? getter.call(obj) : val;\r\n      if (newVal === value) {\r\n        return;\r\n      }\r\n      if (setter) {\r\n        setter.call(obj, newVal);\r\n      } else {\r\n        val = newVal;\r\n      }\r\n      childOb = observe(newVal);\r\n      dep.notify();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\nvar util = Object.freeze({\r\n\tdefineReactive: defineReactive,\r\n\tset: set,\r\n\tdel: del,\r\n\thasOwn: hasOwn,\r\n\tisLiteral: isLiteral,\r\n\tisReserved: isReserved,\r\n\t_toString: _toString,\r\n\ttoNumber: toNumber,\r\n\ttoBoolean: toBoolean,\r\n\tstripQuotes: stripQuotes,\r\n\tcamelize: camelize,\r\n\thyphenate: hyphenate,\r\n\tclassify: classify,\r\n\tbind: bind,\r\n\ttoArray: toArray,\r\n\textend: extend,\r\n\tisObject: isObject,\r\n\tisPlainObject: isPlainObject,\r\n\tdef: def,\r\n\tdebounce: _debounce,\r\n\tindexOf: indexOf,\r\n\tcancellable: cancellable,\r\n\tlooseEqual: looseEqual,\r\n\tisArray: isArray,\r\n\thasProto: hasProto,\r\n\tinBrowser: inBrowser,\r\n\tdevtools: devtools,\r\n\tisIE: isIE,\r\n\tisIE9: isIE9,\r\n\tisAndroid: isAndroid,\r\n\tisIOS: isIOS,\r\n\tget transitionProp () { return transitionProp; },\r\n\tget transitionEndEvent () { return transitionEndEvent; },\r\n\tget animationProp () { return animationProp; },\r\n\tget animationEndEvent () { return animationEndEvent; },\r\n\tnextTick: nextTick,\r\n\tget _Set () { return _Set; },\r\n\tquery: query,\r\n\tinDoc: inDoc,\r\n\tgetAttr: getAttr,\r\n\tgetBindAttr: getBindAttr,\r\n\thasBindAttr: hasBindAttr,\r\n\tbefore: before,\r\n\tafter: after,\r\n\tremove: remove,\r\n\tprepend: prepend,\r\n\treplace: replace,\r\n\ton: on,\r\n\toff: off,\r\n\tsetClass: setClass,\r\n\taddClass: addClass,\r\n\tremoveClass: removeClass,\r\n\textractContent: extractContent,\r\n\ttrimNode: trimNode,\r\n\tisTemplate: isTemplate,\r\n\tcreateAnchor: createAnchor,\r\n\tfindRef: findRef,\r\n\tmapNodeRange: mapNodeRange,\r\n\tremoveNodeRange: removeNodeRange,\r\n\tisFragment: isFragment,\r\n\tgetOuterHTML: getOuterHTML,\r\n\tmergeOptions: mergeOptions,\r\n\tresolveAsset: resolveAsset,\r\n\tcheckComponentAttr: checkComponentAttr,\r\n\tcommonTagRE: commonTagRE,\r\n\treservedTagRE: reservedTagRE,\r\n\tget warn () { return warn; }\r\n});\r\n\r\nvar uid = 0;\r\n\r\nfunction initMixin (Vue) {\r\n  /**\r\n   * The main init sequence. This is called for every\r\n   * instance, including ones that are created from extended\r\n   * constructors.\r\n   *\r\n   * @param {Object} options - this options object should be\r\n   *                           the result of merging class\r\n   *                           options and the options passed\r\n   *                           in to the constructor.\r\n   */\r\n\r\n  Vue.prototype._init = function (options) {\r\n    options = options || {};\r\n\r\n    this.$el = null;\r\n    this.$parent = options.parent;\r\n    this.$root = this.$parent ? this.$parent.$root : this;\r\n    this.$children = [];\r\n    this.$refs = {}; // child vm references\r\n    this.$els = {}; // element references\r\n    this._watchers = []; // all watchers as an array\r\n    this._directives = []; // all directives\r\n\r\n    // a uid\r\n    this._uid = uid++;\r\n\r\n    // a flag to avoid this being observed\r\n    this._isVue = true;\r\n\r\n    // events bookkeeping\r\n    this._events = {}; // registered callbacks\r\n    this._eventsCount = {}; // for $broadcast optimization\r\n\r\n    // fragment instance properties\r\n    this._isFragment = false;\r\n    this._fragment = // @type {DocumentFragment}\r\n    this._fragmentStart = // @type {Text|Comment}\r\n    this._fragmentEnd = null; // @type {Text|Comment}\r\n\r\n    // lifecycle state\r\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\r\n    this._unlinkFn = null;\r\n\r\n    // context:\r\n    // if this is a transcluded component, context\r\n    // will be the common parent vm of this instance\r\n    // and its host.\r\n    this._context = options._context || this.$parent;\r\n\r\n    // scope:\r\n    // if this is inside an inline v-for, the scope\r\n    // will be the intermediate scope created for this\r\n    // repeat fragment. this is used for linking props\r\n    // and container directives.\r\n    this._scope = options._scope;\r\n\r\n    // fragment:\r\n    // if this instance is compiled inside a Fragment, it\r\n    // needs to register itself as a child of that fragment\r\n    // for attach/detach to work properly.\r\n    this._frag = options._frag;\r\n    if (this._frag) {\r\n      this._frag.children.push(this);\r\n    }\r\n\r\n    // push self into parent / transclusion host\r\n    if (this.$parent) {\r\n      this.$parent.$children.push(this);\r\n    }\r\n\r\n    // merge options.\r\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\r\n\r\n    // set ref\r\n    this._updateRef();\r\n\r\n    // initialize data as empty object.\r\n    // it will be filled up in _initData().\r\n    this._data = {};\r\n\r\n    // call init hook\r\n    this._callHook('init');\r\n\r\n    // initialize data observation and scope inheritance.\r\n    this._initState();\r\n\r\n    // setup event system and option events.\r\n    this._initEvents();\r\n\r\n    // call created hook\r\n    this._callHook('created');\r\n\r\n    // if `el` option is passed, start compilation.\r\n    if (options.el) {\r\n      this.$mount(options.el);\r\n    }\r\n  };\r\n}\r\n\r\nvar pathCache = new Cache(1000);\r\n\r\n// actions\r\nvar APPEND = 0;\r\nvar PUSH = 1;\r\nvar INC_SUB_PATH_DEPTH = 2;\r\nvar PUSH_SUB_PATH = 3;\r\n\r\n// states\r\nvar BEFORE_PATH = 0;\r\nvar IN_PATH = 1;\r\nvar BEFORE_IDENT = 2;\r\nvar IN_IDENT = 3;\r\nvar IN_SUB_PATH = 4;\r\nvar IN_SINGLE_QUOTE = 5;\r\nvar IN_DOUBLE_QUOTE = 6;\r\nvar AFTER_PATH = 7;\r\nvar ERROR = 8;\r\n\r\nvar pathStateMachine = [];\r\n\r\npathStateMachine[BEFORE_PATH] = {\r\n  'ws': [BEFORE_PATH],\r\n  'ident': [IN_IDENT, APPEND],\r\n  '[': [IN_SUB_PATH],\r\n  'eof': [AFTER_PATH]\r\n};\r\n\r\npathStateMachine[IN_PATH] = {\r\n  'ws': [IN_PATH],\r\n  '.': [BEFORE_IDENT],\r\n  '[': [IN_SUB_PATH],\r\n  'eof': [AFTER_PATH]\r\n};\r\n\r\npathStateMachine[BEFORE_IDENT] = {\r\n  'ws': [BEFORE_IDENT],\r\n  'ident': [IN_IDENT, APPEND]\r\n};\r\n\r\npathStateMachine[IN_IDENT] = {\r\n  'ident': [IN_IDENT, APPEND],\r\n  '0': [IN_IDENT, APPEND],\r\n  'number': [IN_IDENT, APPEND],\r\n  'ws': [IN_PATH, PUSH],\r\n  '.': [BEFORE_IDENT, PUSH],\r\n  '[': [IN_SUB_PATH, PUSH],\r\n  'eof': [AFTER_PATH, PUSH]\r\n};\r\n\r\npathStateMachine[IN_SUB_PATH] = {\r\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\r\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\r\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\r\n  ']': [IN_PATH, PUSH_SUB_PATH],\r\n  'eof': ERROR,\r\n  'else': [IN_SUB_PATH, APPEND]\r\n};\r\n\r\npathStateMachine[IN_SINGLE_QUOTE] = {\r\n  \"'\": [IN_SUB_PATH, APPEND],\r\n  'eof': ERROR,\r\n  'else': [IN_SINGLE_QUOTE, APPEND]\r\n};\r\n\r\npathStateMachine[IN_DOUBLE_QUOTE] = {\r\n  '\"': [IN_SUB_PATH, APPEND],\r\n  'eof': ERROR,\r\n  'else': [IN_DOUBLE_QUOTE, APPEND]\r\n};\r\n\r\n/**\r\n * Determine the type of a character in a keypath.\r\n *\r\n * @param {Char} ch\r\n * @return {String} type\r\n */\r\n\r\nfunction getPathCharType(ch) {\r\n  if (ch === undefined) {\r\n    return 'eof';\r\n  }\r\n\r\n  var code = ch.charCodeAt(0);\r\n\r\n  switch (code) {\r\n    case 0x5B: // [\r\n    case 0x5D: // ]\r\n    case 0x2E: // .\r\n    case 0x22: // \"\r\n    case 0x27: // '\r\n    case 0x30:\r\n      // 0\r\n      return ch;\r\n\r\n    case 0x5F: // _\r\n    case 0x24:\r\n      // $\r\n      return 'ident';\r\n\r\n    case 0x20: // Space\r\n    case 0x09: // Tab\r\n    case 0x0A: // Newline\r\n    case 0x0D: // Return\r\n    case 0xA0: // No-break space\r\n    case 0xFEFF: // Byte Order Mark\r\n    case 0x2028: // Line Separator\r\n    case 0x2029:\r\n      // Paragraph Separator\r\n      return 'ws';\r\n  }\r\n\r\n  // a-z, A-Z\r\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\r\n    return 'ident';\r\n  }\r\n\r\n  // 1-9\r\n  if (code >= 0x31 && code <= 0x39) {\r\n    return 'number';\r\n  }\r\n\r\n  return 'else';\r\n}\r\n\r\n/**\r\n * Format a subPath, return its plain form if it is\r\n * a literal string or number. Otherwise prepend the\r\n * dynamic indicator (*).\r\n *\r\n * @param {String} path\r\n * @return {String}\r\n */\r\n\r\nfunction formatSubPath(path) {\r\n  var trimmed = path.trim();\r\n  // invalid leading 0\r\n  if (path.charAt(0) === '0' && isNaN(path)) {\r\n    return false;\r\n  }\r\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\r\n}\r\n\r\n/**\r\n * Parse a string path into an array of segments\r\n *\r\n * @param {String} path\r\n * @return {Array|undefined}\r\n */\r\n\r\nfunction parse(path) {\r\n  var keys = [];\r\n  var index = -1;\r\n  var mode = BEFORE_PATH;\r\n  var subPathDepth = 0;\r\n  var c, newChar, key, type, transition, action, typeMap;\r\n\r\n  var actions = [];\r\n\r\n  actions[PUSH] = function () {\r\n    if (key !== undefined) {\r\n      keys.push(key);\r\n      key = undefined;\r\n    }\r\n  };\r\n\r\n  actions[APPEND] = function () {\r\n    if (key === undefined) {\r\n      key = newChar;\r\n    } else {\r\n      key += newChar;\r\n    }\r\n  };\r\n\r\n  actions[INC_SUB_PATH_DEPTH] = function () {\r\n    actions[APPEND]();\r\n    subPathDepth++;\r\n  };\r\n\r\n  actions[PUSH_SUB_PATH] = function () {\r\n    if (subPathDepth > 0) {\r\n      subPathDepth--;\r\n      mode = IN_SUB_PATH;\r\n      actions[APPEND]();\r\n    } else {\r\n      subPathDepth = 0;\r\n      key = formatSubPath(key);\r\n      if (key === false) {\r\n        return false;\r\n      } else {\r\n        actions[PUSH]();\r\n      }\r\n    }\r\n  };\r\n\r\n  function maybeUnescapeQuote() {\r\n    var nextChar = path[index + 1];\r\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\r\n      index++;\r\n      newChar = '\\\\' + nextChar;\r\n      actions[APPEND]();\r\n      return true;\r\n    }\r\n  }\r\n\r\n  while (mode != null) {\r\n    index++;\r\n    c = path[index];\r\n\r\n    if (c === '\\\\' && maybeUnescapeQuote()) {\r\n      continue;\r\n    }\r\n\r\n    type = getPathCharType(c);\r\n    typeMap = pathStateMachine[mode];\r\n    transition = typeMap[type] || typeMap['else'] || ERROR;\r\n\r\n    if (transition === ERROR) {\r\n      return; // parse error\r\n    }\r\n\r\n    mode = transition[0];\r\n    action = actions[transition[1]];\r\n    if (action) {\r\n      newChar = transition[2];\r\n      newChar = newChar === undefined ? c : newChar;\r\n      if (action() === false) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (mode === AFTER_PATH) {\r\n      keys.raw = path;\r\n      return keys;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * External parse that check for a cache hit first\r\n *\r\n * @param {String} path\r\n * @return {Array|undefined}\r\n */\r\n\r\nfunction parsePath(path) {\r\n  var hit = pathCache.get(path);\r\n  if (!hit) {\r\n    hit = parse(path);\r\n    if (hit) {\r\n      pathCache.put(path, hit);\r\n    }\r\n  }\r\n  return hit;\r\n}\r\n\r\n/**\r\n * Get from an object from a path string\r\n *\r\n * @param {Object} obj\r\n * @param {String} path\r\n */\r\n\r\nfunction getPath(obj, path) {\r\n  return parseExpression$1(path).get(obj);\r\n}\r\n\r\n/**\r\n * Warn against setting non-existent root path on a vm.\r\n */\r\n\r\nvar warnNonExistent;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  warnNonExistent = function (path, vm) {\r\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\r\n  };\r\n}\r\n\r\n/**\r\n * Set on an object from a path\r\n *\r\n * @param {Object} obj\r\n * @param {String | Array} path\r\n * @param {*} val\r\n */\r\n\r\nfunction setPath(obj, path, val) {\r\n  var original = obj;\r\n  if (typeof path === 'string') {\r\n    path = parse(path);\r\n  }\r\n  if (!path || !isObject(obj)) {\r\n    return false;\r\n  }\r\n  var last, key;\r\n  for (var i = 0, l = path.length; i < l; i++) {\r\n    last = obj;\r\n    key = path[i];\r\n    if (key.charAt(0) === '*') {\r\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\r\n    }\r\n    if (i < l - 1) {\r\n      obj = obj[key];\r\n      if (!isObject(obj)) {\r\n        obj = {};\r\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\r\n          warnNonExistent(path, last);\r\n        }\r\n        set(last, key, obj);\r\n      }\r\n    } else {\r\n      if (isArray(obj)) {\r\n        obj.$set(key, val);\r\n      } else if (key in obj) {\r\n        obj[key] = val;\r\n      } else {\r\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\r\n          warnNonExistent(path, obj);\r\n        }\r\n        set(obj, key, val);\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nvar path = Object.freeze({\r\n  parsePath: parsePath,\r\n  getPath: getPath,\r\n  setPath: setPath\r\n});\r\n\r\nvar expressionCache = new Cache(1000);\r\n\r\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\r\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\r\n\r\n// keywords that don't make sense inside expressions\r\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\r\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\r\n\r\nvar wsRE = /\\s/g;\r\nvar newlineRE = /\\n/g;\r\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\r\nvar restoreRE = /\"(\\d+)\"/g;\r\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\r\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\r\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\r\n\r\nfunction noop() {}\r\n\r\n/**\r\n * Save / Rewrite / Restore\r\n *\r\n * When rewriting paths found in an expression, it is\r\n * possible for the same letter sequences to be found in\r\n * strings and Object literal property keys. Therefore we\r\n * remove and store these parts in a temporary array, and\r\n * restore them after the path rewrite.\r\n */\r\n\r\nvar saved = [];\r\n\r\n/**\r\n * Save replacer\r\n *\r\n * The save regex can match two possible cases:\r\n * 1. An opening object literal\r\n * 2. A string\r\n * If matched as a plain string, we need to escape its\r\n * newlines, since the string needs to be preserved when\r\n * generating the function body.\r\n *\r\n * @param {String} str\r\n * @param {String} isString - str if matched as a string\r\n * @return {String} - placeholder with index\r\n */\r\n\r\nfunction save(str, isString) {\r\n  var i = saved.length;\r\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\r\n  return '\"' + i + '\"';\r\n}\r\n\r\n/**\r\n * Path rewrite replacer\r\n *\r\n * @param {String} raw\r\n * @return {String}\r\n */\r\n\r\nfunction rewrite(raw) {\r\n  var c = raw.charAt(0);\r\n  var path = raw.slice(1);\r\n  if (allowedKeywordsRE.test(path)) {\r\n    return raw;\r\n  } else {\r\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\r\n    return c + 'scope.' + path;\r\n  }\r\n}\r\n\r\n/**\r\n * Restore replacer\r\n *\r\n * @param {String} str\r\n * @param {String} i - matched save index\r\n * @return {String}\r\n */\r\n\r\nfunction restore(str, i) {\r\n  return saved[i];\r\n}\r\n\r\n/**\r\n * Rewrite an expression, prefixing all path accessors with\r\n * `scope.` and generate getter/setter functions.\r\n *\r\n * @param {String} exp\r\n * @return {Function}\r\n */\r\n\r\nfunction compileGetter(exp) {\r\n  if (improperKeywordsRE.test(exp)) {\r\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\r\n  }\r\n  // reset state\r\n  saved.length = 0;\r\n  // save strings and object literal keys\r\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\r\n  // rewrite all paths\r\n  // pad 1 space here because the regex matches 1 extra char\r\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\r\n  return makeGetterFn(body);\r\n}\r\n\r\n/**\r\n * Build a getter function. Requires eval.\r\n *\r\n * We isolate the try/catch so it doesn't affect the\r\n * optimization of the parse function when it is not called.\r\n *\r\n * @param {String} body\r\n * @return {Function|undefined}\r\n */\r\n\r\nfunction makeGetterFn(body) {\r\n  try {\r\n    /* eslint-disable no-new-func */\r\n    return new Function('scope', 'return ' + body + ';');\r\n    /* eslint-enable no-new-func */\r\n  } catch (e) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      /* istanbul ignore if */\r\n      if (e.toString().match(/unsafe-eval|CSP/)) {\r\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\r\n      } else {\r\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\r\n      }\r\n    }\r\n    return noop;\r\n  }\r\n}\r\n\r\n/**\r\n * Compile a setter function for the expression.\r\n *\r\n * @param {String} exp\r\n * @return {Function|undefined}\r\n */\r\n\r\nfunction compileSetter(exp) {\r\n  var path = parsePath(exp);\r\n  if (path) {\r\n    return function (scope, val) {\r\n      setPath(scope, path, val);\r\n    };\r\n  } else {\r\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\r\n  }\r\n}\r\n\r\n/**\r\n * Parse an expression into re-written getter/setters.\r\n *\r\n * @param {String} exp\r\n * @param {Boolean} needSet\r\n * @return {Function}\r\n */\r\n\r\nfunction parseExpression$1(exp, needSet) {\r\n  exp = exp.trim();\r\n  // try cache\r\n  var hit = expressionCache.get(exp);\r\n  if (hit) {\r\n    if (needSet && !hit.set) {\r\n      hit.set = compileSetter(hit.exp);\r\n    }\r\n    return hit;\r\n  }\r\n  var res = { exp: exp };\r\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\r\n  // optimized super simple getter\r\n  ? makeGetterFn('scope.' + exp)\r\n  // dynamic getter\r\n  : compileGetter(exp);\r\n  if (needSet) {\r\n    res.set = compileSetter(exp);\r\n  }\r\n  expressionCache.put(exp, res);\r\n  return res;\r\n}\r\n\r\n/**\r\n * Check if an expression is a simple path.\r\n *\r\n * @param {String} exp\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isSimplePath(exp) {\r\n  return pathTestRE.test(exp) &&\r\n  // don't treat literal values as paths\r\n  !literalValueRE$1.test(exp) &&\r\n  // Math constants e.g. Math.PI, Math.E etc.\r\n  exp.slice(0, 5) !== 'Math.';\r\n}\r\n\r\nvar expression = Object.freeze({\r\n  parseExpression: parseExpression$1,\r\n  isSimplePath: isSimplePath\r\n});\r\n\r\n// we have two separate queues: one for directive updates\r\n// and one for user watcher registered via $watch().\r\n// we want to guarantee directive updates to be called\r\n// before user watchers so that when user watchers are\r\n// triggered, the DOM would have already been in updated\r\n// state.\r\n\r\nvar queue = [];\r\nvar userQueue = [];\r\nvar has = {};\r\nvar circular = {};\r\nvar waiting = false;\r\n\r\n/**\r\n * Reset the batcher's state.\r\n */\r\n\r\nfunction resetBatcherState() {\r\n  queue.length = 0;\r\n  userQueue.length = 0;\r\n  has = {};\r\n  circular = {};\r\n  waiting = false;\r\n}\r\n\r\n/**\r\n * Flush both queues and run the watchers.\r\n */\r\n\r\nfunction flushBatcherQueue() {\r\n  var _again = true;\r\n\r\n  _function: while (_again) {\r\n    _again = false;\r\n\r\n    runBatcherQueue(queue);\r\n    runBatcherQueue(userQueue);\r\n    // user watchers triggered more watchers,\r\n    // keep flushing until it depletes\r\n    if (queue.length) {\r\n      _again = true;\r\n      continue _function;\r\n    }\r\n    // dev tool hook\r\n    /* istanbul ignore if */\r\n    if (devtools && config.devtools) {\r\n      devtools.emit('flush');\r\n    }\r\n    resetBatcherState();\r\n  }\r\n}\r\n\r\n/**\r\n * Run the watchers in a single queue.\r\n *\r\n * @param {Array} queue\r\n */\r\n\r\nfunction runBatcherQueue(queue) {\r\n  // do not cache length because more watchers might be pushed\r\n  // as we run existing watchers\r\n  for (var i = 0; i < queue.length; i++) {\r\n    var watcher = queue[i];\r\n    var id = watcher.id;\r\n    has[id] = null;\r\n    watcher.run();\r\n    // in dev build, check and stop circular updates.\r\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\r\n      circular[id] = (circular[id] || 0) + 1;\r\n      if (circular[id] > config._maxUpdateCount) {\r\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  queue.length = 0;\r\n}\r\n\r\n/**\r\n * Push a watcher into the watcher queue.\r\n * Jobs with duplicate IDs will be skipped unless it's\r\n * pushed when the queue is being flushed.\r\n *\r\n * @param {Watcher} watcher\r\n *   properties:\r\n *   - {Number} id\r\n *   - {Function} run\r\n */\r\n\r\nfunction pushWatcher(watcher) {\r\n  var id = watcher.id;\r\n  if (has[id] == null) {\r\n    // push watcher into appropriate queue\r\n    var q = watcher.user ? userQueue : queue;\r\n    has[id] = q.length;\r\n    q.push(watcher);\r\n    // queue the flush\r\n    if (!waiting) {\r\n      waiting = true;\r\n      nextTick(flushBatcherQueue);\r\n    }\r\n  }\r\n}\r\n\r\nvar uid$2 = 0;\r\n\r\n/**\r\n * A watcher parses an expression, collects dependencies,\r\n * and fires callback when the expression value changes.\r\n * This is used for both the $watch() api and directives.\r\n *\r\n * @param {Vue} vm\r\n * @param {String|Function} expOrFn\r\n * @param {Function} cb\r\n * @param {Object} options\r\n *                 - {Array} filters\r\n *                 - {Boolean} twoWay\r\n *                 - {Boolean} deep\r\n *                 - {Boolean} user\r\n *                 - {Boolean} sync\r\n *                 - {Boolean} lazy\r\n *                 - {Function} [preProcess]\r\n *                 - {Function} [postProcess]\r\n * @constructor\r\n */\r\nfunction Watcher(vm, expOrFn, cb, options) {\r\n  // mix in options\r\n  if (options) {\r\n    extend(this, options);\r\n  }\r\n  var isFn = typeof expOrFn === 'function';\r\n  this.vm = vm;\r\n  vm._watchers.push(this);\r\n  this.expression = expOrFn;\r\n  this.cb = cb;\r\n  this.id = ++uid$2; // uid for batching\r\n  this.active = true;\r\n  this.dirty = this.lazy; // for lazy watchers\r\n  this.deps = [];\r\n  this.newDeps = [];\r\n  this.depIds = new _Set();\r\n  this.newDepIds = new _Set();\r\n  this.prevError = null; // for async error stacks\r\n  // parse expression for getter/setter\r\n  if (isFn) {\r\n    this.getter = expOrFn;\r\n    this.setter = undefined;\r\n  } else {\r\n    var res = parseExpression$1(expOrFn, this.twoWay);\r\n    this.getter = res.get;\r\n    this.setter = res.set;\r\n  }\r\n  this.value = this.lazy ? undefined : this.get();\r\n  // state for avoiding false triggers for deep and Array\r\n  // watchers during vm._digest()\r\n  this.queued = this.shallow = false;\r\n}\r\n\r\n/**\r\n * Evaluate the getter, and re-collect dependencies.\r\n */\r\n\r\nWatcher.prototype.get = function () {\r\n  this.beforeGet();\r\n  var scope = this.scope || this.vm;\r\n  var value;\r\n  try {\r\n    value = this.getter.call(scope, scope);\r\n  } catch (e) {\r\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\r\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\r\n    }\r\n  }\r\n  // \"touch\" every property so they are all tracked as\r\n  // dependencies for deep watching\r\n  if (this.deep) {\r\n    traverse(value);\r\n  }\r\n  if (this.preProcess) {\r\n    value = this.preProcess(value);\r\n  }\r\n  if (this.filters) {\r\n    value = scope._applyFilters(value, null, this.filters, false);\r\n  }\r\n  if (this.postProcess) {\r\n    value = this.postProcess(value);\r\n  }\r\n  this.afterGet();\r\n  return value;\r\n};\r\n\r\n/**\r\n * Set the corresponding value with the setter.\r\n *\r\n * @param {*} value\r\n */\r\n\r\nWatcher.prototype.set = function (value) {\r\n  var scope = this.scope || this.vm;\r\n  if (this.filters) {\r\n    value = scope._applyFilters(value, this.value, this.filters, true);\r\n  }\r\n  try {\r\n    this.setter.call(scope, scope, value);\r\n  } catch (e) {\r\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\r\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\r\n    }\r\n  }\r\n  // two-way sync for v-for alias\r\n  var forContext = scope.$forContext;\r\n  if (forContext && forContext.alias === this.expression) {\r\n    if (forContext.filters) {\r\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\r\n      return;\r\n    }\r\n    forContext._withLock(function () {\r\n      if (scope.$key) {\r\n        // original is an object\r\n        forContext.rawValue[scope.$key] = value;\r\n      } else {\r\n        forContext.rawValue.$set(scope.$index, value);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Prepare for dependency collection.\r\n */\r\n\r\nWatcher.prototype.beforeGet = function () {\r\n  Dep.target = this;\r\n};\r\n\r\n/**\r\n * Add a dependency to this directive.\r\n *\r\n * @param {Dep} dep\r\n */\r\n\r\nWatcher.prototype.addDep = function (dep) {\r\n  var id = dep.id;\r\n  if (!this.newDepIds.has(id)) {\r\n    this.newDepIds.add(id);\r\n    this.newDeps.push(dep);\r\n    if (!this.depIds.has(id)) {\r\n      dep.addSub(this);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up for dependency collection.\r\n */\r\n\r\nWatcher.prototype.afterGet = function () {\r\n  Dep.target = null;\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    var dep = this.deps[i];\r\n    if (!this.newDepIds.has(dep.id)) {\r\n      dep.removeSub(this);\r\n    }\r\n  }\r\n  var tmp = this.depIds;\r\n  this.depIds = this.newDepIds;\r\n  this.newDepIds = tmp;\r\n  this.newDepIds.clear();\r\n  tmp = this.deps;\r\n  this.deps = this.newDeps;\r\n  this.newDeps = tmp;\r\n  this.newDeps.length = 0;\r\n};\r\n\r\n/**\r\n * Subscriber interface.\r\n * Will be called when a dependency changes.\r\n *\r\n * @param {Boolean} shallow\r\n */\r\n\r\nWatcher.prototype.update = function (shallow) {\r\n  if (this.lazy) {\r\n    this.dirty = true;\r\n  } else if (this.sync || !config.async) {\r\n    this.run();\r\n  } else {\r\n    // if queued, only overwrite shallow with non-shallow,\r\n    // but not the other way around.\r\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\r\n    this.queued = true;\r\n    // record before-push error stack in debug mode\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\r\n      this.prevError = new Error('[vue] async stack trace');\r\n    }\r\n    pushWatcher(this);\r\n  }\r\n};\r\n\r\n/**\r\n * Batcher job interface.\r\n * Will be called by the batcher.\r\n */\r\n\r\nWatcher.prototype.run = function () {\r\n  if (this.active) {\r\n    var value = this.get();\r\n    if (value !== this.value ||\r\n    // Deep watchers and watchers on Object/Arrays should fire even\r\n    // when the value is the same, because the value may\r\n    // have mutated; but only do so if this is a\r\n    // non-shallow update (caused by a vm digest).\r\n    (isObject(value) || this.deep) && !this.shallow) {\r\n      // set new value\r\n      var oldValue = this.value;\r\n      this.value = value;\r\n      // in debug + async mode, when a watcher callbacks\r\n      // throws, we also throw the saved before-push error\r\n      // so the full cross-tick stack trace is available.\r\n      var prevError = this.prevError;\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\r\n        this.prevError = null;\r\n        try {\r\n          this.cb.call(this.vm, value, oldValue);\r\n        } catch (e) {\r\n          nextTick(function () {\r\n            throw prevError;\r\n          }, 0);\r\n          throw e;\r\n        }\r\n      } else {\r\n        this.cb.call(this.vm, value, oldValue);\r\n      }\r\n    }\r\n    this.queued = this.shallow = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Evaluate the value of the watcher.\r\n * This only gets called for lazy watchers.\r\n */\r\n\r\nWatcher.prototype.evaluate = function () {\r\n  // avoid overwriting another watcher that is being\r\n  // collected.\r\n  var current = Dep.target;\r\n  this.value = this.get();\r\n  this.dirty = false;\r\n  Dep.target = current;\r\n};\r\n\r\n/**\r\n * Depend on all deps collected by this watcher.\r\n */\r\n\r\nWatcher.prototype.depend = function () {\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    this.deps[i].depend();\r\n  }\r\n};\r\n\r\n/**\r\n * Remove self from all dependencies' subcriber list.\r\n */\r\n\r\nWatcher.prototype.teardown = function () {\r\n  if (this.active) {\r\n    // remove self from vm's watcher list\r\n    // this is a somewhat expensive operation so we skip it\r\n    // if the vm is being destroyed or is performing a v-for\r\n    // re-render (the watcher list is then filtered by v-for).\r\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\r\n      this.vm._watchers.$remove(this);\r\n    }\r\n    var i = this.deps.length;\r\n    while (i--) {\r\n      this.deps[i].removeSub(this);\r\n    }\r\n    this.active = false;\r\n    this.vm = this.cb = this.value = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Recrusively traverse an object to evoke all converted\r\n * getters, so that every nested property inside the object\r\n * is collected as a \"deep\" dependency.\r\n *\r\n * @param {*} val\r\n */\r\n\r\nvar seenObjects = new _Set();\r\nfunction traverse(val, seen) {\r\n  var i = undefined,\r\n      keys = undefined;\r\n  if (!seen) {\r\n    seen = seenObjects;\r\n    seen.clear();\r\n  }\r\n  var isA = isArray(val);\r\n  var isO = isObject(val);\r\n  if ((isA || isO) && Object.isExtensible(val)) {\r\n    if (val.__ob__) {\r\n      var depId = val.__ob__.dep.id;\r\n      if (seen.has(depId)) {\r\n        return;\r\n      } else {\r\n        seen.add(depId);\r\n      }\r\n    }\r\n    if (isA) {\r\n      i = val.length;\r\n      while (i--) traverse(val[i], seen);\r\n    } else if (isO) {\r\n      keys = Object.keys(val);\r\n      i = keys.length;\r\n      while (i--) traverse(val[keys[i]], seen);\r\n    }\r\n  }\r\n}\r\n\r\nvar text$1 = {\r\n\r\n  bind: function bind() {\r\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\r\n  },\r\n\r\n  update: function update(value) {\r\n    this.el[this.attr] = _toString(value);\r\n  }\r\n};\r\n\r\nvar templateCache = new Cache(1000);\r\nvar idSelectorCache = new Cache(1000);\r\n\r\nvar map = {\r\n  efault: [0, '', ''],\r\n  legend: [1, '<fieldset>', '</fieldset>'],\r\n  tr: [2, '<table><tbody>', '</tbody></table>'],\r\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\r\n};\r\n\r\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\r\n\r\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\r\n\r\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\r\n\r\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\r\n\r\n/**\r\n * Check if a node is a supported template node with a\r\n * DocumentFragment content.\r\n *\r\n * @param {Node} node\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isRealTemplate(node) {\r\n  return isTemplate(node) && isFragment(node.content);\r\n}\r\n\r\nvar tagRE$1 = /<([\\w:-]+)/;\r\nvar entityRE = /&#?\\w+?;/;\r\nvar commentRE = /<!--/;\r\n\r\n/**\r\n * Convert a string template to a DocumentFragment.\r\n * Determines correct wrapping by tag types. Wrapping\r\n * strategy found in jQuery & component/domify.\r\n *\r\n * @param {String} templateString\r\n * @param {Boolean} raw\r\n * @return {DocumentFragment}\r\n */\r\n\r\nfunction stringToFragment(templateString, raw) {\r\n  // try a cache hit first\r\n  var cacheKey = raw ? templateString : templateString.trim();\r\n  var hit = templateCache.get(cacheKey);\r\n  if (hit) {\r\n    return hit;\r\n  }\r\n\r\n  var frag = document.createDocumentFragment();\r\n  var tagMatch = templateString.match(tagRE$1);\r\n  var entityMatch = entityRE.test(templateString);\r\n  var commentMatch = commentRE.test(templateString);\r\n\r\n  if (!tagMatch && !entityMatch && !commentMatch) {\r\n    // text only, return a single text node.\r\n    frag.appendChild(document.createTextNode(templateString));\r\n  } else {\r\n    var tag = tagMatch && tagMatch[1];\r\n    var wrap = map[tag] || map.efault;\r\n    var depth = wrap[0];\r\n    var prefix = wrap[1];\r\n    var suffix = wrap[2];\r\n    var node = document.createElement('div');\r\n\r\n    node.innerHTML = prefix + templateString + suffix;\r\n    while (depth--) {\r\n      node = node.lastChild;\r\n    }\r\n\r\n    var child;\r\n    /* eslint-disable no-cond-assign */\r\n    while (child = node.firstChild) {\r\n      /* eslint-enable no-cond-assign */\r\n      frag.appendChild(child);\r\n    }\r\n  }\r\n  if (!raw) {\r\n    trimNode(frag);\r\n  }\r\n  templateCache.put(cacheKey, frag);\r\n  return frag;\r\n}\r\n\r\n/**\r\n * Convert a template node to a DocumentFragment.\r\n *\r\n * @param {Node} node\r\n * @return {DocumentFragment}\r\n */\r\n\r\nfunction nodeToFragment(node) {\r\n  // if its a template tag and the browser supports it,\r\n  // its content is already a document fragment. However, iOS Safari has\r\n  // bug when using directly cloned template content with touch\r\n  // events and can cause crashes when the nodes are removed from DOM, so we\r\n  // have to treat template elements as string templates. (#2805)\r\n  /* istanbul ignore if */\r\n  if (isRealTemplate(node)) {\r\n    return stringToFragment(node.innerHTML);\r\n  }\r\n  // script template\r\n  if (node.tagName === 'SCRIPT') {\r\n    return stringToFragment(node.textContent);\r\n  }\r\n  // normal node, clone it to avoid mutating the original\r\n  var clonedNode = cloneNode(node);\r\n  var frag = document.createDocumentFragment();\r\n  var child;\r\n  /* eslint-disable no-cond-assign */\r\n  while (child = clonedNode.firstChild) {\r\n    /* eslint-enable no-cond-assign */\r\n    frag.appendChild(child);\r\n  }\r\n  trimNode(frag);\r\n  return frag;\r\n}\r\n\r\n// Test for the presence of the Safari template cloning bug\r\n// https://bugs.webkit.org/showug.cgi?id=137755\r\nvar hasBrokenTemplate = (function () {\r\n  /* istanbul ignore else */\r\n  if (inBrowser) {\r\n    var a = document.createElement('div');\r\n    a.innerHTML = '<template>1</template>';\r\n    return !a.cloneNode(true).firstChild.innerHTML;\r\n  } else {\r\n    return false;\r\n  }\r\n})();\r\n\r\n// Test for IE10/11 textarea placeholder clone bug\r\nvar hasTextareaCloneBug = (function () {\r\n  /* istanbul ignore else */\r\n  if (inBrowser) {\r\n    var t = document.createElement('textarea');\r\n    t.placeholder = 't';\r\n    return t.cloneNode(true).value === 't';\r\n  } else {\r\n    return false;\r\n  }\r\n})();\r\n\r\n/**\r\n * 1. Deal with Safari cloning nested <template> bug by\r\n *    manually cloning all template instances.\r\n * 2. Deal with IE10/11 textarea placeholder bug by setting\r\n *    the correct value after cloning.\r\n *\r\n * @param {Element|DocumentFragment} node\r\n * @return {Element|DocumentFragment}\r\n */\r\n\r\nfunction cloneNode(node) {\r\n  /* istanbul ignore if */\r\n  if (!node.querySelectorAll) {\r\n    return node.cloneNode();\r\n  }\r\n  var res = node.cloneNode(true);\r\n  var i, original, cloned;\r\n  /* istanbul ignore if */\r\n  if (hasBrokenTemplate) {\r\n    var tempClone = res;\r\n    if (isRealTemplate(node)) {\r\n      node = node.content;\r\n      tempClone = res.content;\r\n    }\r\n    original = node.querySelectorAll('template');\r\n    if (original.length) {\r\n      cloned = tempClone.querySelectorAll('template');\r\n      i = cloned.length;\r\n      while (i--) {\r\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\r\n      }\r\n    }\r\n  }\r\n  /* istanbul ignore if */\r\n  if (hasTextareaCloneBug) {\r\n    if (node.tagName === 'TEXTAREA') {\r\n      res.value = node.value;\r\n    } else {\r\n      original = node.querySelectorAll('textarea');\r\n      if (original.length) {\r\n        cloned = res.querySelectorAll('textarea');\r\n        i = cloned.length;\r\n        while (i--) {\r\n          cloned[i].value = original[i].value;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Process the template option and normalizes it into a\r\n * a DocumentFragment that can be used as a partial or a\r\n * instance template.\r\n *\r\n * @param {*} template\r\n *        Possible values include:\r\n *        - DocumentFragment object\r\n *        - Node object of type Template\r\n *        - id selector: '#some-template-id'\r\n *        - template string: '<div><span>{{msg}}</span></div>'\r\n * @param {Boolean} shouldClone\r\n * @param {Boolean} raw\r\n *        inline HTML interpolation. Do not check for id\r\n *        selector and keep whitespace in the string.\r\n * @return {DocumentFragment|undefined}\r\n */\r\n\r\nfunction parseTemplate(template, shouldClone, raw) {\r\n  var node, frag;\r\n\r\n  // if the template is already a document fragment,\r\n  // do nothing\r\n  if (isFragment(template)) {\r\n    trimNode(template);\r\n    return shouldClone ? cloneNode(template) : template;\r\n  }\r\n\r\n  if (typeof template === 'string') {\r\n    // id selector\r\n    if (!raw && template.charAt(0) === '#') {\r\n      // id selector can be cached too\r\n      frag = idSelectorCache.get(template);\r\n      if (!frag) {\r\n        node = document.getElementById(template.slice(1));\r\n        if (node) {\r\n          frag = nodeToFragment(node);\r\n          // save selector to cache\r\n          idSelectorCache.put(template, frag);\r\n        }\r\n      }\r\n    } else {\r\n      // normal string template\r\n      frag = stringToFragment(template, raw);\r\n    }\r\n  } else if (template.nodeType) {\r\n    // a direct node\r\n    frag = nodeToFragment(template);\r\n  }\r\n\r\n  return frag && shouldClone ? cloneNode(frag) : frag;\r\n}\r\n\r\nvar template = Object.freeze({\r\n  cloneNode: cloneNode,\r\n  parseTemplate: parseTemplate\r\n});\r\n\r\nvar html = {\r\n\r\n  bind: function bind() {\r\n    // a comment node means this is a binding for\r\n    // {{{ inline unescaped html }}}\r\n    if (this.el.nodeType === 8) {\r\n      // hold nodes\r\n      this.nodes = [];\r\n      // replace the placeholder with proper anchor\r\n      this.anchor = createAnchor('v-html');\r\n      replace(this.el, this.anchor);\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    value = _toString(value);\r\n    if (this.nodes) {\r\n      this.swap(value);\r\n    } else {\r\n      this.el.innerHTML = value;\r\n    }\r\n  },\r\n\r\n  swap: function swap(value) {\r\n    // remove old nodes\r\n    var i = this.nodes.length;\r\n    while (i--) {\r\n      remove(this.nodes[i]);\r\n    }\r\n    // convert new value to a fragment\r\n    // do not attempt to retrieve from id selector\r\n    var frag = parseTemplate(value, true, true);\r\n    // save a reference to these nodes so we can remove later\r\n    this.nodes = toArray(frag.childNodes);\r\n    before(frag, this.anchor);\r\n  }\r\n};\r\n\r\n/**\r\n * Abstraction for a partially-compiled fragment.\r\n * Can optionally compile content with a child scope.\r\n *\r\n * @param {Function} linker\r\n * @param {Vue} vm\r\n * @param {DocumentFragment} frag\r\n * @param {Vue} [host]\r\n * @param {Object} [scope]\r\n * @param {Fragment} [parentFrag]\r\n */\r\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\r\n  this.children = [];\r\n  this.childFrags = [];\r\n  this.vm = vm;\r\n  this.scope = scope;\r\n  this.inserted = false;\r\n  this.parentFrag = parentFrag;\r\n  if (parentFrag) {\r\n    parentFrag.childFrags.push(this);\r\n  }\r\n  this.unlink = linker(vm, frag, host, scope, this);\r\n  var single = this.single = frag.childNodes.length === 1 &&\r\n  // do not go single mode if the only node is an anchor\r\n  !frag.childNodes[0].__v_anchor;\r\n  if (single) {\r\n    this.node = frag.childNodes[0];\r\n    this.before = singleBefore;\r\n    this.remove = singleRemove;\r\n  } else {\r\n    this.node = createAnchor('fragment-start');\r\n    this.end = createAnchor('fragment-end');\r\n    this.frag = frag;\r\n    prepend(this.node, frag);\r\n    frag.appendChild(this.end);\r\n    this.before = multiBefore;\r\n    this.remove = multiRemove;\r\n  }\r\n  this.node.__v_frag = this;\r\n}\r\n\r\n/**\r\n * Call attach/detach for all components contained within\r\n * this fragment. Also do so recursively for all child\r\n * fragments.\r\n *\r\n * @param {Function} hook\r\n */\r\n\r\nFragment.prototype.callHook = function (hook) {\r\n  var i, l;\r\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\r\n    this.childFrags[i].callHook(hook);\r\n  }\r\n  for (i = 0, l = this.children.length; i < l; i++) {\r\n    hook(this.children[i]);\r\n  }\r\n};\r\n\r\n/**\r\n * Insert fragment before target, single node version\r\n *\r\n * @param {Node} target\r\n * @param {Boolean} withTransition\r\n */\r\n\r\nfunction singleBefore(target, withTransition) {\r\n  this.inserted = true;\r\n  var method = withTransition !== false ? beforeWithTransition : before;\r\n  method(this.node, target, this.vm);\r\n  if (inDoc(this.node)) {\r\n    this.callHook(attach);\r\n  }\r\n}\r\n\r\n/**\r\n * Remove fragment, single node version\r\n */\r\n\r\nfunction singleRemove() {\r\n  this.inserted = false;\r\n  var shouldCallRemove = inDoc(this.node);\r\n  var self = this;\r\n  this.beforeRemove();\r\n  removeWithTransition(this.node, this.vm, function () {\r\n    if (shouldCallRemove) {\r\n      self.callHook(detach);\r\n    }\r\n    self.destroy();\r\n  });\r\n}\r\n\r\n/**\r\n * Insert fragment before target, multi-nodes version\r\n *\r\n * @param {Node} target\r\n * @param {Boolean} withTransition\r\n */\r\n\r\nfunction multiBefore(target, withTransition) {\r\n  this.inserted = true;\r\n  var vm = this.vm;\r\n  var method = withTransition !== false ? beforeWithTransition : before;\r\n  mapNodeRange(this.node, this.end, function (node) {\r\n    method(node, target, vm);\r\n  });\r\n  if (inDoc(this.node)) {\r\n    this.callHook(attach);\r\n  }\r\n}\r\n\r\n/**\r\n * Remove fragment, multi-nodes version\r\n */\r\n\r\nfunction multiRemove() {\r\n  this.inserted = false;\r\n  var self = this;\r\n  var shouldCallRemove = inDoc(this.node);\r\n  this.beforeRemove();\r\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\r\n    if (shouldCallRemove) {\r\n      self.callHook(detach);\r\n    }\r\n    self.destroy();\r\n  });\r\n}\r\n\r\n/**\r\n * Prepare the fragment for removal.\r\n */\r\n\r\nFragment.prototype.beforeRemove = function () {\r\n  var i, l;\r\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\r\n    // call the same method recursively on child\r\n    // fragments, depth-first\r\n    this.childFrags[i].beforeRemove(false);\r\n  }\r\n  for (i = 0, l = this.children.length; i < l; i++) {\r\n    // Call destroy for all contained instances,\r\n    // with remove:false and defer:true.\r\n    // Defer is necessary because we need to\r\n    // keep the children to call detach hooks\r\n    // on them.\r\n    this.children[i].$destroy(false, true);\r\n  }\r\n  var dirs = this.unlink.dirs;\r\n  for (i = 0, l = dirs.length; i < l; i++) {\r\n    // disable the watchers on all the directives\r\n    // so that the rendered content stays the same\r\n    // during removal.\r\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\r\n  }\r\n};\r\n\r\n/**\r\n * Destroy the fragment.\r\n */\r\n\r\nFragment.prototype.destroy = function () {\r\n  if (this.parentFrag) {\r\n    this.parentFrag.childFrags.$remove(this);\r\n  }\r\n  this.node.__v_frag = null;\r\n  this.unlink();\r\n};\r\n\r\n/**\r\n * Call attach hook for a Vue instance.\r\n *\r\n * @param {Vue} child\r\n */\r\n\r\nfunction attach(child) {\r\n  if (!child._isAttached && inDoc(child.$el)) {\r\n    child._callHook('attached');\r\n  }\r\n}\r\n\r\n/**\r\n * Call detach hook for a Vue instance.\r\n *\r\n * @param {Vue} child\r\n */\r\n\r\nfunction detach(child) {\r\n  if (child._isAttached && !inDoc(child.$el)) {\r\n    child._callHook('detached');\r\n  }\r\n}\r\n\r\nvar linkerCache = new Cache(5000);\r\n\r\n/**\r\n * A factory that can be used to create instances of a\r\n * fragment. Caches the compiled linker if possible.\r\n *\r\n * @param {Vue} vm\r\n * @param {Element|String} el\r\n */\r\nfunction FragmentFactory(vm, el) {\r\n  this.vm = vm;\r\n  var template;\r\n  var isString = typeof el === 'string';\r\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\r\n    template = parseTemplate(el, true);\r\n  } else {\r\n    template = document.createDocumentFragment();\r\n    template.appendChild(el);\r\n  }\r\n  this.template = template;\r\n  // linker can be cached, but only for components\r\n  var linker;\r\n  var cid = vm.constructor.cid;\r\n  if (cid > 0) {\r\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\r\n    linker = linkerCache.get(cacheId);\r\n    if (!linker) {\r\n      linker = compile(template, vm.$options, true);\r\n      linkerCache.put(cacheId, linker);\r\n    }\r\n  } else {\r\n    linker = compile(template, vm.$options, true);\r\n  }\r\n  this.linker = linker;\r\n}\r\n\r\n/**\r\n * Create a fragment instance with given host and scope.\r\n *\r\n * @param {Vue} host\r\n * @param {Object} scope\r\n * @param {Fragment} parentFrag\r\n */\r\n\r\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\r\n  var frag = cloneNode(this.template);\r\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\r\n};\r\n\r\nvar ON = 700;\r\nvar MODEL = 800;\r\nvar BIND = 850;\r\nvar TRANSITION = 1100;\r\nvar EL = 1500;\r\nvar COMPONENT = 1500;\r\nvar PARTIAL = 1750;\r\nvar IF = 2100;\r\nvar FOR = 2200;\r\nvar SLOT = 2300;\r\n\r\nvar uid$3 = 0;\r\n\r\nvar vFor = {\r\n\r\n  priority: FOR,\r\n  terminal: true,\r\n\r\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\r\n\r\n  bind: function bind() {\r\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\r\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\r\n    }\r\n\r\n    // support \"item in/of items\" syntax\r\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\r\n    if (inMatch) {\r\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\r\n      if (itMatch) {\r\n        this.iterator = itMatch[1].trim();\r\n        this.alias = itMatch[2].trim();\r\n      } else {\r\n        this.alias = inMatch[1].trim();\r\n      }\r\n      this.expression = inMatch[2];\r\n    }\r\n\r\n    if (!this.alias) {\r\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\r\n      return;\r\n    }\r\n\r\n    // uid as a cache identifier\r\n    this.id = '__v-for__' + ++uid$3;\r\n\r\n    // check if this is an option list,\r\n    // so that we know if we need to update the <select>'s\r\n    // v-model when the option list has changed.\r\n    // because v-model has a lower priority than v-for,\r\n    // the v-model is not bound here yet, so we have to\r\n    // retrive it in the actual updateModel() function.\r\n    var tag = this.el.tagName;\r\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\r\n\r\n    // setup anchor nodes\r\n    this.start = createAnchor('v-for-start');\r\n    this.end = createAnchor('v-for-end');\r\n    replace(this.el, this.end);\r\n    before(this.start, this.end);\r\n\r\n    // cache\r\n    this.cache = Object.create(null);\r\n\r\n    // fragment factory\r\n    this.factory = new FragmentFactory(this.vm, this.el);\r\n  },\r\n\r\n  update: function update(data) {\r\n    this.diff(data);\r\n    this.updateRef();\r\n    this.updateModel();\r\n  },\r\n\r\n  /**\r\n   * Diff, based on new data and old data, determine the\r\n   * minimum amount of DOM manipulations needed to make the\r\n   * DOM reflect the new data Array.\r\n   *\r\n   * The algorithm diffs the new data Array by storing a\r\n   * hidden reference to an owner vm instance on previously\r\n   * seen data. This allows us to achieve O(n) which is\r\n   * better than a levenshtein distance based algorithm,\r\n   * which is O(m * n).\r\n   *\r\n   * @param {Array} data\r\n   */\r\n\r\n  diff: function diff(data) {\r\n    // check if the Array was converted from an Object\r\n    var item = data[0];\r\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\r\n\r\n    var trackByKey = this.params.trackBy;\r\n    var oldFrags = this.frags;\r\n    var frags = this.frags = new Array(data.length);\r\n    var alias = this.alias;\r\n    var iterator = this.iterator;\r\n    var start = this.start;\r\n    var end = this.end;\r\n    var inDocument = inDoc(start);\r\n    var init = !oldFrags;\r\n    var i, l, frag, key, value, primitive;\r\n\r\n    // First pass, go through the new Array and fill up\r\n    // the new frags array. If a piece of data has a cached\r\n    // instance for it, we reuse it. Otherwise build a new\r\n    // instance.\r\n    for (i = 0, l = data.length; i < l; i++) {\r\n      item = data[i];\r\n      key = convertedFromObject ? item.$key : null;\r\n      value = convertedFromObject ? item.$value : item;\r\n      primitive = !isObject(value);\r\n      frag = !init && this.getCachedFrag(value, i, key);\r\n      if (frag) {\r\n        // reusable fragment\r\n        frag.reused = true;\r\n        // update $index\r\n        frag.scope.$index = i;\r\n        // update $key\r\n        if (key) {\r\n          frag.scope.$key = key;\r\n        }\r\n        // update iterator\r\n        if (iterator) {\r\n          frag.scope[iterator] = key !== null ? key : i;\r\n        }\r\n        // update data for track-by, object repeat &\r\n        // primitive values.\r\n        if (trackByKey || convertedFromObject || primitive) {\r\n          withoutConversion(function () {\r\n            frag.scope[alias] = value;\r\n          });\r\n        }\r\n      } else {\r\n        // new instance\r\n        frag = this.create(value, alias, i, key);\r\n        frag.fresh = !init;\r\n      }\r\n      frags[i] = frag;\r\n      if (init) {\r\n        frag.before(end);\r\n      }\r\n    }\r\n\r\n    // we're done for the initial render.\r\n    if (init) {\r\n      return;\r\n    }\r\n\r\n    // Second pass, go through the old fragments and\r\n    // destroy those who are not reused (and remove them\r\n    // from cache)\r\n    var removalIndex = 0;\r\n    var totalRemoved = oldFrags.length - frags.length;\r\n    // when removing a large number of fragments, watcher removal\r\n    // turns out to be a perf bottleneck, so we batch the watcher\r\n    // removals into a single filter call!\r\n    this.vm._vForRemoving = true;\r\n    for (i = 0, l = oldFrags.length; i < l; i++) {\r\n      frag = oldFrags[i];\r\n      if (!frag.reused) {\r\n        this.deleteCachedFrag(frag);\r\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\r\n      }\r\n    }\r\n    this.vm._vForRemoving = false;\r\n    if (removalIndex) {\r\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\r\n        return w.active;\r\n      });\r\n    }\r\n\r\n    // Final pass, move/insert new fragments into the\r\n    // right place.\r\n    var targetPrev, prevEl, currentPrev;\r\n    var insertionIndex = 0;\r\n    for (i = 0, l = frags.length; i < l; i++) {\r\n      frag = frags[i];\r\n      // this is the frag that we should be after\r\n      targetPrev = frags[i - 1];\r\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\r\n      if (frag.reused && !frag.staggerCb) {\r\n        currentPrev = findPrevFrag(frag, start, this.id);\r\n        if (currentPrev !== targetPrev && (!currentPrev ||\r\n        // optimization for moving a single item.\r\n        // thanks to suggestions by @livoras in #1807\r\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\r\n          this.move(frag, prevEl);\r\n        }\r\n      } else {\r\n        // new instance, or still in stagger.\r\n        // insert with updated stagger index.\r\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\r\n      }\r\n      frag.reused = frag.fresh = false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new fragment instance.\r\n   *\r\n   * @param {*} value\r\n   * @param {String} alias\r\n   * @param {Number} index\r\n   * @param {String} [key]\r\n   * @return {Fragment}\r\n   */\r\n\r\n  create: function create(value, alias, index, key) {\r\n    var host = this._host;\r\n    // create iteration scope\r\n    var parentScope = this._scope || this.vm;\r\n    var scope = Object.create(parentScope);\r\n    // ref holder for the scope\r\n    scope.$refs = Object.create(parentScope.$refs);\r\n    scope.$els = Object.create(parentScope.$els);\r\n    // make sure point $parent to parent scope\r\n    scope.$parent = parentScope;\r\n    // for two-way binding on alias\r\n    scope.$forContext = this;\r\n    // define scope properties\r\n    // important: define the scope alias without forced conversion\r\n    // so that frozen data structures remain non-reactive.\r\n    withoutConversion(function () {\r\n      defineReactive(scope, alias, value);\r\n    });\r\n    defineReactive(scope, '$index', index);\r\n    if (key) {\r\n      defineReactive(scope, '$key', key);\r\n    } else if (scope.$key) {\r\n      // avoid accidental fallback\r\n      def(scope, '$key', null);\r\n    }\r\n    if (this.iterator) {\r\n      defineReactive(scope, this.iterator, key !== null ? key : index);\r\n    }\r\n    var frag = this.factory.create(host, scope, this._frag);\r\n    frag.forId = this.id;\r\n    this.cacheFrag(value, frag, index, key);\r\n    return frag;\r\n  },\r\n\r\n  /**\r\n   * Update the v-ref on owner vm.\r\n   */\r\n\r\n  updateRef: function updateRef() {\r\n    var ref = this.descriptor.ref;\r\n    if (!ref) return;\r\n    var hash = (this._scope || this.vm).$refs;\r\n    var refs;\r\n    if (!this.fromObject) {\r\n      refs = this.frags.map(findVmFromFrag);\r\n    } else {\r\n      refs = {};\r\n      this.frags.forEach(function (frag) {\r\n        refs[frag.scope.$key] = findVmFromFrag(frag);\r\n      });\r\n    }\r\n    hash[ref] = refs;\r\n  },\r\n\r\n  /**\r\n   * For option lists, update the containing v-model on\r\n   * parent <select>.\r\n   */\r\n\r\n  updateModel: function updateModel() {\r\n    if (this.isOption) {\r\n      var parent = this.start.parentNode;\r\n      var model = parent && parent.__v_model;\r\n      if (model) {\r\n        model.forceUpdate();\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Insert a fragment. Handles staggering.\r\n   *\r\n   * @param {Fragment} frag\r\n   * @param {Number} index\r\n   * @param {Node} prevEl\r\n   * @param {Boolean} inDocument\r\n   */\r\n\r\n  insert: function insert(frag, index, prevEl, inDocument) {\r\n    if (frag.staggerCb) {\r\n      frag.staggerCb.cancel();\r\n      frag.staggerCb = null;\r\n    }\r\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\r\n    if (inDocument && staggerAmount) {\r\n      // create an anchor and insert it synchronously,\r\n      // so that we can resolve the correct order without\r\n      // worrying about some elements not inserted yet\r\n      var anchor = frag.staggerAnchor;\r\n      if (!anchor) {\r\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\r\n        anchor.__v_frag = frag;\r\n      }\r\n      after(anchor, prevEl);\r\n      var op = frag.staggerCb = cancellable(function () {\r\n        frag.staggerCb = null;\r\n        frag.before(anchor);\r\n        remove(anchor);\r\n      });\r\n      setTimeout(op, staggerAmount);\r\n    } else {\r\n      var target = prevEl.nextSibling;\r\n      /* istanbul ignore if */\r\n      if (!target) {\r\n        // reset end anchor position in case the position was messed up\r\n        // by an external drag-n-drop library.\r\n        after(this.end, prevEl);\r\n        target = this.end;\r\n      }\r\n      frag.before(target);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove a fragment. Handles staggering.\r\n   *\r\n   * @param {Fragment} frag\r\n   * @param {Number} index\r\n   * @param {Number} total\r\n   * @param {Boolean} inDocument\r\n   */\r\n\r\n  remove: function remove(frag, index, total, inDocument) {\r\n    if (frag.staggerCb) {\r\n      frag.staggerCb.cancel();\r\n      frag.staggerCb = null;\r\n      // it's not possible for the same frag to be removed\r\n      // twice, so if we have a pending stagger callback,\r\n      // it means this frag is queued for enter but removed\r\n      // before its transition started. Since it is already\r\n      // destroyed, we can just leave it in detached state.\r\n      return;\r\n    }\r\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\r\n    if (inDocument && staggerAmount) {\r\n      var op = frag.staggerCb = cancellable(function () {\r\n        frag.staggerCb = null;\r\n        frag.remove();\r\n      });\r\n      setTimeout(op, staggerAmount);\r\n    } else {\r\n      frag.remove();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Move a fragment to a new position.\r\n   * Force no transition.\r\n   *\r\n   * @param {Fragment} frag\r\n   * @param {Node} prevEl\r\n   */\r\n\r\n  move: function move(frag, prevEl) {\r\n    // fix a common issue with Sortable:\r\n    // if prevEl doesn't have nextSibling, this means it's\r\n    // been dragged after the end anchor. Just re-position\r\n    // the end anchor to the end of the container.\r\n    /* istanbul ignore if */\r\n    if (!prevEl.nextSibling) {\r\n      this.end.parentNode.appendChild(this.end);\r\n    }\r\n    frag.before(prevEl.nextSibling, false);\r\n  },\r\n\r\n  /**\r\n   * Cache a fragment using track-by or the object key.\r\n   *\r\n   * @param {*} value\r\n   * @param {Fragment} frag\r\n   * @param {Number} index\r\n   * @param {String} [key]\r\n   */\r\n\r\n  cacheFrag: function cacheFrag(value, frag, index, key) {\r\n    var trackByKey = this.params.trackBy;\r\n    var cache = this.cache;\r\n    var primitive = !isObject(value);\r\n    var id;\r\n    if (key || trackByKey || primitive) {\r\n      id = getTrackByKey(index, key, value, trackByKey);\r\n      if (!cache[id]) {\r\n        cache[id] = frag;\r\n      } else if (trackByKey !== '$index') {\r\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\r\n      }\r\n    } else {\r\n      id = this.id;\r\n      if (hasOwn(value, id)) {\r\n        if (value[id] === null) {\r\n          value[id] = frag;\r\n        } else {\r\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\r\n        }\r\n      } else if (Object.isExtensible(value)) {\r\n        def(value, id, frag);\r\n      } else if (process.env.NODE_ENV !== 'production') {\r\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\r\n      }\r\n    }\r\n    frag.raw = value;\r\n  },\r\n\r\n  /**\r\n   * Get a cached fragment from the value/index/key\r\n   *\r\n   * @param {*} value\r\n   * @param {Number} index\r\n   * @param {String} key\r\n   * @return {Fragment}\r\n   */\r\n\r\n  getCachedFrag: function getCachedFrag(value, index, key) {\r\n    var trackByKey = this.params.trackBy;\r\n    var primitive = !isObject(value);\r\n    var frag;\r\n    if (key || trackByKey || primitive) {\r\n      var id = getTrackByKey(index, key, value, trackByKey);\r\n      frag = this.cache[id];\r\n    } else {\r\n      frag = value[this.id];\r\n    }\r\n    if (frag && (frag.reused || frag.fresh)) {\r\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\r\n    }\r\n    return frag;\r\n  },\r\n\r\n  /**\r\n   * Delete a fragment from cache.\r\n   *\r\n   * @param {Fragment} frag\r\n   */\r\n\r\n  deleteCachedFrag: function deleteCachedFrag(frag) {\r\n    var value = frag.raw;\r\n    var trackByKey = this.params.trackBy;\r\n    var scope = frag.scope;\r\n    var index = scope.$index;\r\n    // fix #948: avoid accidentally fall through to\r\n    // a parent repeater which happens to have $key.\r\n    var key = hasOwn(scope, '$key') && scope.$key;\r\n    var primitive = !isObject(value);\r\n    if (trackByKey || key || primitive) {\r\n      var id = getTrackByKey(index, key, value, trackByKey);\r\n      this.cache[id] = null;\r\n    } else {\r\n      value[this.id] = null;\r\n      frag.raw = null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get the stagger amount for an insertion/removal.\r\n   *\r\n   * @param {Fragment} frag\r\n   * @param {Number} index\r\n   * @param {Number} total\r\n   * @param {String} type\r\n   */\r\n\r\n  getStagger: function getStagger(frag, index, total, type) {\r\n    type = type + 'Stagger';\r\n    var trans = frag.node.__v_trans;\r\n    var hooks = trans && trans.hooks;\r\n    var hook = hooks && (hooks[type] || hooks.stagger);\r\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\r\n  },\r\n\r\n  /**\r\n   * Pre-process the value before piping it through the\r\n   * filters. This is passed to and called by the watcher.\r\n   */\r\n\r\n  _preProcess: function _preProcess(value) {\r\n    // regardless of type, store the un-filtered raw value.\r\n    this.rawValue = value;\r\n    return value;\r\n  },\r\n\r\n  /**\r\n   * Post-process the value after it has been piped through\r\n   * the filters. This is passed to and called by the watcher.\r\n   *\r\n   * It is necessary for this to be called during the\r\n   * watcher's dependency collection phase because we want\r\n   * the v-for to update when the source Object is mutated.\r\n   */\r\n\r\n  _postProcess: function _postProcess(value) {\r\n    if (isArray(value)) {\r\n      return value;\r\n    } else if (isPlainObject(value)) {\r\n      // convert plain object to array.\r\n      var keys = Object.keys(value);\r\n      var i = keys.length;\r\n      var res = new Array(i);\r\n      var key;\r\n      while (i--) {\r\n        key = keys[i];\r\n        res[i] = {\r\n          $key: key,\r\n          $value: value[key]\r\n        };\r\n      }\r\n      return res;\r\n    } else {\r\n      if (typeof value === 'number' && !isNaN(value)) {\r\n        value = range(value);\r\n      }\r\n      return value || [];\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    if (this.descriptor.ref) {\r\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\r\n    }\r\n    if (this.frags) {\r\n      var i = this.frags.length;\r\n      var frag;\r\n      while (i--) {\r\n        frag = this.frags[i];\r\n        this.deleteCachedFrag(frag);\r\n        frag.destroy();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to find the previous element that is a fragment\r\n * anchor. This is necessary because a destroyed frag's\r\n * element could still be lingering in the DOM before its\r\n * leaving transition finishes, but its inserted flag\r\n * should have been set to false so we can skip them.\r\n *\r\n * If this is a block repeat, we want to make sure we only\r\n * return frag that is bound to this v-for. (see #929)\r\n *\r\n * @param {Fragment} frag\r\n * @param {Comment|Text} anchor\r\n * @param {String} id\r\n * @return {Fragment}\r\n */\r\n\r\nfunction findPrevFrag(frag, anchor, id) {\r\n  var el = frag.node.previousSibling;\r\n  /* istanbul ignore if */\r\n  if (!el) return;\r\n  frag = el.__v_frag;\r\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\r\n    el = el.previousSibling;\r\n    /* istanbul ignore if */\r\n    if (!el) return;\r\n    frag = el.__v_frag;\r\n  }\r\n  return frag;\r\n}\r\n\r\n/**\r\n * Create a range array from given number.\r\n *\r\n * @param {Number} n\r\n * @return {Array}\r\n */\r\n\r\nfunction range(n) {\r\n  var i = -1;\r\n  var ret = new Array(Math.floor(n));\r\n  while (++i < n) {\r\n    ret[i] = i;\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Get the track by key for an item.\r\n *\r\n * @param {Number} index\r\n * @param {String} key\r\n * @param {*} value\r\n * @param {String} [trackByKey]\r\n */\r\n\r\nfunction getTrackByKey(index, key, value, trackByKey) {\r\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\r\n}\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  vFor.warnDuplicate = function (value) {\r\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\r\n  };\r\n}\r\n\r\n/**\r\n * Find a vm from a fragment.\r\n *\r\n * @param {Fragment} frag\r\n * @return {Vue|undefined}\r\n */\r\n\r\nfunction findVmFromFrag(frag) {\r\n  var node = frag.node;\r\n  // handle multi-node frag\r\n  if (frag.end) {\r\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\r\n      node = node.nextSibling;\r\n    }\r\n  }\r\n  return node.__vue__;\r\n}\r\n\r\nvar vIf = {\r\n\r\n  priority: IF,\r\n  terminal: true,\r\n\r\n  bind: function bind() {\r\n    var el = this.el;\r\n    if (!el.__vue__) {\r\n      // check else block\r\n      var next = el.nextElementSibling;\r\n      if (next && getAttr(next, 'v-else') !== null) {\r\n        remove(next);\r\n        this.elseEl = next;\r\n      }\r\n      // check main block\r\n      this.anchor = createAnchor('v-if');\r\n      replace(el, this.anchor);\r\n    } else {\r\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\r\n      this.invalid = true;\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    if (this.invalid) return;\r\n    if (value) {\r\n      if (!this.frag) {\r\n        this.insert();\r\n      }\r\n    } else {\r\n      this.remove();\r\n    }\r\n  },\r\n\r\n  insert: function insert() {\r\n    if (this.elseFrag) {\r\n      this.elseFrag.remove();\r\n      this.elseFrag = null;\r\n    }\r\n    // lazy init factory\r\n    if (!this.factory) {\r\n      this.factory = new FragmentFactory(this.vm, this.el);\r\n    }\r\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\r\n    this.frag.before(this.anchor);\r\n  },\r\n\r\n  remove: function remove() {\r\n    if (this.frag) {\r\n      this.frag.remove();\r\n      this.frag = null;\r\n    }\r\n    if (this.elseEl && !this.elseFrag) {\r\n      if (!this.elseFactory) {\r\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\r\n      }\r\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\r\n      this.elseFrag.before(this.anchor);\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    if (this.frag) {\r\n      this.frag.destroy();\r\n    }\r\n    if (this.elseFrag) {\r\n      this.elseFrag.destroy();\r\n    }\r\n  }\r\n};\r\n\r\nvar show = {\r\n\r\n  bind: function bind() {\r\n    // check else block\r\n    var next = this.el.nextElementSibling;\r\n    if (next && getAttr(next, 'v-else') !== null) {\r\n      this.elseEl = next;\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    this.apply(this.el, value);\r\n    if (this.elseEl) {\r\n      this.apply(this.elseEl, !value);\r\n    }\r\n  },\r\n\r\n  apply: function apply(el, value) {\r\n    if (inDoc(el)) {\r\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\r\n    } else {\r\n      toggle();\r\n    }\r\n    function toggle() {\r\n      el.style.display = value ? '' : 'none';\r\n    }\r\n  }\r\n};\r\n\r\nvar text$2 = {\r\n\r\n  bind: function bind() {\r\n    var self = this;\r\n    var el = this.el;\r\n    var isRange = el.type === 'range';\r\n    var lazy = this.params.lazy;\r\n    var number = this.params.number;\r\n    var debounce = this.params.debounce;\r\n\r\n    // handle composition events.\r\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\r\n    // skip this for Android because it handles composition\r\n    // events quite differently. Android doesn't trigger\r\n    // composition events for language input methods e.g.\r\n    // Chinese, but instead triggers them for spelling\r\n    // suggestions... (see Discussion/#162)\r\n    var composing = false;\r\n    if (!isAndroid && !isRange) {\r\n      this.on('compositionstart', function () {\r\n        composing = true;\r\n      });\r\n      this.on('compositionend', function () {\r\n        composing = false;\r\n        // in IE11 the \"compositionend\" event fires AFTER\r\n        // the \"input\" event, so the input handler is blocked\r\n        // at the end... have to call it here.\r\n        //\r\n        // #1327: in lazy mode this is unecessary.\r\n        if (!lazy) {\r\n          self.listener();\r\n        }\r\n      });\r\n    }\r\n\r\n    // prevent messing with the input when user is typing,\r\n    // and force update on blur.\r\n    this.focused = false;\r\n    if (!isRange && !lazy) {\r\n      this.on('focus', function () {\r\n        self.focused = true;\r\n      });\r\n      this.on('blur', function () {\r\n        self.focused = false;\r\n        // do not sync value after fragment removal (#2017)\r\n        if (!self._frag || self._frag.inserted) {\r\n          self.rawListener();\r\n        }\r\n      });\r\n    }\r\n\r\n    // Now attach the main listener\r\n    this.listener = this.rawListener = function () {\r\n      if (composing || !self._bound) {\r\n        return;\r\n      }\r\n      var val = number || isRange ? toNumber(el.value) : el.value;\r\n      self.set(val);\r\n      // force update on next tick to avoid lock & same value\r\n      // also only update when user is not typing\r\n      nextTick(function () {\r\n        if (self._bound && !self.focused) {\r\n          self.update(self._watcher.value);\r\n        }\r\n      });\r\n    };\r\n\r\n    // apply debounce\r\n    if (debounce) {\r\n      this.listener = _debounce(this.listener, debounce);\r\n    }\r\n\r\n    // Support jQuery events, since jQuery.trigger() doesn't\r\n    // trigger native events in some cases and some plugins\r\n    // rely on $.trigger()\r\n    //\r\n    // We want to make sure if a listener is attached using\r\n    // jQuery, it is also removed with jQuery, that's why\r\n    // we do the check for each directive instance and\r\n    // store that check result on itself. This also allows\r\n    // easier test coverage control by unsetting the global\r\n    // jQuery variable in tests.\r\n    this.hasjQuery = typeof jQuery === 'function';\r\n    if (this.hasjQuery) {\r\n      var method = jQuery.fn.on ? 'on' : 'bind';\r\n      jQuery(el)[method]('change', this.rawListener);\r\n      if (!lazy) {\r\n        jQuery(el)[method]('input', this.listener);\r\n      }\r\n    } else {\r\n      this.on('change', this.rawListener);\r\n      if (!lazy) {\r\n        this.on('input', this.listener);\r\n      }\r\n    }\r\n\r\n    // IE9 doesn't fire input event on backspace/del/cut\r\n    if (!lazy && isIE9) {\r\n      this.on('cut', function () {\r\n        nextTick(self.listener);\r\n      });\r\n      this.on('keyup', function (e) {\r\n        if (e.keyCode === 46 || e.keyCode === 8) {\r\n          self.listener();\r\n        }\r\n      });\r\n    }\r\n\r\n    // set initial value if present\r\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\r\n      this.afterBind = this.listener;\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    // #3029 only update when the value changes. This prevent\r\n    // browsers from overwriting values like selectionStart\r\n    value = _toString(value);\r\n    if (value !== this.el.value) this.el.value = value;\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    var el = this.el;\r\n    if (this.hasjQuery) {\r\n      var method = jQuery.fn.off ? 'off' : 'unbind';\r\n      jQuery(el)[method]('change', this.listener);\r\n      jQuery(el)[method]('input', this.listener);\r\n    }\r\n  }\r\n};\r\n\r\nvar radio = {\r\n\r\n  bind: function bind() {\r\n    var self = this;\r\n    var el = this.el;\r\n\r\n    this.getValue = function () {\r\n      // value overwrite via v-bind:value\r\n      if (el.hasOwnProperty('_value')) {\r\n        return el._value;\r\n      }\r\n      var val = el.value;\r\n      if (self.params.number) {\r\n        val = toNumber(val);\r\n      }\r\n      return val;\r\n    };\r\n\r\n    this.listener = function () {\r\n      self.set(self.getValue());\r\n    };\r\n    this.on('change', this.listener);\r\n\r\n    if (el.hasAttribute('checked')) {\r\n      this.afterBind = this.listener;\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    this.el.checked = looseEqual(value, this.getValue());\r\n  }\r\n};\r\n\r\nvar select = {\r\n\r\n  bind: function bind() {\r\n    var _this = this;\r\n\r\n    var self = this;\r\n    var el = this.el;\r\n\r\n    // method to force update DOM using latest value.\r\n    this.forceUpdate = function () {\r\n      if (self._watcher) {\r\n        self.update(self._watcher.get());\r\n      }\r\n    };\r\n\r\n    // check if this is a multiple select\r\n    var multiple = this.multiple = el.hasAttribute('multiple');\r\n\r\n    // attach listener\r\n    this.listener = function () {\r\n      var value = getValue(el, multiple);\r\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\r\n      self.set(value);\r\n    };\r\n    this.on('change', this.listener);\r\n\r\n    // if has initial value, set afterBind\r\n    var initValue = getValue(el, multiple, true);\r\n    if (multiple && initValue.length || !multiple && initValue !== null) {\r\n      this.afterBind = this.listener;\r\n    }\r\n\r\n    // All major browsers except Firefox resets\r\n    // selectedIndex with value -1 to 0 when the element\r\n    // is appended to a new parent, therefore we have to\r\n    // force a DOM update whenever that happens...\r\n    this.vm.$on('hook:attached', function () {\r\n      nextTick(_this.forceUpdate);\r\n    });\r\n    if (!inDoc(el)) {\r\n      nextTick(this.forceUpdate);\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    var el = this.el;\r\n    el.selectedIndex = -1;\r\n    var multi = this.multiple && isArray(value);\r\n    var options = el.options;\r\n    var i = options.length;\r\n    var op, val;\r\n    while (i--) {\r\n      op = options[i];\r\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\r\n      /* eslint-disable eqeqeq */\r\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\r\n      /* eslint-enable eqeqeq */\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    /* istanbul ignore next */\r\n    this.vm.$off('hook:attached', this.forceUpdate);\r\n  }\r\n};\r\n\r\n/**\r\n * Get select value\r\n *\r\n * @param {SelectElement} el\r\n * @param {Boolean} multi\r\n * @param {Boolean} init\r\n * @return {Array|*}\r\n */\r\n\r\nfunction getValue(el, multi, init) {\r\n  var res = multi ? [] : null;\r\n  var op, val, selected;\r\n  for (var i = 0, l = el.options.length; i < l; i++) {\r\n    op = el.options[i];\r\n    selected = init ? op.hasAttribute('selected') : op.selected;\r\n    if (selected) {\r\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\r\n      if (multi) {\r\n        res.push(val);\r\n      } else {\r\n        return val;\r\n      }\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Native Array.indexOf uses strict equal, but in this\r\n * case we need to match string/numbers with custom equal.\r\n *\r\n * @param {Array} arr\r\n * @param {*} val\r\n */\r\n\r\nfunction indexOf$1(arr, val) {\r\n  var i = arr.length;\r\n  while (i--) {\r\n    if (looseEqual(arr[i], val)) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\nvar checkbox = {\r\n\r\n  bind: function bind() {\r\n    var self = this;\r\n    var el = this.el;\r\n\r\n    this.getValue = function () {\r\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\r\n    };\r\n\r\n    function getBooleanValue() {\r\n      var val = el.checked;\r\n      if (val && el.hasOwnProperty('_trueValue')) {\r\n        return el._trueValue;\r\n      }\r\n      if (!val && el.hasOwnProperty('_falseValue')) {\r\n        return el._falseValue;\r\n      }\r\n      return val;\r\n    }\r\n\r\n    this.listener = function () {\r\n      var model = self._watcher.get();\r\n      if (isArray(model)) {\r\n        var val = self.getValue();\r\n        var i = indexOf(model, val);\r\n        if (el.checked) {\r\n          if (i < 0) {\r\n            self.set(model.concat(val));\r\n          }\r\n        } else if (i > -1) {\r\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\r\n        }\r\n      } else {\r\n        self.set(getBooleanValue());\r\n      }\r\n    };\r\n\r\n    this.on('change', this.listener);\r\n    if (el.hasAttribute('checked')) {\r\n      this.afterBind = this.listener;\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    var el = this.el;\r\n    if (isArray(value)) {\r\n      el.checked = indexOf(value, this.getValue()) > -1;\r\n    } else {\r\n      if (el.hasOwnProperty('_trueValue')) {\r\n        el.checked = looseEqual(value, el._trueValue);\r\n      } else {\r\n        el.checked = !!value;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar handlers = {\r\n  text: text$2,\r\n  radio: radio,\r\n  select: select,\r\n  checkbox: checkbox\r\n};\r\n\r\nvar model = {\r\n\r\n  priority: MODEL,\r\n  twoWay: true,\r\n  handlers: handlers,\r\n  params: ['lazy', 'number', 'debounce'],\r\n\r\n  /**\r\n   * Possible elements:\r\n   *   <select>\r\n   *   <textarea>\r\n   *   <input type=\"*\">\r\n   *     - text\r\n   *     - checkbox\r\n   *     - radio\r\n   *     - number\r\n   */\r\n\r\n  bind: function bind() {\r\n    // friendly warning...\r\n    this.checkFilters();\r\n    if (this.hasRead && !this.hasWrite) {\r\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\r\n    }\r\n    var el = this.el;\r\n    var tag = el.tagName;\r\n    var handler;\r\n    if (tag === 'INPUT') {\r\n      handler = handlers[el.type] || handlers.text;\r\n    } else if (tag === 'SELECT') {\r\n      handler = handlers.select;\r\n    } else if (tag === 'TEXTAREA') {\r\n      handler = handlers.text;\r\n    } else {\r\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\r\n      return;\r\n    }\r\n    el.__v_model = this;\r\n    handler.bind.call(this);\r\n    this.update = handler.update;\r\n    this._unbind = handler.unbind;\r\n  },\r\n\r\n  /**\r\n   * Check read/write filter stats.\r\n   */\r\n\r\n  checkFilters: function checkFilters() {\r\n    var filters = this.filters;\r\n    if (!filters) return;\r\n    var i = filters.length;\r\n    while (i--) {\r\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\r\n      if (typeof filter === 'function' || filter.read) {\r\n        this.hasRead = true;\r\n      }\r\n      if (filter.write) {\r\n        this.hasWrite = true;\r\n      }\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    this.el.__v_model = null;\r\n    this._unbind && this._unbind();\r\n  }\r\n};\r\n\r\n// keyCode aliases\r\nvar keyCodes = {\r\n  esc: 27,\r\n  tab: 9,\r\n  enter: 13,\r\n  space: 32,\r\n  'delete': [8, 46],\r\n  up: 38,\r\n  left: 37,\r\n  right: 39,\r\n  down: 40\r\n};\r\n\r\nfunction keyFilter(handler, keys) {\r\n  var codes = keys.map(function (key) {\r\n    var charCode = key.charCodeAt(0);\r\n    if (charCode > 47 && charCode < 58) {\r\n      return parseInt(key, 10);\r\n    }\r\n    if (key.length === 1) {\r\n      charCode = key.toUpperCase().charCodeAt(0);\r\n      if (charCode > 64 && charCode < 91) {\r\n        return charCode;\r\n      }\r\n    }\r\n    return keyCodes[key];\r\n  });\r\n  codes = [].concat.apply([], codes);\r\n  return function keyHandler(e) {\r\n    if (codes.indexOf(e.keyCode) > -1) {\r\n      return handler.call(this, e);\r\n    }\r\n  };\r\n}\r\n\r\nfunction stopFilter(handler) {\r\n  return function stopHandler(e) {\r\n    e.stopPropagation();\r\n    return handler.call(this, e);\r\n  };\r\n}\r\n\r\nfunction preventFilter(handler) {\r\n  return function preventHandler(e) {\r\n    e.preventDefault();\r\n    return handler.call(this, e);\r\n  };\r\n}\r\n\r\nfunction selfFilter(handler) {\r\n  return function selfHandler(e) {\r\n    if (e.target === e.currentTarget) {\r\n      return handler.call(this, e);\r\n    }\r\n  };\r\n}\r\n\r\nvar on$1 = {\r\n\r\n  priority: ON,\r\n  acceptStatement: true,\r\n  keyCodes: keyCodes,\r\n\r\n  bind: function bind() {\r\n    // deal with iframes\r\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\r\n      var self = this;\r\n      this.iframeBind = function () {\r\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\r\n      };\r\n      this.on('load', this.iframeBind);\r\n    }\r\n  },\r\n\r\n  update: function update(handler) {\r\n    // stub a noop for v-on with no value,\r\n    // e.g. @mousedown.prevent\r\n    if (!this.descriptor.raw) {\r\n      handler = function () {};\r\n    }\r\n\r\n    if (typeof handler !== 'function') {\r\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\r\n      return;\r\n    }\r\n\r\n    // apply modifiers\r\n    if (this.modifiers.stop) {\r\n      handler = stopFilter(handler);\r\n    }\r\n    if (this.modifiers.prevent) {\r\n      handler = preventFilter(handler);\r\n    }\r\n    if (this.modifiers.self) {\r\n      handler = selfFilter(handler);\r\n    }\r\n    // key filter\r\n    var keys = Object.keys(this.modifiers).filter(function (key) {\r\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\r\n    });\r\n    if (keys.length) {\r\n      handler = keyFilter(handler, keys);\r\n    }\r\n\r\n    this.reset();\r\n    this.handler = handler;\r\n\r\n    if (this.iframeBind) {\r\n      this.iframeBind();\r\n    } else {\r\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\r\n    }\r\n  },\r\n\r\n  reset: function reset() {\r\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\r\n    if (this.handler) {\r\n      off(el, this.arg, this.handler);\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    this.reset();\r\n  }\r\n};\r\n\r\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\r\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\r\nvar importantRE = /!important;?$/;\r\nvar propCache = Object.create(null);\r\n\r\nvar testEl = null;\r\n\r\nvar style = {\r\n\r\n  deep: true,\r\n\r\n  update: function update(value) {\r\n    if (typeof value === 'string') {\r\n      this.el.style.cssText = value;\r\n    } else if (isArray(value)) {\r\n      this.handleObject(value.reduce(extend, {}));\r\n    } else {\r\n      this.handleObject(value || {});\r\n    }\r\n  },\r\n\r\n  handleObject: function handleObject(value) {\r\n    // cache object styles so that only changed props\r\n    // are actually updated.\r\n    var cache = this.cache || (this.cache = {});\r\n    var name, val;\r\n    for (name in cache) {\r\n      if (!(name in value)) {\r\n        this.handleSingle(name, null);\r\n        delete cache[name];\r\n      }\r\n    }\r\n    for (name in value) {\r\n      val = value[name];\r\n      if (val !== cache[name]) {\r\n        cache[name] = val;\r\n        this.handleSingle(name, val);\r\n      }\r\n    }\r\n  },\r\n\r\n  handleSingle: function handleSingle(prop, value) {\r\n    prop = normalize(prop);\r\n    if (!prop) return; // unsupported prop\r\n    // cast possible numbers/booleans into strings\r\n    if (value != null) value += '';\r\n    if (value) {\r\n      var isImportant = importantRE.test(value) ? 'important' : '';\r\n      if (isImportant) {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\r\n        }\r\n        value = value.replace(importantRE, '').trim();\r\n        this.el.style.setProperty(prop.kebab, value, isImportant);\r\n      } else {\r\n        this.el.style[prop.camel] = value;\r\n      }\r\n    } else {\r\n      this.el.style[prop.camel] = '';\r\n    }\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * Normalize a CSS property name.\r\n * - cache result\r\n * - auto prefix\r\n * - camelCase -> dash-case\r\n *\r\n * @param {String} prop\r\n * @return {String}\r\n */\r\n\r\nfunction normalize(prop) {\r\n  if (propCache[prop]) {\r\n    return propCache[prop];\r\n  }\r\n  var res = prefix(prop);\r\n  propCache[prop] = propCache[res] = res;\r\n  return res;\r\n}\r\n\r\n/**\r\n * Auto detect the appropriate prefix for a CSS property.\r\n * https://gist.github.com/paulirish/523692\r\n *\r\n * @param {String} prop\r\n * @return {String}\r\n */\r\n\r\nfunction prefix(prop) {\r\n  prop = hyphenate(prop);\r\n  var camel = camelize(prop);\r\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\r\n  if (!testEl) {\r\n    testEl = document.createElement('div');\r\n  }\r\n  var i = prefixes.length;\r\n  var prefixed;\r\n  if (camel !== 'filter' && camel in testEl.style) {\r\n    return {\r\n      kebab: prop,\r\n      camel: camel\r\n    };\r\n  }\r\n  while (i--) {\r\n    prefixed = camelPrefixes[i] + upper;\r\n    if (prefixed in testEl.style) {\r\n      return {\r\n        kebab: prefixes[i] + prop,\r\n        camel: prefixed\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// xlink\r\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\nvar xlinkRE = /^xlink:/;\r\n\r\n// check for attributes that prohibit interpolations\r\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\r\n// these attributes should also set their corresponding properties\r\n// because they only affect the initial state of the element\r\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\r\n// these attributes expect enumrated values of \"true\" or \"false\"\r\n// but are not boolean attributes\r\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\r\n\r\n// these attributes should set a hidden property for\r\n// binding v-model to object values\r\nvar modelProps = {\r\n  value: '_value',\r\n  'true-value': '_trueValue',\r\n  'false-value': '_falseValue'\r\n};\r\n\r\nvar bind$1 = {\r\n\r\n  priority: BIND,\r\n\r\n  bind: function bind() {\r\n    var attr = this.arg;\r\n    var tag = this.el.tagName;\r\n    // should be deep watch on object mode\r\n    if (!attr) {\r\n      this.deep = true;\r\n    }\r\n    // handle interpolation bindings\r\n    var descriptor = this.descriptor;\r\n    var tokens = descriptor.interp;\r\n    if (tokens) {\r\n      // handle interpolations with one-time tokens\r\n      if (descriptor.hasOneTime) {\r\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\r\n      }\r\n\r\n      // only allow binding on native attributes\r\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\r\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\r\n        this.el.removeAttribute(attr);\r\n        this.invalid = true;\r\n      }\r\n\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\r\n        // warn src\r\n        if (attr === 'src') {\r\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\r\n        }\r\n\r\n        // warn style\r\n        if (attr === 'style') {\r\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  update: function update(value) {\r\n    if (this.invalid) {\r\n      return;\r\n    }\r\n    var attr = this.arg;\r\n    if (this.arg) {\r\n      this.handleSingle(attr, value);\r\n    } else {\r\n      this.handleObject(value || {});\r\n    }\r\n  },\r\n\r\n  // share object handler with v-bind:class\r\n  handleObject: style.handleObject,\r\n\r\n  handleSingle: function handleSingle(attr, value) {\r\n    var el = this.el;\r\n    var interp = this.descriptor.interp;\r\n    if (this.modifiers.camel) {\r\n      attr = camelize(attr);\r\n    }\r\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\r\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\r\n      ? '' : value : value;\r\n\r\n      if (el[attr] !== attrValue) {\r\n        el[attr] = attrValue;\r\n      }\r\n    }\r\n    // set model props\r\n    var modelProp = modelProps[attr];\r\n    if (!interp && modelProp) {\r\n      el[modelProp] = value;\r\n      // update v-model if present\r\n      var model = el.__v_model;\r\n      if (model) {\r\n        model.listener();\r\n      }\r\n    }\r\n    // do not set value attribute for textarea\r\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\r\n      el.removeAttribute(attr);\r\n      return;\r\n    }\r\n    // update attribute\r\n    if (enumeratedAttrRE.test(attr)) {\r\n      el.setAttribute(attr, value ? 'true' : 'false');\r\n    } else if (value != null && value !== false) {\r\n      if (attr === 'class') {\r\n        // handle edge case #1960:\r\n        // class interpolation should not overwrite Vue transition class\r\n        if (el.__v_trans) {\r\n          value += ' ' + el.__v_trans.id + '-transition';\r\n        }\r\n        setClass(el, value);\r\n      } else if (xlinkRE.test(attr)) {\r\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\r\n      } else {\r\n        el.setAttribute(attr, value === true ? '' : value);\r\n      }\r\n    } else {\r\n      el.removeAttribute(attr);\r\n    }\r\n  }\r\n};\r\n\r\nvar el = {\r\n\r\n  priority: EL,\r\n\r\n  bind: function bind() {\r\n    /* istanbul ignore if */\r\n    if (!this.arg) {\r\n      return;\r\n    }\r\n    var id = this.id = camelize(this.arg);\r\n    var refs = (this._scope || this.vm).$els;\r\n    if (hasOwn(refs, id)) {\r\n      refs[id] = this.el;\r\n    } else {\r\n      defineReactive(refs, id, this.el);\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    var refs = (this._scope || this.vm).$els;\r\n    if (refs[this.id] === this.el) {\r\n      refs[this.id] = null;\r\n    }\r\n  }\r\n};\r\n\r\nvar ref = {\r\n  bind: function bind() {\r\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\r\n  }\r\n};\r\n\r\nvar cloak = {\r\n  bind: function bind() {\r\n    var el = this.el;\r\n    this.vm.$once('pre-hook:compiled', function () {\r\n      el.removeAttribute('v-cloak');\r\n    });\r\n  }\r\n};\r\n\r\n// logic control\r\n// two-way binding\r\n// event handling\r\n// attributes\r\n// ref & el\r\n// cloak\r\n// must export plain object\r\nvar directives = {\r\n  text: text$1,\r\n  html: html,\r\n  'for': vFor,\r\n  'if': vIf,\r\n  show: show,\r\n  model: model,\r\n  on: on$1,\r\n  bind: bind$1,\r\n  el: el,\r\n  ref: ref,\r\n  cloak: cloak\r\n};\r\n\r\nvar vClass = {\r\n\r\n  deep: true,\r\n\r\n  update: function update(value) {\r\n    if (!value) {\r\n      this.cleanup();\r\n    } else if (typeof value === 'string') {\r\n      this.setClass(value.trim().split(/\\s+/));\r\n    } else {\r\n      this.setClass(normalize$1(value));\r\n    }\r\n  },\r\n\r\n  setClass: function setClass(value) {\r\n    this.cleanup(value);\r\n    for (var i = 0, l = value.length; i < l; i++) {\r\n      var val = value[i];\r\n      if (val) {\r\n        apply(this.el, val, addClass);\r\n      }\r\n    }\r\n    this.prevKeys = value;\r\n  },\r\n\r\n  cleanup: function cleanup(value) {\r\n    var prevKeys = this.prevKeys;\r\n    if (!prevKeys) return;\r\n    var i = prevKeys.length;\r\n    while (i--) {\r\n      var key = prevKeys[i];\r\n      if (!value || value.indexOf(key) < 0) {\r\n        apply(this.el, key, removeClass);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Normalize objects and arrays (potentially containing objects)\r\n * into array of strings.\r\n *\r\n * @param {Object|Array<String|Object>} value\r\n * @return {Array<String>}\r\n */\r\n\r\nfunction normalize$1(value) {\r\n  var res = [];\r\n  if (isArray(value)) {\r\n    for (var i = 0, l = value.length; i < l; i++) {\r\n      var _key = value[i];\r\n      if (_key) {\r\n        if (typeof _key === 'string') {\r\n          res.push(_key);\r\n        } else {\r\n          for (var k in _key) {\r\n            if (_key[k]) res.push(k);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } else if (isObject(value)) {\r\n    for (var key in value) {\r\n      if (value[key]) res.push(key);\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Add or remove a class/classes on an element\r\n *\r\n * @param {Element} el\r\n * @param {String} key The class name. This may or may not\r\n *                     contain a space character, in such a\r\n *                     case we'll deal with multiple class\r\n *                     names at once.\r\n * @param {Function} fn\r\n */\r\n\r\nfunction apply(el, key, fn) {\r\n  key = key.trim();\r\n  if (key.indexOf(' ') === -1) {\r\n    fn(el, key);\r\n    return;\r\n  }\r\n  // The key contains one or more space characters.\r\n  // Since a class name doesn't accept such characters, we\r\n  // treat it as multiple classes.\r\n  var keys = key.split(/\\s+/);\r\n  for (var i = 0, l = keys.length; i < l; i++) {\r\n    fn(el, keys[i]);\r\n  }\r\n}\r\n\r\nvar component = {\r\n\r\n  priority: COMPONENT,\r\n\r\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\r\n\r\n  /**\r\n   * Setup. Two possible usages:\r\n   *\r\n   * - static:\r\n   *   <comp> or <div v-component=\"comp\">\r\n   *\r\n   * - dynamic:\r\n   *   <component :is=\"view\">\r\n   */\r\n\r\n  bind: function bind() {\r\n    if (!this.el.__vue__) {\r\n      // keep-alive cache\r\n      this.keepAlive = this.params.keepAlive;\r\n      if (this.keepAlive) {\r\n        this.cache = {};\r\n      }\r\n      // check inline-template\r\n      if (this.params.inlineTemplate) {\r\n        // extract inline template as a DocumentFragment\r\n        this.inlineTemplate = extractContent(this.el, true);\r\n      }\r\n      // component resolution related state\r\n      this.pendingComponentCb = this.Component = null;\r\n      // transition related state\r\n      this.pendingRemovals = 0;\r\n      this.pendingRemovalCb = null;\r\n      // create a ref anchor\r\n      this.anchor = createAnchor('v-component');\r\n      replace(this.el, this.anchor);\r\n      // remove is attribute.\r\n      // this is removed during compilation, but because compilation is\r\n      // cached, when the component is used elsewhere this attribute\r\n      // will remain at link time.\r\n      this.el.removeAttribute('is');\r\n      this.el.removeAttribute(':is');\r\n      // remove ref, same as above\r\n      if (this.descriptor.ref) {\r\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\r\n      }\r\n      // if static, build right now.\r\n      if (this.literal) {\r\n        this.setComponent(this.expression);\r\n      }\r\n    } else {\r\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Public update, called by the watcher in the dynamic\r\n   * literal scenario, e.g. <component :is=\"view\">\r\n   */\r\n\r\n  update: function update(value) {\r\n    if (!this.literal) {\r\n      this.setComponent(value);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Switch dynamic components. May resolve the component\r\n   * asynchronously, and perform transition based on\r\n   * specified transition mode. Accepts a few additional\r\n   * arguments specifically for vue-router.\r\n   *\r\n   * The callback is called when the full transition is\r\n   * finished.\r\n   *\r\n   * @param {String} value\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  setComponent: function setComponent(value, cb) {\r\n    this.invalidatePending();\r\n    if (!value) {\r\n      // just remove current\r\n      this.unbuild(true);\r\n      this.remove(this.childVM, cb);\r\n      this.childVM = null;\r\n    } else {\r\n      var self = this;\r\n      this.resolveComponent(value, function () {\r\n        self.mountComponent(cb);\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Resolve the component constructor to use when creating\r\n   * the child vm.\r\n   *\r\n   * @param {String|Function} value\r\n   * @param {Function} cb\r\n   */\r\n\r\n  resolveComponent: function resolveComponent(value, cb) {\r\n    var self = this;\r\n    this.pendingComponentCb = cancellable(function (Component) {\r\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\r\n      self.Component = Component;\r\n      cb();\r\n    });\r\n    this.vm._resolveComponent(value, this.pendingComponentCb);\r\n  },\r\n\r\n  /**\r\n   * Create a new instance using the current constructor and\r\n   * replace the existing instance. This method doesn't care\r\n   * whether the new component and the old one are actually\r\n   * the same.\r\n   *\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  mountComponent: function mountComponent(cb) {\r\n    // actual mount\r\n    this.unbuild(true);\r\n    var self = this;\r\n    var activateHooks = this.Component.options.activate;\r\n    var cached = this.getCached();\r\n    var newComponent = this.build();\r\n    if (activateHooks && !cached) {\r\n      this.waitingFor = newComponent;\r\n      callActivateHooks(activateHooks, newComponent, function () {\r\n        if (self.waitingFor !== newComponent) {\r\n          return;\r\n        }\r\n        self.waitingFor = null;\r\n        self.transition(newComponent, cb);\r\n      });\r\n    } else {\r\n      // update ref for kept-alive component\r\n      if (cached) {\r\n        newComponent._updateRef();\r\n      }\r\n      this.transition(newComponent, cb);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * When the component changes or unbinds before an async\r\n   * constructor is resolved, we need to invalidate its\r\n   * pending callback.\r\n   */\r\n\r\n  invalidatePending: function invalidatePending() {\r\n    if (this.pendingComponentCb) {\r\n      this.pendingComponentCb.cancel();\r\n      this.pendingComponentCb = null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Instantiate/insert a new child vm.\r\n   * If keep alive and has cached instance, insert that\r\n   * instance; otherwise build a new one and cache it.\r\n   *\r\n   * @param {Object} [extraOptions]\r\n   * @return {Vue} - the created instance\r\n   */\r\n\r\n  build: function build(extraOptions) {\r\n    var cached = this.getCached();\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    if (this.Component) {\r\n      // default options\r\n      var options = {\r\n        name: this.ComponentName,\r\n        el: cloneNode(this.el),\r\n        template: this.inlineTemplate,\r\n        // make sure to add the child with correct parent\r\n        // if this is a transcluded component, its parent\r\n        // should be the transclusion host.\r\n        parent: this._host || this.vm,\r\n        // if no inline-template, then the compiled\r\n        // linker can be cached for better performance.\r\n        _linkerCachable: !this.inlineTemplate,\r\n        _ref: this.descriptor.ref,\r\n        _asComponent: true,\r\n        _isRouterView: this._isRouterView,\r\n        // if this is a transcluded component, context\r\n        // will be the common parent vm of this instance\r\n        // and its host.\r\n        _context: this.vm,\r\n        // if this is inside an inline v-for, the scope\r\n        // will be the intermediate scope created for this\r\n        // repeat fragment. this is used for linking props\r\n        // and container directives.\r\n        _scope: this._scope,\r\n        // pass in the owner fragment of this component.\r\n        // this is necessary so that the fragment can keep\r\n        // track of its contained components in order to\r\n        // call attach/detach hooks for them.\r\n        _frag: this._frag\r\n      };\r\n      // extra options\r\n      // in 1.0.0 this is used by vue-router only\r\n      /* istanbul ignore if */\r\n      if (extraOptions) {\r\n        extend(options, extraOptions);\r\n      }\r\n      var child = new this.Component(options);\r\n      if (this.keepAlive) {\r\n        this.cache[this.Component.cid] = child;\r\n      }\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\r\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\r\n      }\r\n      return child;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Try to get a cached instance of the current component.\r\n   *\r\n   * @return {Vue|undefined}\r\n   */\r\n\r\n  getCached: function getCached() {\r\n    return this.keepAlive && this.cache[this.Component.cid];\r\n  },\r\n\r\n  /**\r\n   * Teardown the current child, but defers cleanup so\r\n   * that we can separate the destroy and removal steps.\r\n   *\r\n   * @param {Boolean} defer\r\n   */\r\n\r\n  unbuild: function unbuild(defer) {\r\n    if (this.waitingFor) {\r\n      if (!this.keepAlive) {\r\n        this.waitingFor.$destroy();\r\n      }\r\n      this.waitingFor = null;\r\n    }\r\n    var child = this.childVM;\r\n    if (!child || this.keepAlive) {\r\n      if (child) {\r\n        // remove ref\r\n        child._inactive = true;\r\n        child._updateRef(true);\r\n      }\r\n      return;\r\n    }\r\n    // the sole purpose of `deferCleanup` is so that we can\r\n    // \"deactivate\" the vm right now and perform DOM removal\r\n    // later.\r\n    child.$destroy(false, defer);\r\n  },\r\n\r\n  /**\r\n   * Remove current destroyed child and manually do\r\n   * the cleanup after removal.\r\n   *\r\n   * @param {Function} cb\r\n   */\r\n\r\n  remove: function remove(child, cb) {\r\n    var keepAlive = this.keepAlive;\r\n    if (child) {\r\n      // we may have a component switch when a previous\r\n      // component is still being transitioned out.\r\n      // we want to trigger only one lastest insertion cb\r\n      // when the existing transition finishes. (#1119)\r\n      this.pendingRemovals++;\r\n      this.pendingRemovalCb = cb;\r\n      var self = this;\r\n      child.$remove(function () {\r\n        self.pendingRemovals--;\r\n        if (!keepAlive) child._cleanup();\r\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\r\n          self.pendingRemovalCb();\r\n          self.pendingRemovalCb = null;\r\n        }\r\n      });\r\n    } else if (cb) {\r\n      cb();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Actually swap the components, depending on the\r\n   * transition mode. Defaults to simultaneous.\r\n   *\r\n   * @param {Vue} target\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  transition: function transition(target, cb) {\r\n    var self = this;\r\n    var current = this.childVM;\r\n    // for devtool inspection\r\n    if (current) current._inactive = true;\r\n    target._inactive = false;\r\n    this.childVM = target;\r\n    switch (self.params.transitionMode) {\r\n      case 'in-out':\r\n        target.$before(self.anchor, function () {\r\n          self.remove(current, cb);\r\n        });\r\n        break;\r\n      case 'out-in':\r\n        self.remove(current, function () {\r\n          target.$before(self.anchor, cb);\r\n        });\r\n        break;\r\n      default:\r\n        self.remove(current);\r\n        target.$before(self.anchor, cb);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Unbind.\r\n   */\r\n\r\n  unbind: function unbind() {\r\n    this.invalidatePending();\r\n    // Do not defer cleanup when unbinding\r\n    this.unbuild();\r\n    // destroy all keep-alive cached instances\r\n    if (this.cache) {\r\n      for (var key in this.cache) {\r\n        this.cache[key].$destroy();\r\n      }\r\n      this.cache = null;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Call activate hooks in order (asynchronous)\r\n *\r\n * @param {Array} hooks\r\n * @param {Vue} vm\r\n * @param {Function} cb\r\n */\r\n\r\nfunction callActivateHooks(hooks, vm, cb) {\r\n  var total = hooks.length;\r\n  var called = 0;\r\n  hooks[0].call(vm, next);\r\n  function next() {\r\n    if (++called >= total) {\r\n      cb();\r\n    } else {\r\n      hooks[called].call(vm, next);\r\n    }\r\n  }\r\n}\r\n\r\nvar propBindingModes = config._propBindingModes;\r\nvar empty = {};\r\n\r\n// regexes\r\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\r\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\r\n\r\n/**\r\n * Compile props on a root element and return\r\n * a props link function.\r\n *\r\n * @param {Element|DocumentFragment} el\r\n * @param {Array} propOptions\r\n * @param {Vue} vm\r\n * @return {Function} propsLinkFn\r\n */\r\n\r\nfunction compileProps(el, propOptions, vm) {\r\n  var props = [];\r\n  var propsData = vm.$options.propsData;\r\n  var names = Object.keys(propOptions);\r\n  var i = names.length;\r\n  var options, name, attr, value, path, parsed, prop;\r\n  while (i--) {\r\n    name = names[i];\r\n    options = propOptions[name] || empty;\r\n\r\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\r\n      warn('Do not use $data as prop.', vm);\r\n      continue;\r\n    }\r\n\r\n    // props could contain dashes, which will be\r\n    // interpreted as minus calculations by the parser\r\n    // so we need to camelize the path here\r\n    path = camelize(name);\r\n    if (!identRE$1.test(path)) {\r\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\r\n      continue;\r\n    }\r\n\r\n    prop = {\r\n      name: name,\r\n      path: path,\r\n      options: options,\r\n      mode: propBindingModes.ONE_WAY,\r\n      raw: null\r\n    };\r\n\r\n    attr = hyphenate(name);\r\n    // first check dynamic version\r\n    if ((value = getBindAttr(el, attr)) === null) {\r\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\r\n        prop.mode = propBindingModes.TWO_WAY;\r\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\r\n        prop.mode = propBindingModes.ONE_TIME;\r\n      }\r\n    }\r\n    if (value !== null) {\r\n      // has dynamic binding!\r\n      prop.raw = value;\r\n      parsed = parseDirective(value);\r\n      value = parsed.expression;\r\n      prop.filters = parsed.filters;\r\n      // check binding type\r\n      if (isLiteral(value) && !parsed.filters) {\r\n        // for expressions containing literal numbers and\r\n        // booleans, there's no need to setup a prop binding,\r\n        // so we can optimize them as a one-time set.\r\n        prop.optimizedLiteral = true;\r\n      } else {\r\n        prop.dynamic = true;\r\n        // check non-settable path for two-way bindings\r\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\r\n          prop.mode = propBindingModes.ONE_WAY;\r\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\r\n        }\r\n      }\r\n      prop.parentPath = value;\r\n\r\n      // warn required two-way\r\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\r\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\r\n      }\r\n    } else if ((value = getAttr(el, attr)) !== null) {\r\n      // has literal binding!\r\n      prop.raw = value;\r\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\r\n      // has propsData\r\n      prop.raw = value;\r\n    } else if (process.env.NODE_ENV !== 'production') {\r\n      // check possible camelCase prop usage\r\n      var lowerCaseName = path.toLowerCase();\r\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\r\n      if (value) {\r\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\r\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\r\n        // warn missing required\r\n        warn('Missing required prop: ' + name, vm);\r\n      }\r\n    }\r\n    // push prop\r\n    props.push(prop);\r\n  }\r\n  return makePropsLinkFn(props);\r\n}\r\n\r\n/**\r\n * Build a function that applies props to a vm.\r\n *\r\n * @param {Array} props\r\n * @return {Function} propsLinkFn\r\n */\r\n\r\nfunction makePropsLinkFn(props) {\r\n  return function propsLinkFn(vm, scope) {\r\n    // store resolved props info\r\n    vm._props = {};\r\n    var inlineProps = vm.$options.propsData;\r\n    var i = props.length;\r\n    var prop, path, options, value, raw;\r\n    while (i--) {\r\n      prop = props[i];\r\n      raw = prop.raw;\r\n      path = prop.path;\r\n      options = prop.options;\r\n      vm._props[path] = prop;\r\n      if (inlineProps && hasOwn(inlineProps, path)) {\r\n        initProp(vm, prop, inlineProps[path]);\r\n      }if (raw === null) {\r\n        // initialize absent prop\r\n        initProp(vm, prop, undefined);\r\n      } else if (prop.dynamic) {\r\n        // dynamic prop\r\n        if (prop.mode === propBindingModes.ONE_TIME) {\r\n          // one time binding\r\n          value = (scope || vm._context || vm).$get(prop.parentPath);\r\n          initProp(vm, prop, value);\r\n        } else {\r\n          if (vm._context) {\r\n            // dynamic binding\r\n            vm._bindDir({\r\n              name: 'prop',\r\n              def: propDef,\r\n              prop: prop\r\n            }, null, null, scope); // el, host, scope\r\n          } else {\r\n              // root instance\r\n              initProp(vm, prop, vm.$get(prop.parentPath));\r\n            }\r\n        }\r\n      } else if (prop.optimizedLiteral) {\r\n        // optimized literal, cast it and just set once\r\n        var stripped = stripQuotes(raw);\r\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\r\n        initProp(vm, prop, value);\r\n      } else {\r\n        // string literal, but we need to cater for\r\n        // Boolean props with no value, or with same\r\n        // literal value (e.g. disabled=\"disabled\")\r\n        // see https://github.com/vuejs/vue-loader/issues/182\r\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\r\n        initProp(vm, prop, value);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Process a prop with a rawValue, applying necessary coersions,\r\n * default values & assertions and call the given callback with\r\n * processed value.\r\n *\r\n * @param {Vue} vm\r\n * @param {Object} prop\r\n * @param {*} rawValue\r\n * @param {Function} fn\r\n */\r\n\r\nfunction processPropValue(vm, prop, rawValue, fn) {\r\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\r\n  var value = rawValue;\r\n  if (value === undefined) {\r\n    value = getPropDefaultValue(vm, prop);\r\n  }\r\n  value = coerceProp(prop, value, vm);\r\n  var coerced = value !== rawValue;\r\n  if (!assertProp(prop, value, vm)) {\r\n    value = undefined;\r\n  }\r\n  if (isSimple && !coerced) {\r\n    withoutConversion(function () {\r\n      fn(value);\r\n    });\r\n  } else {\r\n    fn(value);\r\n  }\r\n}\r\n\r\n/**\r\n * Set a prop's initial value on a vm and its data object.\r\n *\r\n * @param {Vue} vm\r\n * @param {Object} prop\r\n * @param {*} value\r\n */\r\n\r\nfunction initProp(vm, prop, value) {\r\n  processPropValue(vm, prop, value, function (value) {\r\n    defineReactive(vm, prop.path, value);\r\n  });\r\n}\r\n\r\n/**\r\n * Update a prop's value on a vm.\r\n *\r\n * @param {Vue} vm\r\n * @param {Object} prop\r\n * @param {*} value\r\n */\r\n\r\nfunction updateProp(vm, prop, value) {\r\n  processPropValue(vm, prop, value, function (value) {\r\n    vm[prop.path] = value;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the default value of a prop.\r\n *\r\n * @param {Vue} vm\r\n * @param {Object} prop\r\n * @return {*}\r\n */\r\n\r\nfunction getPropDefaultValue(vm, prop) {\r\n  // no default, return undefined\r\n  var options = prop.options;\r\n  if (!hasOwn(options, 'default')) {\r\n    // absent boolean value defaults to false\r\n    return options.type === Boolean ? false : undefined;\r\n  }\r\n  var def = options['default'];\r\n  // warn against non-factory defaults for Object & Array\r\n  if (isObject(def)) {\r\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\r\n  }\r\n  // call factory function for non-Function types\r\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\r\n}\r\n\r\n/**\r\n * Assert whether a prop is valid.\r\n *\r\n * @param {Object} prop\r\n * @param {*} value\r\n * @param {Vue} vm\r\n */\r\n\r\nfunction assertProp(prop, value, vm) {\r\n  if (!prop.options.required && ( // non-required\r\n  prop.raw === null || // abscent\r\n  value == null) // null or undefined\r\n  ) {\r\n      return true;\r\n    }\r\n  var options = prop.options;\r\n  var type = options.type;\r\n  var valid = !type;\r\n  var expectedTypes = [];\r\n  if (type) {\r\n    if (!isArray(type)) {\r\n      type = [type];\r\n    }\r\n    for (var i = 0; i < type.length && !valid; i++) {\r\n      var assertedType = assertType(value, type[i]);\r\n      expectedTypes.push(assertedType.expectedType);\r\n      valid = assertedType.valid;\r\n    }\r\n  }\r\n  if (!valid) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\r\n    }\r\n    return false;\r\n  }\r\n  var validator = options.validator;\r\n  if (validator) {\r\n    if (!validator(value)) {\r\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Force parsing value with coerce option.\r\n *\r\n * @param {*} value\r\n * @param {Object} options\r\n * @return {*}\r\n */\r\n\r\nfunction coerceProp(prop, value, vm) {\r\n  var coerce = prop.options.coerce;\r\n  if (!coerce) {\r\n    return value;\r\n  }\r\n  if (typeof coerce === 'function') {\r\n    return coerce(value);\r\n  } else {\r\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\r\n    return value;\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the type of a value\r\n *\r\n * @param {*} value\r\n * @param {Function} type\r\n * @return {Object}\r\n */\r\n\r\nfunction assertType(value, type) {\r\n  var valid;\r\n  var expectedType;\r\n  if (type === String) {\r\n    expectedType = 'string';\r\n    valid = typeof value === expectedType;\r\n  } else if (type === Number) {\r\n    expectedType = 'number';\r\n    valid = typeof value === expectedType;\r\n  } else if (type === Boolean) {\r\n    expectedType = 'boolean';\r\n    valid = typeof value === expectedType;\r\n  } else if (type === Function) {\r\n    expectedType = 'function';\r\n    valid = typeof value === expectedType;\r\n  } else if (type === Object) {\r\n    expectedType = 'object';\r\n    valid = isPlainObject(value);\r\n  } else if (type === Array) {\r\n    expectedType = 'array';\r\n    valid = isArray(value);\r\n  } else {\r\n    valid = value instanceof type;\r\n  }\r\n  return {\r\n    valid: valid,\r\n    expectedType: expectedType\r\n  };\r\n}\r\n\r\n/**\r\n * Format type for output\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n */\r\n\r\nfunction formatType(type) {\r\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\r\n}\r\n\r\n/**\r\n * Format value\r\n *\r\n * @param {*} value\r\n * @return {String}\r\n */\r\n\r\nfunction formatValue(val) {\r\n  return Object.prototype.toString.call(val).slice(8, -1);\r\n}\r\n\r\nvar bindingModes = config._propBindingModes;\r\n\r\nvar propDef = {\r\n\r\n  bind: function bind() {\r\n    var child = this.vm;\r\n    var parent = child._context;\r\n    // passed in from compiler directly\r\n    var prop = this.descriptor.prop;\r\n    var childKey = prop.path;\r\n    var parentKey = prop.parentPath;\r\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\r\n\r\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\r\n      updateProp(child, prop, val);\r\n    }, {\r\n      twoWay: twoWay,\r\n      filters: prop.filters,\r\n      // important: props need to be observed on the\r\n      // v-for scope if present\r\n      scope: this._scope\r\n    });\r\n\r\n    // set the child initial value.\r\n    initProp(child, prop, parentWatcher.value);\r\n\r\n    // setup two-way binding\r\n    if (twoWay) {\r\n      // important: defer the child watcher creation until\r\n      // the created hook (after data observation)\r\n      var self = this;\r\n      child.$once('pre-hook:created', function () {\r\n        self.childWatcher = new Watcher(child, childKey, function (val) {\r\n          parentWatcher.set(val);\r\n        }, {\r\n          // ensure sync upward before parent sync down.\r\n          // this is necessary in cases e.g. the child\r\n          // mutates a prop array, then replaces it. (#1683)\r\n          sync: true\r\n        });\r\n      });\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    this.parentWatcher.teardown();\r\n    if (this.childWatcher) {\r\n      this.childWatcher.teardown();\r\n    }\r\n  }\r\n};\r\n\r\nvar queue$1 = [];\r\nvar queued = false;\r\n\r\n/**\r\n * Push a job into the queue.\r\n *\r\n * @param {Function} job\r\n */\r\n\r\nfunction pushJob(job) {\r\n  queue$1.push(job);\r\n  if (!queued) {\r\n    queued = true;\r\n    nextTick(flush);\r\n  }\r\n}\r\n\r\n/**\r\n * Flush the queue, and do one forced reflow before\r\n * triggering transitions.\r\n */\r\n\r\nfunction flush() {\r\n  // Force layout\r\n  var f = document.documentElement.offsetHeight;\r\n  for (var i = 0; i < queue$1.length; i++) {\r\n    queue$1[i]();\r\n  }\r\n  queue$1 = [];\r\n  queued = false;\r\n  // dummy return, so js linters don't complain about\r\n  // unused variable f\r\n  return f;\r\n}\r\n\r\nvar TYPE_TRANSITION = 'transition';\r\nvar TYPE_ANIMATION = 'animation';\r\nvar transDurationProp = transitionProp + 'Duration';\r\nvar animDurationProp = animationProp + 'Duration';\r\n\r\n/**\r\n * If a just-entered element is applied the\r\n * leave class while its enter transition hasn't started yet,\r\n * and the transitioned property has the same value for both\r\n * enter/leave, then the leave transition will be skipped and\r\n * the transitionend event never fires. This function ensures\r\n * its callback to be called after a transition has started\r\n * by waiting for double raf.\r\n *\r\n * It falls back to setTimeout on devices that support CSS\r\n * transitions but not raf (e.g. Android 4.2 browser) - since\r\n * these environments are usually slow, we are giving it a\r\n * relatively large timeout.\r\n */\r\n\r\nvar raf = inBrowser && window.requestAnimationFrame;\r\nvar waitForTransitionStart = raf\r\n/* istanbul ignore next */\r\n? function (fn) {\r\n  raf(function () {\r\n    raf(fn);\r\n  });\r\n} : function (fn) {\r\n  setTimeout(fn, 50);\r\n};\r\n\r\n/**\r\n * A Transition object that encapsulates the state and logic\r\n * of the transition.\r\n *\r\n * @param {Element} el\r\n * @param {String} id\r\n * @param {Object} hooks\r\n * @param {Vue} vm\r\n */\r\nfunction Transition(el, id, hooks, vm) {\r\n  this.id = id;\r\n  this.el = el;\r\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\r\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\r\n  this.hooks = hooks;\r\n  this.vm = vm;\r\n  // async state\r\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\r\n  this.justEntered = false;\r\n  this.entered = this.left = false;\r\n  this.typeCache = {};\r\n  // check css transition type\r\n  this.type = hooks && hooks.type;\r\n  /* istanbul ignore if */\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\r\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\r\n    }\r\n  }\r\n  // bind\r\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\r\n    self[m] = bind(self[m], self);\r\n  });\r\n}\r\n\r\nvar p$1 = Transition.prototype;\r\n\r\n/**\r\n * Start an entering transition.\r\n *\r\n * 1. enter transition triggered\r\n * 2. call beforeEnter hook\r\n * 3. add enter class\r\n * 4. insert/show element\r\n * 5. call enter hook (with possible explicit js callback)\r\n * 6. reflow\r\n * 7. based on transition type:\r\n *    - transition:\r\n *        remove class now, wait for transitionend,\r\n *        then done if there's no explicit js callback.\r\n *    - animation:\r\n *        wait for animationend, remove class,\r\n *        then done if there's no explicit js callback.\r\n *    - no css transition:\r\n *        done now if there's no explicit js callback.\r\n * 8. wait for either done or js callback, then call\r\n *    afterEnter hook.\r\n *\r\n * @param {Function} op - insert/show the element\r\n * @param {Function} [cb]\r\n */\r\n\r\np$1.enter = function (op, cb) {\r\n  this.cancelPending();\r\n  this.callHook('beforeEnter');\r\n  this.cb = cb;\r\n  addClass(this.el, this.enterClass);\r\n  op();\r\n  this.entered = false;\r\n  this.callHookWithCb('enter');\r\n  if (this.entered) {\r\n    return; // user called done synchronously.\r\n  }\r\n  this.cancel = this.hooks && this.hooks.enterCancelled;\r\n  pushJob(this.enterNextTick);\r\n};\r\n\r\n/**\r\n * The \"nextTick\" phase of an entering transition, which is\r\n * to be pushed into a queue and executed after a reflow so\r\n * that removing the class can trigger a CSS transition.\r\n */\r\n\r\np$1.enterNextTick = function () {\r\n  var _this = this;\r\n\r\n  // prevent transition skipping\r\n  this.justEntered = true;\r\n  waitForTransitionStart(function () {\r\n    _this.justEntered = false;\r\n  });\r\n  var enterDone = this.enterDone;\r\n  var type = this.getCssTransitionType(this.enterClass);\r\n  if (!this.pendingJsCb) {\r\n    if (type === TYPE_TRANSITION) {\r\n      // trigger transition by removing enter class now\r\n      removeClass(this.el, this.enterClass);\r\n      this.setupCssCb(transitionEndEvent, enterDone);\r\n    } else if (type === TYPE_ANIMATION) {\r\n      this.setupCssCb(animationEndEvent, enterDone);\r\n    } else {\r\n      enterDone();\r\n    }\r\n  } else if (type === TYPE_TRANSITION) {\r\n    removeClass(this.el, this.enterClass);\r\n  }\r\n};\r\n\r\n/**\r\n * The \"cleanup\" phase of an entering transition.\r\n */\r\n\r\np$1.enterDone = function () {\r\n  this.entered = true;\r\n  this.cancel = this.pendingJsCb = null;\r\n  removeClass(this.el, this.enterClass);\r\n  this.callHook('afterEnter');\r\n  if (this.cb) this.cb();\r\n};\r\n\r\n/**\r\n * Start a leaving transition.\r\n *\r\n * 1. leave transition triggered.\r\n * 2. call beforeLeave hook\r\n * 3. add leave class (trigger css transition)\r\n * 4. call leave hook (with possible explicit js callback)\r\n * 5. reflow if no explicit js callback is provided\r\n * 6. based on transition type:\r\n *    - transition or animation:\r\n *        wait for end event, remove class, then done if\r\n *        there's no explicit js callback.\r\n *    - no css transition:\r\n *        done if there's no explicit js callback.\r\n * 7. wait for either done or js callback, then call\r\n *    afterLeave hook.\r\n *\r\n * @param {Function} op - remove/hide the element\r\n * @param {Function} [cb]\r\n */\r\n\r\np$1.leave = function (op, cb) {\r\n  this.cancelPending();\r\n  this.callHook('beforeLeave');\r\n  this.op = op;\r\n  this.cb = cb;\r\n  addClass(this.el, this.leaveClass);\r\n  this.left = false;\r\n  this.callHookWithCb('leave');\r\n  if (this.left) {\r\n    return; // user called done synchronously.\r\n  }\r\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\r\n  // only need to handle leaveDone if\r\n  // 1. the transition is already done (synchronously called\r\n  //    by the user, which causes this.op set to null)\r\n  // 2. there's no explicit js callback\r\n  if (this.op && !this.pendingJsCb) {\r\n    // if a CSS transition leaves immediately after enter,\r\n    // the transitionend event never fires. therefore we\r\n    // detect such cases and end the leave immediately.\r\n    if (this.justEntered) {\r\n      this.leaveDone();\r\n    } else {\r\n      pushJob(this.leaveNextTick);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * The \"nextTick\" phase of a leaving transition.\r\n */\r\n\r\np$1.leaveNextTick = function () {\r\n  var type = this.getCssTransitionType(this.leaveClass);\r\n  if (type) {\r\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\r\n    this.setupCssCb(event, this.leaveDone);\r\n  } else {\r\n    this.leaveDone();\r\n  }\r\n};\r\n\r\n/**\r\n * The \"cleanup\" phase of a leaving transition.\r\n */\r\n\r\np$1.leaveDone = function () {\r\n  this.left = true;\r\n  this.cancel = this.pendingJsCb = null;\r\n  this.op();\r\n  removeClass(this.el, this.leaveClass);\r\n  this.callHook('afterLeave');\r\n  if (this.cb) this.cb();\r\n  this.op = null;\r\n};\r\n\r\n/**\r\n * Cancel any pending callbacks from a previously running\r\n * but not finished transition.\r\n */\r\n\r\np$1.cancelPending = function () {\r\n  this.op = this.cb = null;\r\n  var hasPending = false;\r\n  if (this.pendingCssCb) {\r\n    hasPending = true;\r\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\r\n    this.pendingCssEvent = this.pendingCssCb = null;\r\n  }\r\n  if (this.pendingJsCb) {\r\n    hasPending = true;\r\n    this.pendingJsCb.cancel();\r\n    this.pendingJsCb = null;\r\n  }\r\n  if (hasPending) {\r\n    removeClass(this.el, this.enterClass);\r\n    removeClass(this.el, this.leaveClass);\r\n  }\r\n  if (this.cancel) {\r\n    this.cancel.call(this.vm, this.el);\r\n    this.cancel = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Call a user-provided synchronous hook function.\r\n *\r\n * @param {String} type\r\n */\r\n\r\np$1.callHook = function (type) {\r\n  if (this.hooks && this.hooks[type]) {\r\n    this.hooks[type].call(this.vm, this.el);\r\n  }\r\n};\r\n\r\n/**\r\n * Call a user-provided, potentially-async hook function.\r\n * We check for the length of arguments to see if the hook\r\n * expects a `done` callback. If true, the transition's end\r\n * will be determined by when the user calls that callback;\r\n * otherwise, the end is determined by the CSS transition or\r\n * animation.\r\n *\r\n * @param {String} type\r\n */\r\n\r\np$1.callHookWithCb = function (type) {\r\n  var hook = this.hooks && this.hooks[type];\r\n  if (hook) {\r\n    if (hook.length > 1) {\r\n      this.pendingJsCb = cancellable(this[type + 'Done']);\r\n    }\r\n    hook.call(this.vm, this.el, this.pendingJsCb);\r\n  }\r\n};\r\n\r\n/**\r\n * Get an element's transition type based on the\r\n * calculated styles.\r\n *\r\n * @param {String} className\r\n * @return {Number}\r\n */\r\n\r\np$1.getCssTransitionType = function (className) {\r\n  /* istanbul ignore if */\r\n  if (!transitionEndEvent ||\r\n  // skip CSS transitions if page is not visible -\r\n  // this solves the issue of transitionend events not\r\n  // firing until the page is visible again.\r\n  // pageVisibility API is supported in IE10+, same as\r\n  // CSS transitions.\r\n  document.hidden ||\r\n  // explicit js-only transition\r\n  this.hooks && this.hooks.css === false ||\r\n  // element is hidden\r\n  isHidden(this.el)) {\r\n    return;\r\n  }\r\n  var type = this.type || this.typeCache[className];\r\n  if (type) return type;\r\n  var inlineStyles = this.el.style;\r\n  var computedStyles = window.getComputedStyle(this.el);\r\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\r\n  if (transDuration && transDuration !== '0s') {\r\n    type = TYPE_TRANSITION;\r\n  } else {\r\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\r\n    if (animDuration && animDuration !== '0s') {\r\n      type = TYPE_ANIMATION;\r\n    }\r\n  }\r\n  if (type) {\r\n    this.typeCache[className] = type;\r\n  }\r\n  return type;\r\n};\r\n\r\n/**\r\n * Setup a CSS transitionend/animationend callback.\r\n *\r\n * @param {String} event\r\n * @param {Function} cb\r\n */\r\n\r\np$1.setupCssCb = function (event, cb) {\r\n  this.pendingCssEvent = event;\r\n  var self = this;\r\n  var el = this.el;\r\n  var onEnd = this.pendingCssCb = function (e) {\r\n    if (e.target === el) {\r\n      off(el, event, onEnd);\r\n      self.pendingCssEvent = self.pendingCssCb = null;\r\n      if (!self.pendingJsCb && cb) {\r\n        cb();\r\n      }\r\n    }\r\n  };\r\n  on(el, event, onEnd);\r\n};\r\n\r\n/**\r\n * Check if an element is hidden - in that case we can just\r\n * skip the transition alltogether.\r\n *\r\n * @param {Element} el\r\n * @return {Boolean}\r\n */\r\n\r\nfunction isHidden(el) {\r\n  if (/svg$/.test(el.namespaceURI)) {\r\n    // SVG elements do not have offset(Width|Height)\r\n    // so we need to check the client rect\r\n    var rect = el.getBoundingClientRect();\r\n    return !(rect.width || rect.height);\r\n  } else {\r\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\r\n  }\r\n}\r\n\r\nvar transition$1 = {\r\n\r\n  priority: TRANSITION,\r\n\r\n  update: function update(id, oldId) {\r\n    var el = this.el;\r\n    // resolve on owner vm\r\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\r\n    id = id || 'v';\r\n    oldId = oldId || 'v';\r\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\r\n    removeClass(el, oldId + '-transition');\r\n    addClass(el, id + '-transition');\r\n  }\r\n};\r\n\r\nvar internalDirectives = {\r\n  style: style,\r\n  'class': vClass,\r\n  component: component,\r\n  prop: propDef,\r\n  transition: transition$1\r\n};\r\n\r\n// special binding prefixes\r\nvar bindRE = /^v-bind:|^:/;\r\nvar onRE = /^v-on:|^@/;\r\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\r\nvar modifierRE = /\\.[^\\.]+/g;\r\nvar transitionRE = /^(v-bind:|:)?transition$/;\r\n\r\n// default directive priority\r\nvar DEFAULT_PRIORITY = 1000;\r\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\r\n\r\n/**\r\n * Compile a template and return a reusable composite link\r\n * function, which recursively contains more link functions\r\n * inside. This top level compile function would normally\r\n * be called on instance root nodes, but can also be used\r\n * for partial compilation if the partial argument is true.\r\n *\r\n * The returned composite link function, when called, will\r\n * return an unlink function that tearsdown all directives\r\n * created during the linking phase.\r\n *\r\n * @param {Element|DocumentFragment} el\r\n * @param {Object} options\r\n * @param {Boolean} partial\r\n * @return {Function}\r\n */\r\n\r\nfunction compile(el, options, partial) {\r\n  // link function for the node itself.\r\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\r\n  // link function for the childNodes\r\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\r\n\r\n  /**\r\n   * A composite linker function to be called on a already\r\n   * compiled piece of DOM, which instantiates all directive\r\n   * instances.\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {Element|DocumentFragment} el\r\n   * @param {Vue} [host] - host vm of transcluded content\r\n   * @param {Object} [scope] - v-for scope\r\n   * @param {Fragment} [frag] - link context fragment\r\n   * @return {Function|undefined}\r\n   */\r\n\r\n  return function compositeLinkFn(vm, el, host, scope, frag) {\r\n    // cache childNodes before linking parent, fix #657\r\n    var childNodes = toArray(el.childNodes);\r\n    // link\r\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\r\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\r\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\r\n    }, vm);\r\n    return makeUnlinkFn(vm, dirs);\r\n  };\r\n}\r\n\r\n/**\r\n * Apply a linker to a vm/element pair and capture the\r\n * directives created during the process.\r\n *\r\n * @param {Function} linker\r\n * @param {Vue} vm\r\n */\r\n\r\nfunction linkAndCapture(linker, vm) {\r\n  /* istanbul ignore if */\r\n  if (process.env.NODE_ENV === 'production') {\r\n    // reset directives before every capture in production\r\n    // mode, so that when unlinking we don't need to splice\r\n    // them out (which turns out to be a perf hit).\r\n    // they are kept in development mode because they are\r\n    // useful for Vue's own tests.\r\n    vm._directives = [];\r\n  }\r\n  var originalDirCount = vm._directives.length;\r\n  linker();\r\n  var dirs = vm._directives.slice(originalDirCount);\r\n  sortDirectives(dirs);\r\n  for (var i = 0, l = dirs.length; i < l; i++) {\r\n    dirs[i]._bind();\r\n  }\r\n  return dirs;\r\n}\r\n\r\n/**\r\n * sort directives by priority (stable sort)\r\n *\r\n * @param {Array} dirs\r\n */\r\nfunction sortDirectives(dirs) {\r\n  if (dirs.length === 0) return;\r\n\r\n  var groupedMap = {};\r\n  var i, j, k, l;\r\n  var index = 0;\r\n  var priorities = [];\r\n  for (i = 0, j = dirs.length; i < j; i++) {\r\n    var dir = dirs[i];\r\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\r\n    var array = groupedMap[priority];\r\n    if (!array) {\r\n      array = groupedMap[priority] = [];\r\n      priorities.push(priority);\r\n    }\r\n    array.push(dir);\r\n  }\r\n\r\n  priorities.sort(function (a, b) {\r\n    return a > b ? -1 : a === b ? 0 : 1;\r\n  });\r\n  for (i = 0, j = priorities.length; i < j; i++) {\r\n    var group = groupedMap[priorities[i]];\r\n    for (k = 0, l = group.length; k < l; k++) {\r\n      dirs[index++] = group[k];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Linker functions return an unlink function that\r\n * tearsdown all directives instances generated during\r\n * the process.\r\n *\r\n * We create unlink functions with only the necessary\r\n * information to avoid retaining additional closures.\r\n *\r\n * @param {Vue} vm\r\n * @param {Array} dirs\r\n * @param {Vue} [context]\r\n * @param {Array} [contextDirs]\r\n * @return {Function}\r\n */\r\n\r\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\r\n  function unlink(destroying) {\r\n    teardownDirs(vm, dirs, destroying);\r\n    if (context && contextDirs) {\r\n      teardownDirs(context, contextDirs);\r\n    }\r\n  }\r\n  // expose linked directives\r\n  unlink.dirs = dirs;\r\n  return unlink;\r\n}\r\n\r\n/**\r\n * Teardown partial linked directives.\r\n *\r\n * @param {Vue} vm\r\n * @param {Array} dirs\r\n * @param {Boolean} destroying\r\n */\r\n\r\nfunction teardownDirs(vm, dirs, destroying) {\r\n  var i = dirs.length;\r\n  while (i--) {\r\n    dirs[i]._teardown();\r\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\r\n      vm._directives.$remove(dirs[i]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Compile link props on an instance.\r\n *\r\n * @param {Vue} vm\r\n * @param {Element} el\r\n * @param {Object} props\r\n * @param {Object} [scope]\r\n * @return {Function}\r\n */\r\n\r\nfunction compileAndLinkProps(vm, el, props, scope) {\r\n  var propsLinkFn = compileProps(el, props, vm);\r\n  var propDirs = linkAndCapture(function () {\r\n    propsLinkFn(vm, scope);\r\n  }, vm);\r\n  return makeUnlinkFn(vm, propDirs);\r\n}\r\n\r\n/**\r\n * Compile the root element of an instance.\r\n *\r\n * 1. attrs on context container (context scope)\r\n * 2. attrs on the component template root node, if\r\n *    replace:true (child scope)\r\n *\r\n * If this is a fragment instance, we only need to compile 1.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @param {Object} contextOptions\r\n * @return {Function}\r\n */\r\n\r\nfunction compileRoot(el, options, contextOptions) {\r\n  var containerAttrs = options._containerAttrs;\r\n  var replacerAttrs = options._replacerAttrs;\r\n  var contextLinkFn, replacerLinkFn;\r\n\r\n  // only need to compile other attributes for\r\n  // non-fragment instances\r\n  if (el.nodeType !== 11) {\r\n    // for components, container and replacer need to be\r\n    // compiled separately and linked in different scopes.\r\n    if (options._asComponent) {\r\n      // 2. container attributes\r\n      if (containerAttrs && contextOptions) {\r\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\r\n      }\r\n      if (replacerAttrs) {\r\n        // 3. replacer attributes\r\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\r\n      }\r\n    } else {\r\n      // non-component, just compile as a normal element.\r\n      replacerLinkFn = compileDirectives(el.attributes, options);\r\n    }\r\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\r\n    // warn container directives for fragment instances\r\n    var names = containerAttrs.filter(function (attr) {\r\n      // allow vue-loader/vueify scoped css attributes\r\n      return attr.name.indexOf('_v-') < 0 &&\r\n      // allow event listeners\r\n      !onRE.test(attr.name) &&\r\n      // allow slots\r\n      attr.name !== 'slot';\r\n    }).map(function (attr) {\r\n      return '\"' + attr.name + '\"';\r\n    });\r\n    if (names.length) {\r\n      var plural = names.length > 1;\r\n\r\n      var componentName = options.el.tagName.toLowerCase();\r\n      if (componentName === 'component' && options.name) {\r\n        componentName += ':' + options.name;\r\n      }\r\n\r\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\r\n    }\r\n  }\r\n\r\n  options._containerAttrs = options._replacerAttrs = null;\r\n  return function rootLinkFn(vm, el, scope) {\r\n    // link context scope dirs\r\n    var context = vm._context;\r\n    var contextDirs;\r\n    if (context && contextLinkFn) {\r\n      contextDirs = linkAndCapture(function () {\r\n        contextLinkFn(context, el, null, scope);\r\n      }, context);\r\n    }\r\n\r\n    // link self\r\n    var selfDirs = linkAndCapture(function () {\r\n      if (replacerLinkFn) replacerLinkFn(vm, el);\r\n    }, vm);\r\n\r\n    // return the unlink function that tearsdown context\r\n    // container directives.\r\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\r\n  };\r\n}\r\n\r\n/**\r\n * Compile a node and return a nodeLinkFn based on the\r\n * node type.\r\n *\r\n * @param {Node} node\r\n * @param {Object} options\r\n * @return {Function|null}\r\n */\r\n\r\nfunction compileNode(node, options) {\r\n  var type = node.nodeType;\r\n  if (type === 1 && !isScript(node)) {\r\n    return compileElement(node, options);\r\n  } else if (type === 3 && node.data.trim()) {\r\n    return compileTextNode(node, options);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Compile an element and return a nodeLinkFn.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Function|null}\r\n */\r\n\r\nfunction compileElement(el, options) {\r\n  // preprocess textareas.\r\n  // textarea treats its text content as the initial value.\r\n  // just bind it as an attr directive for value.\r\n  if (el.tagName === 'TEXTAREA') {\r\n    // a textarea which has v-pre attr should skip complie.\r\n    if (getAttr(el, 'v-pre') !== null) {\r\n      return skip;\r\n    }\r\n    var tokens = parseText(el.value);\r\n    if (tokens) {\r\n      el.setAttribute(':value', tokensToExp(tokens));\r\n      el.value = '';\r\n    }\r\n  }\r\n  var linkFn;\r\n  var hasAttrs = el.hasAttributes();\r\n  var attrs = hasAttrs && toArray(el.attributes);\r\n  // check terminal directives (for & if)\r\n  if (hasAttrs) {\r\n    linkFn = checkTerminalDirectives(el, attrs, options);\r\n  }\r\n  // check element directives\r\n  if (!linkFn) {\r\n    linkFn = checkElementDirectives(el, options);\r\n  }\r\n  // check component\r\n  if (!linkFn) {\r\n    linkFn = checkComponent(el, options);\r\n  }\r\n  // normal directives\r\n  if (!linkFn && hasAttrs) {\r\n    linkFn = compileDirectives(attrs, options);\r\n  }\r\n  return linkFn;\r\n}\r\n\r\n/**\r\n * Compile a textNode and return a nodeLinkFn.\r\n *\r\n * @param {TextNode} node\r\n * @param {Object} options\r\n * @return {Function|null} textNodeLinkFn\r\n */\r\n\r\nfunction compileTextNode(node, options) {\r\n  // skip marked text nodes\r\n  if (node._skip) {\r\n    return removeText;\r\n  }\r\n\r\n  var tokens = parseText(node.wholeText);\r\n  if (!tokens) {\r\n    return null;\r\n  }\r\n\r\n  // mark adjacent text nodes as skipped,\r\n  // because we are using node.wholeText to compile\r\n  // all adjacent text nodes together. This fixes\r\n  // issues in IE where sometimes it splits up a single\r\n  // text node into multiple ones.\r\n  var next = node.nextSibling;\r\n  while (next && next.nodeType === 3) {\r\n    next._skip = true;\r\n    next = next.nextSibling;\r\n  }\r\n\r\n  var frag = document.createDocumentFragment();\r\n  var el, token;\r\n  for (var i = 0, l = tokens.length; i < l; i++) {\r\n    token = tokens[i];\r\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\r\n    frag.appendChild(el);\r\n  }\r\n  return makeTextNodeLinkFn(tokens, frag, options);\r\n}\r\n\r\n/**\r\n * Linker for an skipped text node.\r\n *\r\n * @param {Vue} vm\r\n * @param {Text} node\r\n */\r\n\r\nfunction removeText(vm, node) {\r\n  remove(node);\r\n}\r\n\r\n/**\r\n * Process a single text token.\r\n *\r\n * @param {Object} token\r\n * @param {Object} options\r\n * @return {Node}\r\n */\r\n\r\nfunction processTextToken(token, options) {\r\n  var el;\r\n  if (token.oneTime) {\r\n    el = document.createTextNode(token.value);\r\n  } else {\r\n    if (token.html) {\r\n      el = document.createComment('v-html');\r\n      setTokenType('html');\r\n    } else {\r\n      // IE will clean up empty textNodes during\r\n      // frag.cloneNode(true), so we have to give it\r\n      // something here...\r\n      el = document.createTextNode(' ');\r\n      setTokenType('text');\r\n    }\r\n  }\r\n  function setTokenType(type) {\r\n    if (token.descriptor) return;\r\n    var parsed = parseDirective(token.value);\r\n    token.descriptor = {\r\n      name: type,\r\n      def: directives[type],\r\n      expression: parsed.expression,\r\n      filters: parsed.filters\r\n    };\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * Build a function that processes a textNode.\r\n *\r\n * @param {Array<Object>} tokens\r\n * @param {DocumentFragment} frag\r\n */\r\n\r\nfunction makeTextNodeLinkFn(tokens, frag) {\r\n  return function textNodeLinkFn(vm, el, host, scope) {\r\n    var fragClone = frag.cloneNode(true);\r\n    var childNodes = toArray(fragClone.childNodes);\r\n    var token, value, node;\r\n    for (var i = 0, l = tokens.length; i < l; i++) {\r\n      token = tokens[i];\r\n      value = token.value;\r\n      if (token.tag) {\r\n        node = childNodes[i];\r\n        if (token.oneTime) {\r\n          value = (scope || vm).$eval(value);\r\n          if (token.html) {\r\n            replace(node, parseTemplate(value, true));\r\n          } else {\r\n            node.data = _toString(value);\r\n          }\r\n        } else {\r\n          vm._bindDir(token.descriptor, node, host, scope);\r\n        }\r\n      }\r\n    }\r\n    replace(el, fragClone);\r\n  };\r\n}\r\n\r\n/**\r\n * Compile a node list and return a childLinkFn.\r\n *\r\n * @param {NodeList} nodeList\r\n * @param {Object} options\r\n * @return {Function|undefined}\r\n */\r\n\r\nfunction compileNodeList(nodeList, options) {\r\n  var linkFns = [];\r\n  var nodeLinkFn, childLinkFn, node;\r\n  for (var i = 0, l = nodeList.length; i < l; i++) {\r\n    node = nodeList[i];\r\n    nodeLinkFn = compileNode(node, options);\r\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\r\n    linkFns.push(nodeLinkFn, childLinkFn);\r\n  }\r\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\r\n}\r\n\r\n/**\r\n * Make a child link function for a node's childNodes.\r\n *\r\n * @param {Array<Function>} linkFns\r\n * @return {Function} childLinkFn\r\n */\r\n\r\nfunction makeChildLinkFn(linkFns) {\r\n  return function childLinkFn(vm, nodes, host, scope, frag) {\r\n    var node, nodeLinkFn, childrenLinkFn;\r\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\r\n      node = nodes[n];\r\n      nodeLinkFn = linkFns[i++];\r\n      childrenLinkFn = linkFns[i++];\r\n      // cache childNodes before linking parent, fix #657\r\n      var childNodes = toArray(node.childNodes);\r\n      if (nodeLinkFn) {\r\n        nodeLinkFn(vm, node, host, scope, frag);\r\n      }\r\n      if (childrenLinkFn) {\r\n        childrenLinkFn(vm, childNodes, host, scope, frag);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Check for element directives (custom elements that should\r\n * be resovled as terminal directives).\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n */\r\n\r\nfunction checkElementDirectives(el, options) {\r\n  var tag = el.tagName.toLowerCase();\r\n  if (commonTagRE.test(tag)) {\r\n    return;\r\n  }\r\n  var def = resolveAsset(options, 'elementDirectives', tag);\r\n  if (def) {\r\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\r\n  }\r\n}\r\n\r\n/**\r\n * Check if an element is a component. If yes, return\r\n * a component link function.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Function|undefined}\r\n */\r\n\r\nfunction checkComponent(el, options) {\r\n  var component = checkComponentAttr(el, options);\r\n  if (component) {\r\n    var ref = findRef(el);\r\n    var descriptor = {\r\n      name: 'component',\r\n      ref: ref,\r\n      expression: component.id,\r\n      def: internalDirectives.component,\r\n      modifiers: {\r\n        literal: !component.dynamic\r\n      }\r\n    };\r\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\r\n      if (ref) {\r\n        defineReactive((scope || vm).$refs, ref, null);\r\n      }\r\n      vm._bindDir(descriptor, el, host, scope, frag);\r\n    };\r\n    componentLinkFn.terminal = true;\r\n    return componentLinkFn;\r\n  }\r\n}\r\n\r\n/**\r\n * Check an element for terminal directives in fixed order.\r\n * If it finds one, return a terminal link function.\r\n *\r\n * @param {Element} el\r\n * @param {Array} attrs\r\n * @param {Object} options\r\n * @return {Function} terminalLinkFn\r\n */\r\n\r\nfunction checkTerminalDirectives(el, attrs, options) {\r\n  // skip v-pre\r\n  if (getAttr(el, 'v-pre') !== null) {\r\n    return skip;\r\n  }\r\n  // skip v-else block, but only if following v-if\r\n  if (el.hasAttribute('v-else')) {\r\n    var prev = el.previousElementSibling;\r\n    if (prev && prev.hasAttribute('v-if')) {\r\n      return skip;\r\n    }\r\n  }\r\n\r\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\r\n  for (var i = 0, j = attrs.length; i < j; i++) {\r\n    attr = attrs[i];\r\n    name = attr.name.replace(modifierRE, '');\r\n    if (matched = name.match(dirAttrRE)) {\r\n      def = resolveAsset(options, 'directives', matched[1]);\r\n      if (def && def.terminal) {\r\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\r\n          termDef = def;\r\n          rawName = attr.name;\r\n          modifiers = parseModifiers(attr.name);\r\n          value = attr.value;\r\n          dirName = matched[1];\r\n          arg = matched[2];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (termDef) {\r\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\r\n  }\r\n}\r\n\r\nfunction skip() {}\r\nskip.terminal = true;\r\n\r\n/**\r\n * Build a node link function for a terminal directive.\r\n * A terminal link function terminates the current\r\n * compilation recursion and handles compilation of the\r\n * subtree in the directive.\r\n *\r\n * @param {Element} el\r\n * @param {String} dirName\r\n * @param {String} value\r\n * @param {Object} options\r\n * @param {Object} def\r\n * @param {String} [rawName]\r\n * @param {String} [arg]\r\n * @param {Object} [modifiers]\r\n * @return {Function} terminalLinkFn\r\n */\r\n\r\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\r\n  var parsed = parseDirective(value);\r\n  var descriptor = {\r\n    name: dirName,\r\n    arg: arg,\r\n    expression: parsed.expression,\r\n    filters: parsed.filters,\r\n    raw: value,\r\n    attr: rawName,\r\n    modifiers: modifiers,\r\n    def: def\r\n  };\r\n  // check ref for v-for, v-if and router-view\r\n  if (dirName === 'for' || dirName === 'router-view') {\r\n    descriptor.ref = findRef(el);\r\n  }\r\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\r\n    if (descriptor.ref) {\r\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\r\n    }\r\n    vm._bindDir(descriptor, el, host, scope, frag);\r\n  };\r\n  fn.terminal = true;\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Compile the directives on an element and return a linker.\r\n *\r\n * @param {Array|NamedNodeMap} attrs\r\n * @param {Object} options\r\n * @return {Function}\r\n */\r\n\r\nfunction compileDirectives(attrs, options) {\r\n  var i = attrs.length;\r\n  var dirs = [];\r\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\r\n  while (i--) {\r\n    attr = attrs[i];\r\n    name = rawName = attr.name;\r\n    value = rawValue = attr.value;\r\n    tokens = parseText(value);\r\n    // reset arg\r\n    arg = null;\r\n    // check modifiers\r\n    modifiers = parseModifiers(name);\r\n    name = name.replace(modifierRE, '');\r\n\r\n    // attribute interpolations\r\n    if (tokens) {\r\n      value = tokensToExp(tokens);\r\n      arg = name;\r\n      pushDir('bind', directives.bind, tokens);\r\n      // warn against mixing mustaches with v-bind\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\r\n          return attr.name === ':class' || attr.name === 'v-bind:class';\r\n        })) {\r\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\r\n        }\r\n      }\r\n    } else\r\n\r\n      // special attribute: transition\r\n      if (transitionRE.test(name)) {\r\n        modifiers.literal = !bindRE.test(name);\r\n        pushDir('transition', internalDirectives.transition);\r\n      } else\r\n\r\n        // event handlers\r\n        if (onRE.test(name)) {\r\n          arg = name.replace(onRE, '');\r\n          pushDir('on', directives.on);\r\n        } else\r\n\r\n          // attribute bindings\r\n          if (bindRE.test(name)) {\r\n            dirName = name.replace(bindRE, '');\r\n            if (dirName === 'style' || dirName === 'class') {\r\n              pushDir(dirName, internalDirectives[dirName]);\r\n            } else {\r\n              arg = dirName;\r\n              pushDir('bind', directives.bind);\r\n            }\r\n          } else\r\n\r\n            // normal directives\r\n            if (matched = name.match(dirAttrRE)) {\r\n              dirName = matched[1];\r\n              arg = matched[2];\r\n\r\n              // skip v-else (when used with v-show)\r\n              if (dirName === 'else') {\r\n                continue;\r\n              }\r\n\r\n              dirDef = resolveAsset(options, 'directives', dirName, true);\r\n              if (dirDef) {\r\n                pushDir(dirName, dirDef);\r\n              }\r\n            }\r\n  }\r\n\r\n  /**\r\n   * Push a directive.\r\n   *\r\n   * @param {String} dirName\r\n   * @param {Object|Function} def\r\n   * @param {Array} [interpTokens]\r\n   */\r\n\r\n  function pushDir(dirName, def, interpTokens) {\r\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\r\n    var parsed = !hasOneTimeToken && parseDirective(value);\r\n    dirs.push({\r\n      name: dirName,\r\n      attr: rawName,\r\n      raw: rawValue,\r\n      def: def,\r\n      arg: arg,\r\n      modifiers: modifiers,\r\n      // conversion from interpolation strings with one-time token\r\n      // to expression is differed until directive bind time so that we\r\n      // have access to the actual vm context for one-time bindings.\r\n      expression: parsed && parsed.expression,\r\n      filters: parsed && parsed.filters,\r\n      interp: interpTokens,\r\n      hasOneTime: hasOneTimeToken\r\n    });\r\n  }\r\n\r\n  if (dirs.length) {\r\n    return makeNodeLinkFn(dirs);\r\n  }\r\n}\r\n\r\n/**\r\n * Parse modifiers from directive attribute name.\r\n *\r\n * @param {String} name\r\n * @return {Object}\r\n */\r\n\r\nfunction parseModifiers(name) {\r\n  var res = Object.create(null);\r\n  var match = name.match(modifierRE);\r\n  if (match) {\r\n    var i = match.length;\r\n    while (i--) {\r\n      res[match[i].slice(1)] = true;\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Build a link function for all directives on a single node.\r\n *\r\n * @param {Array} directives\r\n * @return {Function} directivesLinkFn\r\n */\r\n\r\nfunction makeNodeLinkFn(directives) {\r\n  return function nodeLinkFn(vm, el, host, scope, frag) {\r\n    // reverse apply because it's sorted low to high\r\n    var i = directives.length;\r\n    while (i--) {\r\n      vm._bindDir(directives[i], el, host, scope, frag);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Check if an interpolation string contains one-time tokens.\r\n *\r\n * @param {Array} tokens\r\n * @return {Boolean}\r\n */\r\n\r\nfunction hasOneTime(tokens) {\r\n  var i = tokens.length;\r\n  while (i--) {\r\n    if (tokens[i].oneTime) return true;\r\n  }\r\n}\r\n\r\nfunction isScript(el) {\r\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\r\n}\r\n\r\nvar specialCharRE = /[^\\w\\-:\\.]/;\r\n\r\n/**\r\n * Process an element or a DocumentFragment based on a\r\n * instance option object. This allows us to transclude\r\n * a template node/fragment before the instance is created,\r\n * so the processed fragment can then be cloned and reused\r\n * in v-for.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Element|DocumentFragment}\r\n */\r\n\r\nfunction transclude(el, options) {\r\n  // extract container attributes to pass them down\r\n  // to compiler, because they need to be compiled in\r\n  // parent scope. we are mutating the options object here\r\n  // assuming the same object will be used for compile\r\n  // right after this.\r\n  if (options) {\r\n    options._containerAttrs = extractAttrs(el);\r\n  }\r\n  // for template tags, what we want is its content as\r\n  // a documentFragment (for fragment instances)\r\n  if (isTemplate(el)) {\r\n    el = parseTemplate(el);\r\n  }\r\n  if (options) {\r\n    if (options._asComponent && !options.template) {\r\n      options.template = '<slot></slot>';\r\n    }\r\n    if (options.template) {\r\n      options._content = extractContent(el);\r\n      el = transcludeTemplate(el, options);\r\n    }\r\n  }\r\n  if (isFragment(el)) {\r\n    // anchors for fragment instance\r\n    // passing in `persist: true` to avoid them being\r\n    // discarded by IE during template cloning\r\n    prepend(createAnchor('v-start', true), el);\r\n    el.appendChild(createAnchor('v-end', true));\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * Process the template option.\r\n * If the replace option is true this will swap the $el.\r\n *\r\n * @param {Element} el\r\n * @param {Object} options\r\n * @return {Element|DocumentFragment}\r\n */\r\n\r\nfunction transcludeTemplate(el, options) {\r\n  var template = options.template;\r\n  var frag = parseTemplate(template, true);\r\n  if (frag) {\r\n    var replacer = frag.firstChild;\r\n    if (!replacer) {\r\n      return frag;\r\n    }\r\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\r\n    if (options.replace) {\r\n      /* istanbul ignore if */\r\n      if (el === document.body) {\r\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\r\n      }\r\n      // there are many cases where the instance must\r\n      // become a fragment instance: basically anything that\r\n      // can create more than 1 root nodes.\r\n      if (\r\n      // multi-children template\r\n      frag.childNodes.length > 1 ||\r\n      // non-element template\r\n      replacer.nodeType !== 1 ||\r\n      // single nested component\r\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\r\n      // element directive\r\n      resolveAsset(options, 'elementDirectives', tag) ||\r\n      // for block\r\n      replacer.hasAttribute('v-for') ||\r\n      // if block\r\n      replacer.hasAttribute('v-if')) {\r\n        return frag;\r\n      } else {\r\n        options._replacerAttrs = extractAttrs(replacer);\r\n        mergeAttrs(el, replacer);\r\n        return replacer;\r\n      }\r\n    } else {\r\n      el.appendChild(frag);\r\n      return el;\r\n    }\r\n  } else {\r\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to extract a component container's attributes\r\n * into a plain object array.\r\n *\r\n * @param {Element} el\r\n * @return {Array}\r\n */\r\n\r\nfunction extractAttrs(el) {\r\n  if (el.nodeType === 1 && el.hasAttributes()) {\r\n    return toArray(el.attributes);\r\n  }\r\n}\r\n\r\n/**\r\n * Merge the attributes of two elements, and make sure\r\n * the class names are merged properly.\r\n *\r\n * @param {Element} from\r\n * @param {Element} to\r\n */\r\n\r\nfunction mergeAttrs(from, to) {\r\n  var attrs = from.attributes;\r\n  var i = attrs.length;\r\n  var name, value;\r\n  while (i--) {\r\n    name = attrs[i].name;\r\n    value = attrs[i].value;\r\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\r\n      to.setAttribute(name, value);\r\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\r\n      value.split(/\\s+/).forEach(function (cls) {\r\n        addClass(to, cls);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Scan and determine slot content distribution.\r\n * We do this during transclusion instead at compile time so that\r\n * the distribution is decoupled from the compilation order of\r\n * the slots.\r\n *\r\n * @param {Element|DocumentFragment} template\r\n * @param {Element} content\r\n * @param {Vue} vm\r\n */\r\n\r\nfunction resolveSlots(vm, content) {\r\n  if (!content) {\r\n    return;\r\n  }\r\n  var contents = vm._slotContents = Object.create(null);\r\n  var el, name;\r\n  for (var i = 0, l = content.children.length; i < l; i++) {\r\n    el = content.children[i];\r\n    /* eslint-disable no-cond-assign */\r\n    if (name = el.getAttribute('slot')) {\r\n      (contents[name] || (contents[name] = [])).push(el);\r\n    }\r\n    /* eslint-enable no-cond-assign */\r\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\r\n      warn('The \"slot\" attribute must be static.', vm.$parent);\r\n    }\r\n  }\r\n  for (name in contents) {\r\n    contents[name] = extractFragment(contents[name], content);\r\n  }\r\n  if (content.hasChildNodes()) {\r\n    var nodes = content.childNodes;\r\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\r\n      return;\r\n    }\r\n    contents['default'] = extractFragment(content.childNodes, content);\r\n  }\r\n}\r\n\r\n/**\r\n * Extract qualified content nodes from a node list.\r\n *\r\n * @param {NodeList} nodes\r\n * @return {DocumentFragment}\r\n */\r\n\r\nfunction extractFragment(nodes, parent) {\r\n  var frag = document.createDocumentFragment();\r\n  nodes = toArray(nodes);\r\n  for (var i = 0, l = nodes.length; i < l; i++) {\r\n    var node = nodes[i];\r\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\r\n      parent.removeChild(node);\r\n      node = parseTemplate(node, true);\r\n    }\r\n    frag.appendChild(node);\r\n  }\r\n  return frag;\r\n}\r\n\r\n\r\n\r\nvar compiler = Object.freeze({\r\n\tcompile: compile,\r\n\tcompileAndLinkProps: compileAndLinkProps,\r\n\tcompileRoot: compileRoot,\r\n\ttransclude: transclude,\r\n\tresolveSlots: resolveSlots\r\n});\r\n\r\nfunction stateMixin (Vue) {\r\n  /**\r\n   * Accessor for `$data` property, since setting $data\r\n   * requires observing the new object and updating\r\n   * proxied properties.\r\n   */\r\n\r\n  Object.defineProperty(Vue.prototype, '$data', {\r\n    get: function get() {\r\n      return this._data;\r\n    },\r\n    set: function set(newData) {\r\n      if (newData !== this._data) {\r\n        this._setData(newData);\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Setup the scope of an instance, which contains:\r\n   * - observed data\r\n   * - computed properties\r\n   * - user methods\r\n   * - meta properties\r\n   */\r\n\r\n  Vue.prototype._initState = function () {\r\n    this._initProps();\r\n    this._initMeta();\r\n    this._initMethods();\r\n    this._initData();\r\n    this._initComputed();\r\n  };\r\n\r\n  /**\r\n   * Initialize props.\r\n   */\r\n\r\n  Vue.prototype._initProps = function () {\r\n    var options = this.$options;\r\n    var el = options.el;\r\n    var props = options.props;\r\n    if (props && !el) {\r\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\r\n    }\r\n    // make sure to convert string selectors into element now\r\n    el = options.el = query(el);\r\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\r\n    // props must be linked in proper scope if inside v-for\r\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\r\n  };\r\n\r\n  /**\r\n   * Initialize the data.\r\n   */\r\n\r\n  Vue.prototype._initData = function () {\r\n    var dataFn = this.$options.data;\r\n    var data = this._data = dataFn ? dataFn() : {};\r\n    if (!isPlainObject(data)) {\r\n      data = {};\r\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\r\n    }\r\n    var props = this._props;\r\n    // proxy data on instance\r\n    var keys = Object.keys(data);\r\n    var i, key;\r\n    i = keys.length;\r\n    while (i--) {\r\n      key = keys[i];\r\n      // there are two scenarios where we can proxy a data key:\r\n      // 1. it's not already defined as a prop\r\n      // 2. it's provided via a instantiation option AND there are no\r\n      //    template prop present\r\n      if (!props || !hasOwn(props, key)) {\r\n        this._proxy(key);\r\n      } else if (process.env.NODE_ENV !== 'production') {\r\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\r\n      }\r\n    }\r\n    // observe data\r\n    observe(data, this);\r\n  };\r\n\r\n  /**\r\n   * Swap the instance's $data. Called in $data's setter.\r\n   *\r\n   * @param {Object} newData\r\n   */\r\n\r\n  Vue.prototype._setData = function (newData) {\r\n    newData = newData || {};\r\n    var oldData = this._data;\r\n    this._data = newData;\r\n    var keys, key, i;\r\n    // unproxy keys not present in new data\r\n    keys = Object.keys(oldData);\r\n    i = keys.length;\r\n    while (i--) {\r\n      key = keys[i];\r\n      if (!(key in newData)) {\r\n        this._unproxy(key);\r\n      }\r\n    }\r\n    // proxy keys not already proxied,\r\n    // and trigger change for changed values\r\n    keys = Object.keys(newData);\r\n    i = keys.length;\r\n    while (i--) {\r\n      key = keys[i];\r\n      if (!hasOwn(this, key)) {\r\n        // new property\r\n        this._proxy(key);\r\n      }\r\n    }\r\n    oldData.__ob__.removeVm(this);\r\n    observe(newData, this);\r\n    this._digest();\r\n  };\r\n\r\n  /**\r\n   * Proxy a property, so that\r\n   * vm.prop === vm._data.prop\r\n   *\r\n   * @param {String} key\r\n   */\r\n\r\n  Vue.prototype._proxy = function (key) {\r\n    if (!isReserved(key)) {\r\n      // need to store ref to self here\r\n      // because these getter/setters might\r\n      // be called by child scopes via\r\n      // prototype inheritance.\r\n      var self = this;\r\n      Object.defineProperty(self, key, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: function proxyGetter() {\r\n          return self._data[key];\r\n        },\r\n        set: function proxySetter(val) {\r\n          self._data[key] = val;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Unproxy a property.\r\n   *\r\n   * @param {String} key\r\n   */\r\n\r\n  Vue.prototype._unproxy = function (key) {\r\n    if (!isReserved(key)) {\r\n      delete this[key];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Force update on every watcher in scope.\r\n   */\r\n\r\n  Vue.prototype._digest = function () {\r\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\r\n      this._watchers[i].update(true); // shallow updates\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Setup computed properties. They are essentially\r\n   * special getter/setters\r\n   */\r\n\r\n  function noop() {}\r\n  Vue.prototype._initComputed = function () {\r\n    var computed = this.$options.computed;\r\n    if (computed) {\r\n      for (var key in computed) {\r\n        var userDef = computed[key];\r\n        var def = {\r\n          enumerable: true,\r\n          configurable: true\r\n        };\r\n        if (typeof userDef === 'function') {\r\n          def.get = makeComputedGetter(userDef, this);\r\n          def.set = noop;\r\n        } else {\r\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\r\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\r\n        }\r\n        Object.defineProperty(this, key, def);\r\n      }\r\n    }\r\n  };\r\n\r\n  function makeComputedGetter(getter, owner) {\r\n    var watcher = new Watcher(owner, getter, null, {\r\n      lazy: true\r\n    });\r\n    return function computedGetter() {\r\n      if (watcher.dirty) {\r\n        watcher.evaluate();\r\n      }\r\n      if (Dep.target) {\r\n        watcher.depend();\r\n      }\r\n      return watcher.value;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Setup instance methods. Methods must be bound to the\r\n   * instance since they might be passed down as a prop to\r\n   * child components.\r\n   */\r\n\r\n  Vue.prototype._initMethods = function () {\r\n    var methods = this.$options.methods;\r\n    if (methods) {\r\n      for (var key in methods) {\r\n        this[key] = bind(methods[key], this);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initialize meta information like $index, $key & $value.\r\n   */\r\n\r\n  Vue.prototype._initMeta = function () {\r\n    var metas = this.$options._meta;\r\n    if (metas) {\r\n      for (var key in metas) {\r\n        defineReactive(this, key, metas[key]);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nvar eventRE = /^v-on:|^@/;\r\n\r\nfunction eventsMixin (Vue) {\r\n  /**\r\n   * Setup the instance's option events & watchers.\r\n   * If the value is a string, we pull it from the\r\n   * instance's methods by name.\r\n   */\r\n\r\n  Vue.prototype._initEvents = function () {\r\n    var options = this.$options;\r\n    if (options._asComponent) {\r\n      registerComponentEvents(this, options.el);\r\n    }\r\n    registerCallbacks(this, '$on', options.events);\r\n    registerCallbacks(this, '$watch', options.watch);\r\n  };\r\n\r\n  /**\r\n   * Register v-on events on a child component\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {Element} el\r\n   */\r\n\r\n  function registerComponentEvents(vm, el) {\r\n    var attrs = el.attributes;\r\n    var name, value, handler;\r\n    for (var i = 0, l = attrs.length; i < l; i++) {\r\n      name = attrs[i].name;\r\n      if (eventRE.test(name)) {\r\n        name = name.replace(eventRE, '');\r\n        // force the expression into a statement so that\r\n        // it always dynamically resolves the method to call (#2670)\r\n        // kinda ugly hack, but does the job.\r\n        value = attrs[i].value;\r\n        if (isSimplePath(value)) {\r\n          value += '.apply(this, $arguments)';\r\n        }\r\n        handler = (vm._scope || vm._context).$eval(value, true);\r\n        handler._fromParent = true;\r\n        vm.$on(name.replace(eventRE), handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register callbacks for option events and watchers.\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {String} action\r\n   * @param {Object} hash\r\n   */\r\n\r\n  function registerCallbacks(vm, action, hash) {\r\n    if (!hash) return;\r\n    var handlers, key, i, j;\r\n    for (key in hash) {\r\n      handlers = hash[key];\r\n      if (isArray(handlers)) {\r\n        for (i = 0, j = handlers.length; i < j; i++) {\r\n          register(vm, action, key, handlers[i]);\r\n        }\r\n      } else {\r\n        register(vm, action, key, handlers);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper to register an event/watch callback.\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {String} action\r\n   * @param {String} key\r\n   * @param {Function|String|Object} handler\r\n   * @param {Object} [options]\r\n   */\r\n\r\n  function register(vm, action, key, handler, options) {\r\n    var type = typeof handler;\r\n    if (type === 'function') {\r\n      vm[action](key, handler, options);\r\n    } else if (type === 'string') {\r\n      var methods = vm.$options.methods;\r\n      var method = methods && methods[handler];\r\n      if (method) {\r\n        vm[action](key, method, options);\r\n      } else {\r\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\r\n      }\r\n    } else if (handler && type === 'object') {\r\n      register(vm, action, key, handler.handler, handler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup recursive attached/detached calls\r\n   */\r\n\r\n  Vue.prototype._initDOMHooks = function () {\r\n    this.$on('hook:attached', onAttached);\r\n    this.$on('hook:detached', onDetached);\r\n  };\r\n\r\n  /**\r\n   * Callback to recursively call attached hook on children\r\n   */\r\n\r\n  function onAttached() {\r\n    if (!this._isAttached) {\r\n      this._isAttached = true;\r\n      this.$children.forEach(callAttach);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterator to call attached hook\r\n   *\r\n   * @param {Vue} child\r\n   */\r\n\r\n  function callAttach(child) {\r\n    if (!child._isAttached && inDoc(child.$el)) {\r\n      child._callHook('attached');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback to recursively call detached hook on children\r\n   */\r\n\r\n  function onDetached() {\r\n    if (this._isAttached) {\r\n      this._isAttached = false;\r\n      this.$children.forEach(callDetach);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterator to call detached hook\r\n   *\r\n   * @param {Vue} child\r\n   */\r\n\r\n  function callDetach(child) {\r\n    if (child._isAttached && !inDoc(child.$el)) {\r\n      child._callHook('detached');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger all handlers for a hook\r\n   *\r\n   * @param {String} hook\r\n   */\r\n\r\n  Vue.prototype._callHook = function (hook) {\r\n    this.$emit('pre-hook:' + hook);\r\n    var handlers = this.$options[hook];\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        handlers[i].call(this);\r\n      }\r\n    }\r\n    this.$emit('hook:' + hook);\r\n  };\r\n}\r\n\r\nfunction noop$1() {}\r\n\r\n/**\r\n * A directive links a DOM element with a piece of data,\r\n * which is the result of evaluating an expression.\r\n * It registers a watcher with the expression and calls\r\n * the DOM update function when a change is triggered.\r\n *\r\n * @param {Object} descriptor\r\n *                 - {String} name\r\n *                 - {Object} def\r\n *                 - {String} expression\r\n *                 - {Array<Object>} [filters]\r\n *                 - {Object} [modifiers]\r\n *                 - {Boolean} literal\r\n *                 - {String} attr\r\n *                 - {String} arg\r\n *                 - {String} raw\r\n *                 - {String} [ref]\r\n *                 - {Array<Object>} [interp]\r\n *                 - {Boolean} [hasOneTime]\r\n * @param {Vue} vm\r\n * @param {Node} el\r\n * @param {Vue} [host] - transclusion host component\r\n * @param {Object} [scope] - v-for scope\r\n * @param {Fragment} [frag] - owner fragment\r\n * @constructor\r\n */\r\nfunction Directive(descriptor, vm, el, host, scope, frag) {\r\n  this.vm = vm;\r\n  this.el = el;\r\n  // copy descriptor properties\r\n  this.descriptor = descriptor;\r\n  this.name = descriptor.name;\r\n  this.expression = descriptor.expression;\r\n  this.arg = descriptor.arg;\r\n  this.modifiers = descriptor.modifiers;\r\n  this.filters = descriptor.filters;\r\n  this.literal = this.modifiers && this.modifiers.literal;\r\n  // private\r\n  this._locked = false;\r\n  this._bound = false;\r\n  this._listeners = null;\r\n  // link context\r\n  this._host = host;\r\n  this._scope = scope;\r\n  this._frag = frag;\r\n  // store directives on node in dev mode\r\n  if (process.env.NODE_ENV !== 'production' && this.el) {\r\n    this.el._vue_directives = this.el._vue_directives || [];\r\n    this.el._vue_directives.push(this);\r\n  }\r\n}\r\n\r\n/**\r\n * Initialize the directive, mixin definition properties,\r\n * setup the watcher, call definition bind() and update()\r\n * if present.\r\n */\r\n\r\nDirective.prototype._bind = function () {\r\n  var name = this.name;\r\n  var descriptor = this.descriptor;\r\n\r\n  // remove attribute\r\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\r\n    var attr = descriptor.attr || 'v-' + name;\r\n    this.el.removeAttribute(attr);\r\n  }\r\n\r\n  // copy def properties\r\n  var def = descriptor.def;\r\n  if (typeof def === 'function') {\r\n    this.update = def;\r\n  } else {\r\n    extend(this, def);\r\n  }\r\n\r\n  // setup directive params\r\n  this._setupParams();\r\n\r\n  // initial bind\r\n  if (this.bind) {\r\n    this.bind();\r\n  }\r\n  this._bound = true;\r\n\r\n  if (this.literal) {\r\n    this.update && this.update(descriptor.raw);\r\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\r\n    // wrapped updater for context\r\n    var dir = this;\r\n    if (this.update) {\r\n      this._update = function (val, oldVal) {\r\n        if (!dir._locked) {\r\n          dir.update(val, oldVal);\r\n        }\r\n      };\r\n    } else {\r\n      this._update = noop$1;\r\n    }\r\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\r\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\r\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\r\n    {\r\n      filters: this.filters,\r\n      twoWay: this.twoWay,\r\n      deep: this.deep,\r\n      preProcess: preProcess,\r\n      postProcess: postProcess,\r\n      scope: this._scope\r\n    });\r\n    // v-model with inital inline value need to sync back to\r\n    // model instead of update to DOM on init. They would\r\n    // set the afterBind hook to indicate that.\r\n    if (this.afterBind) {\r\n      this.afterBind();\r\n    } else if (this.update) {\r\n      this.update(watcher.value);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Setup all param attributes, e.g. track-by,\r\n * transition-mode, etc...\r\n */\r\n\r\nDirective.prototype._setupParams = function () {\r\n  if (!this.params) {\r\n    return;\r\n  }\r\n  var params = this.params;\r\n  // swap the params array with a fresh object.\r\n  this.params = Object.create(null);\r\n  var i = params.length;\r\n  var key, val, mappedKey;\r\n  while (i--) {\r\n    key = hyphenate(params[i]);\r\n    mappedKey = camelize(key);\r\n    val = getBindAttr(this.el, key);\r\n    if (val != null) {\r\n      // dynamic\r\n      this._setupParamWatcher(mappedKey, val);\r\n    } else {\r\n      // static\r\n      val = getAttr(this.el, key);\r\n      if (val != null) {\r\n        this.params[mappedKey] = val === '' ? true : val;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Setup a watcher for a dynamic param.\r\n *\r\n * @param {String} key\r\n * @param {String} expression\r\n */\r\n\r\nDirective.prototype._setupParamWatcher = function (key, expression) {\r\n  var self = this;\r\n  var called = false;\r\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\r\n    self.params[key] = val;\r\n    // since we are in immediate mode,\r\n    // only call the param change callbacks if this is not the first update.\r\n    if (called) {\r\n      var cb = self.paramWatchers && self.paramWatchers[key];\r\n      if (cb) {\r\n        cb.call(self, val, oldVal);\r\n      }\r\n    } else {\r\n      called = true;\r\n    }\r\n  }, {\r\n    immediate: true,\r\n    user: false\r\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\r\n};\r\n\r\n/**\r\n * Check if the directive is a function caller\r\n * and if the expression is a callable one. If both true,\r\n * we wrap up the expression and use it as the event\r\n * handler.\r\n *\r\n * e.g. on-click=\"a++\"\r\n *\r\n * @return {Boolean}\r\n */\r\n\r\nDirective.prototype._checkStatement = function () {\r\n  var expression = this.expression;\r\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\r\n    var fn = parseExpression$1(expression).get;\r\n    var scope = this._scope || this.vm;\r\n    var handler = function handler(e) {\r\n      scope.$event = e;\r\n      fn.call(scope, scope);\r\n      scope.$event = null;\r\n    };\r\n    if (this.filters) {\r\n      handler = scope._applyFilters(handler, null, this.filters);\r\n    }\r\n    this.update(handler);\r\n    return true;\r\n  }\r\n};\r\n\r\n/**\r\n * Set the corresponding value with the setter.\r\n * This should only be used in two-way directives\r\n * e.g. v-model.\r\n *\r\n * @param {*} value\r\n * @public\r\n */\r\n\r\nDirective.prototype.set = function (value) {\r\n  /* istanbul ignore else */\r\n  if (this.twoWay) {\r\n    this._withLock(function () {\r\n      this._watcher.set(value);\r\n    });\r\n  } else if (process.env.NODE_ENV !== 'production') {\r\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\r\n  }\r\n};\r\n\r\n/**\r\n * Execute a function while preventing that function from\r\n * triggering updates on this directive instance.\r\n *\r\n * @param {Function} fn\r\n */\r\n\r\nDirective.prototype._withLock = function (fn) {\r\n  var self = this;\r\n  self._locked = true;\r\n  fn.call(self);\r\n  nextTick(function () {\r\n    self._locked = false;\r\n  });\r\n};\r\n\r\n/**\r\n * Convenience method that attaches a DOM event listener\r\n * to the directive element and autometically tears it down\r\n * during unbind.\r\n *\r\n * @param {String} event\r\n * @param {Function} handler\r\n * @param {Boolean} [useCapture]\r\n */\r\n\r\nDirective.prototype.on = function (event, handler, useCapture) {\r\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\r\n};\r\n\r\n/**\r\n * Teardown the watcher and call unbind.\r\n */\r\n\r\nDirective.prototype._teardown = function () {\r\n  if (this._bound) {\r\n    this._bound = false;\r\n    if (this.unbind) {\r\n      this.unbind();\r\n    }\r\n    if (this._watcher) {\r\n      this._watcher.teardown();\r\n    }\r\n    var listeners = this._listeners;\r\n    var i;\r\n    if (listeners) {\r\n      i = listeners.length;\r\n      while (i--) {\r\n        off(this.el, listeners[i][0], listeners[i][1]);\r\n      }\r\n    }\r\n    var unwatchFns = this._paramUnwatchFns;\r\n    if (unwatchFns) {\r\n      i = unwatchFns.length;\r\n      while (i--) {\r\n        unwatchFns[i]();\r\n      }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production' && this.el) {\r\n      this.el._vue_directives.$remove(this);\r\n    }\r\n    this.vm = this.el = this._watcher = this._listeners = null;\r\n  }\r\n};\r\n\r\nfunction lifecycleMixin (Vue) {\r\n  /**\r\n   * Update v-ref for component.\r\n   *\r\n   * @param {Boolean} remove\r\n   */\r\n\r\n  Vue.prototype._updateRef = function (remove) {\r\n    var ref = this.$options._ref;\r\n    if (ref) {\r\n      var refs = (this._scope || this._context).$refs;\r\n      if (remove) {\r\n        if (refs[ref] === this) {\r\n          refs[ref] = null;\r\n        }\r\n      } else {\r\n        refs[ref] = this;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Transclude, compile and link element.\r\n   *\r\n   * If a pre-compiled linker is available, that means the\r\n   * passed in element will be pre-transcluded and compiled\r\n   * as well - all we need to do is to call the linker.\r\n   *\r\n   * Otherwise we need to call transclude/compile/link here.\r\n   *\r\n   * @param {Element} el\r\n   */\r\n\r\n  Vue.prototype._compile = function (el) {\r\n    var options = this.$options;\r\n\r\n    // transclude and init element\r\n    // transclude can potentially replace original\r\n    // so we need to keep reference; this step also injects\r\n    // the template and caches the original attributes\r\n    // on the container node and replacer node.\r\n    var original = el;\r\n    el = transclude(el, options);\r\n    this._initElement(el);\r\n\r\n    // handle v-pre on root node (#2026)\r\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\r\n      return;\r\n    }\r\n\r\n    // root is always compiled per-instance, because\r\n    // container attrs and props can be different every time.\r\n    var contextOptions = this._context && this._context.$options;\r\n    var rootLinker = compileRoot(el, options, contextOptions);\r\n\r\n    // resolve slot distribution\r\n    resolveSlots(this, options._content);\r\n\r\n    // compile and link the rest\r\n    var contentLinkFn;\r\n    var ctor = this.constructor;\r\n    // component compilation can be cached\r\n    // as long as it's not using inline-template\r\n    if (options._linkerCachable) {\r\n      contentLinkFn = ctor.linker;\r\n      if (!contentLinkFn) {\r\n        contentLinkFn = ctor.linker = compile(el, options);\r\n      }\r\n    }\r\n\r\n    // link phase\r\n    // make sure to link root with prop scope!\r\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\r\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\r\n\r\n    // register composite unlink function\r\n    // to be called during instance destruction\r\n    this._unlinkFn = function () {\r\n      rootUnlinkFn();\r\n      // passing destroying: true to avoid searching and\r\n      // splicing the directives\r\n      contentUnlinkFn(true);\r\n    };\r\n\r\n    // finally replace original\r\n    if (options.replace) {\r\n      replace(original, el);\r\n    }\r\n\r\n    this._isCompiled = true;\r\n    this._callHook('compiled');\r\n  };\r\n\r\n  /**\r\n   * Initialize instance element. Called in the public\r\n   * $mount() method.\r\n   *\r\n   * @param {Element} el\r\n   */\r\n\r\n  Vue.prototype._initElement = function (el) {\r\n    if (isFragment(el)) {\r\n      this._isFragment = true;\r\n      this.$el = this._fragmentStart = el.firstChild;\r\n      this._fragmentEnd = el.lastChild;\r\n      // set persisted text anchors to empty\r\n      if (this._fragmentStart.nodeType === 3) {\r\n        this._fragmentStart.data = this._fragmentEnd.data = '';\r\n      }\r\n      this._fragment = el;\r\n    } else {\r\n      this.$el = el;\r\n    }\r\n    this.$el.__vue__ = this;\r\n    this._callHook('beforeCompile');\r\n  };\r\n\r\n  /**\r\n   * Create and bind a directive to an element.\r\n   *\r\n   * @param {Object} descriptor - parsed directive descriptor\r\n   * @param {Node} node   - target node\r\n   * @param {Vue} [host] - transclusion host component\r\n   * @param {Object} [scope] - v-for scope\r\n   * @param {Fragment} [frag] - owner fragment\r\n   */\r\n\r\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\r\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\r\n  };\r\n\r\n  /**\r\n   * Teardown an instance, unobserves the data, unbind all the\r\n   * directives, turn off all the event listeners, etc.\r\n   *\r\n   * @param {Boolean} remove - whether to remove the DOM node.\r\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\r\n   *                                 be called later\r\n   */\r\n\r\n  Vue.prototype._destroy = function (remove, deferCleanup) {\r\n    if (this._isBeingDestroyed) {\r\n      if (!deferCleanup) {\r\n        this._cleanup();\r\n      }\r\n      return;\r\n    }\r\n\r\n    var destroyReady;\r\n    var pendingRemoval;\r\n\r\n    var self = this;\r\n    // Cleanup should be called either synchronously or asynchronoysly as\r\n    // callback of this.$remove(), or if remove and deferCleanup are false.\r\n    // In any case it should be called after all other removing, unbinding and\r\n    // turning of is done\r\n    var cleanupIfPossible = function cleanupIfPossible() {\r\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\r\n        self._cleanup();\r\n      }\r\n    };\r\n\r\n    // remove DOM element\r\n    if (remove && this.$el) {\r\n      pendingRemoval = true;\r\n      this.$remove(function () {\r\n        pendingRemoval = false;\r\n        cleanupIfPossible();\r\n      });\r\n    }\r\n\r\n    this._callHook('beforeDestroy');\r\n    this._isBeingDestroyed = true;\r\n    var i;\r\n    // remove self from parent. only necessary\r\n    // if parent is not being destroyed as well.\r\n    var parent = this.$parent;\r\n    if (parent && !parent._isBeingDestroyed) {\r\n      parent.$children.$remove(this);\r\n      // unregister ref (remove: true)\r\n      this._updateRef(true);\r\n    }\r\n    // destroy all children.\r\n    i = this.$children.length;\r\n    while (i--) {\r\n      this.$children[i].$destroy();\r\n    }\r\n    // teardown props\r\n    if (this._propsUnlinkFn) {\r\n      this._propsUnlinkFn();\r\n    }\r\n    // teardown all directives. this also tearsdown all\r\n    // directive-owned watchers.\r\n    if (this._unlinkFn) {\r\n      this._unlinkFn();\r\n    }\r\n    i = this._watchers.length;\r\n    while (i--) {\r\n      this._watchers[i].teardown();\r\n    }\r\n    // remove reference to self on $el\r\n    if (this.$el) {\r\n      this.$el.__vue__ = null;\r\n    }\r\n\r\n    destroyReady = true;\r\n    cleanupIfPossible();\r\n  };\r\n\r\n  /**\r\n   * Clean up to ensure garbage collection.\r\n   * This is called after the leave transition if there\r\n   * is any.\r\n   */\r\n\r\n  Vue.prototype._cleanup = function () {\r\n    if (this._isDestroyed) {\r\n      return;\r\n    }\r\n    // remove self from owner fragment\r\n    // do it in cleanup so that we can call $destroy with\r\n    // defer right when a fragment is about to be removed.\r\n    if (this._frag) {\r\n      this._frag.children.$remove(this);\r\n    }\r\n    // remove reference from data ob\r\n    // frozen object may not have observer.\r\n    if (this._data && this._data.__ob__) {\r\n      this._data.__ob__.removeVm(this);\r\n    }\r\n    // Clean up references to private properties and other\r\n    // instances. preserve reference to _data so that proxy\r\n    // accessors still work. The only potential side effect\r\n    // here is that mutating the instance after it's destroyed\r\n    // may affect the state of other components that are still\r\n    // observing the same object, but that seems to be a\r\n    // reasonable responsibility for the user rather than\r\n    // always throwing an error on them.\r\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\r\n    // call the last hook...\r\n    this._isDestroyed = true;\r\n    this._callHook('destroyed');\r\n    // turn off all instance listeners.\r\n    this.$off();\r\n  };\r\n}\r\n\r\nfunction miscMixin (Vue) {\r\n  /**\r\n   * Apply a list of filter (descriptors) to a value.\r\n   * Using plain for loops here because this will be called in\r\n   * the getter of any watcher with filters so it is very\r\n   * performance sensitive.\r\n   *\r\n   * @param {*} value\r\n   * @param {*} [oldValue]\r\n   * @param {Array} filters\r\n   * @param {Boolean} write\r\n   * @return {*}\r\n   */\r\n\r\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\r\n    var filter, fn, args, arg, offset, i, l, j, k;\r\n    for (i = 0, l = filters.length; i < l; i++) {\r\n      filter = filters[write ? l - i - 1 : i];\r\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\r\n      if (!fn) continue;\r\n      fn = write ? fn.write : fn.read || fn;\r\n      if (typeof fn !== 'function') continue;\r\n      args = write ? [value, oldValue] : [value];\r\n      offset = write ? 2 : 1;\r\n      if (filter.args) {\r\n        for (j = 0, k = filter.args.length; j < k; j++) {\r\n          arg = filter.args[j];\r\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\r\n        }\r\n      }\r\n      value = fn.apply(this, args);\r\n    }\r\n    return value;\r\n  };\r\n\r\n  /**\r\n   * Resolve a component, depending on whether the component\r\n   * is defined normally or using an async factory function.\r\n   * Resolves synchronously if already resolved, otherwise\r\n   * resolves asynchronously and caches the resolved\r\n   * constructor on the factory.\r\n   *\r\n   * @param {String|Function} value\r\n   * @param {Function} cb\r\n   */\r\n\r\n  Vue.prototype._resolveComponent = function (value, cb) {\r\n    var factory;\r\n    if (typeof value === 'function') {\r\n      factory = value;\r\n    } else {\r\n      factory = resolveAsset(this.$options, 'components', value, true);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (!factory) {\r\n      return;\r\n    }\r\n    // async component factory\r\n    if (!factory.options) {\r\n      if (factory.resolved) {\r\n        // cached\r\n        cb(factory.resolved);\r\n      } else if (factory.requested) {\r\n        // pool callbacks\r\n        factory.pendingCallbacks.push(cb);\r\n      } else {\r\n        factory.requested = true;\r\n        var cbs = factory.pendingCallbacks = [cb];\r\n        factory.call(this, function resolve(res) {\r\n          if (isPlainObject(res)) {\r\n            res = Vue.extend(res);\r\n          }\r\n          // cache resolved\r\n          factory.resolved = res;\r\n          // invoke callbacks\r\n          for (var i = 0, l = cbs.length; i < l; i++) {\r\n            cbs[i](res);\r\n          }\r\n        }, function reject(reason) {\r\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\r\n        });\r\n      }\r\n    } else {\r\n      // normal component\r\n      cb(factory);\r\n    }\r\n  };\r\n}\r\n\r\nvar filterRE$1 = /[^|]\\|[^|]/;\r\n\r\nfunction dataAPI (Vue) {\r\n  /**\r\n   * Get the value from an expression on this vm.\r\n   *\r\n   * @param {String} exp\r\n   * @param {Boolean} [asStatement]\r\n   * @return {*}\r\n   */\r\n\r\n  Vue.prototype.$get = function (exp, asStatement) {\r\n    var res = parseExpression$1(exp);\r\n    if (res) {\r\n      if (asStatement) {\r\n        var self = this;\r\n        return function statementHandler() {\r\n          self.$arguments = toArray(arguments);\r\n          var result = res.get.call(self, self);\r\n          self.$arguments = null;\r\n          return result;\r\n        };\r\n      } else {\r\n        try {\r\n          return res.get.call(this, this);\r\n        } catch (e) {}\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the value from an expression on this vm.\r\n   * The expression must be a valid left-hand\r\n   * expression in an assignment.\r\n   *\r\n   * @param {String} exp\r\n   * @param {*} val\r\n   */\r\n\r\n  Vue.prototype.$set = function (exp, val) {\r\n    var res = parseExpression$1(exp, true);\r\n    if (res && res.set) {\r\n      res.set.call(this, this, val);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete a property on the VM\r\n   *\r\n   * @param {String} key\r\n   */\r\n\r\n  Vue.prototype.$delete = function (key) {\r\n    del(this._data, key);\r\n  };\r\n\r\n  /**\r\n   * Watch an expression, trigger callback when its\r\n   * value changes.\r\n   *\r\n   * @param {String|Function} expOrFn\r\n   * @param {Function} cb\r\n   * @param {Object} [options]\r\n   *                 - {Boolean} deep\r\n   *                 - {Boolean} immediate\r\n   * @return {Function} - unwatchFn\r\n   */\r\n\r\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\r\n    var vm = this;\r\n    var parsed;\r\n    if (typeof expOrFn === 'string') {\r\n      parsed = parseDirective(expOrFn);\r\n      expOrFn = parsed.expression;\r\n    }\r\n    var watcher = new Watcher(vm, expOrFn, cb, {\r\n      deep: options && options.deep,\r\n      sync: options && options.sync,\r\n      filters: parsed && parsed.filters,\r\n      user: !options || options.user !== false\r\n    });\r\n    if (options && options.immediate) {\r\n      cb.call(vm, watcher.value);\r\n    }\r\n    return function unwatchFn() {\r\n      watcher.teardown();\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Evaluate a text directive, including filters.\r\n   *\r\n   * @param {String} text\r\n   * @param {Boolean} [asStatement]\r\n   * @return {String}\r\n   */\r\n\r\n  Vue.prototype.$eval = function (text, asStatement) {\r\n    // check for filters.\r\n    if (filterRE$1.test(text)) {\r\n      var dir = parseDirective(text);\r\n      // the filter regex check might give false positive\r\n      // for pipes inside strings, so it's possible that\r\n      // we don't get any filters here\r\n      var val = this.$get(dir.expression, asStatement);\r\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\r\n    } else {\r\n      // no filter\r\n      return this.$get(text, asStatement);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Interpolate a piece of template text.\r\n   *\r\n   * @param {String} text\r\n   * @return {String}\r\n   */\r\n\r\n  Vue.prototype.$interpolate = function (text) {\r\n    var tokens = parseText(text);\r\n    var vm = this;\r\n    if (tokens) {\r\n      if (tokens.length === 1) {\r\n        return vm.$eval(tokens[0].value) + '';\r\n      } else {\r\n        return tokens.map(function (token) {\r\n          return token.tag ? vm.$eval(token.value) : token.value;\r\n        }).join('');\r\n      }\r\n    } else {\r\n      return text;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Log instance data as a plain JS object\r\n   * so that it is easier to inspect in console.\r\n   * This method assumes console is available.\r\n   *\r\n   * @param {String} [path]\r\n   */\r\n\r\n  Vue.prototype.$log = function (path) {\r\n    var data = path ? getPath(this._data, path) : this._data;\r\n    if (data) {\r\n      data = clean(data);\r\n    }\r\n    // include computed fields\r\n    if (!path) {\r\n      var key;\r\n      for (key in this.$options.computed) {\r\n        data[key] = clean(this[key]);\r\n      }\r\n      if (this._props) {\r\n        for (key in this._props) {\r\n          data[key] = clean(this[key]);\r\n        }\r\n      }\r\n    }\r\n    console.log(data);\r\n  };\r\n\r\n  /**\r\n   * \"clean\" a getter/setter converted object into a plain\r\n   * object copy.\r\n   *\r\n   * @param {Object} - obj\r\n   * @return {Object}\r\n   */\r\n\r\n  function clean(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  }\r\n}\r\n\r\nfunction domAPI (Vue) {\r\n  /**\r\n   * Convenience on-instance nextTick. The callback is\r\n   * auto-bound to the instance, and this avoids component\r\n   * modules having to rely on the global Vue.\r\n   *\r\n   * @param {Function} fn\r\n   */\r\n\r\n  Vue.prototype.$nextTick = function (fn) {\r\n    nextTick(fn, this);\r\n  };\r\n\r\n  /**\r\n   * Append instance to target\r\n   *\r\n   * @param {Node} target\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition] - defaults to true\r\n   */\r\n\r\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\r\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\r\n  };\r\n\r\n  /**\r\n   * Prepend instance to target\r\n   *\r\n   * @param {Node} target\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition] - defaults to true\r\n   */\r\n\r\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\r\n    target = query(target);\r\n    if (target.hasChildNodes()) {\r\n      this.$before(target.firstChild, cb, withTransition);\r\n    } else {\r\n      this.$appendTo(target, cb, withTransition);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Insert instance before target\r\n   *\r\n   * @param {Node} target\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition] - defaults to true\r\n   */\r\n\r\n  Vue.prototype.$before = function (target, cb, withTransition) {\r\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\r\n  };\r\n\r\n  /**\r\n   * Insert instance after target\r\n   *\r\n   * @param {Node} target\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition] - defaults to true\r\n   */\r\n\r\n  Vue.prototype.$after = function (target, cb, withTransition) {\r\n    target = query(target);\r\n    if (target.nextSibling) {\r\n      this.$before(target.nextSibling, cb, withTransition);\r\n    } else {\r\n      this.$appendTo(target.parentNode, cb, withTransition);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Remove instance from DOM\r\n   *\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition] - defaults to true\r\n   */\r\n\r\n  Vue.prototype.$remove = function (cb, withTransition) {\r\n    if (!this.$el.parentNode) {\r\n      return cb && cb();\r\n    }\r\n    var inDocument = this._isAttached && inDoc(this.$el);\r\n    // if we are not in document, no need to check\r\n    // for transitions\r\n    if (!inDocument) withTransition = false;\r\n    var self = this;\r\n    var realCb = function realCb() {\r\n      if (inDocument) self._callHook('detached');\r\n      if (cb) cb();\r\n    };\r\n    if (this._isFragment) {\r\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\r\n    } else {\r\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\r\n      op(this.$el, this, realCb);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Shared DOM insertion function.\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {Element} target\r\n   * @param {Function} [cb]\r\n   * @param {Boolean} [withTransition]\r\n   * @param {Function} op1 - op for non-transition insert\r\n   * @param {Function} op2 - op for transition insert\r\n   * @return vm\r\n   */\r\n\r\n  function insert(vm, target, cb, withTransition, op1, op2) {\r\n    target = query(target);\r\n    var targetIsDetached = !inDoc(target);\r\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\r\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\r\n    if (vm._isFragment) {\r\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\r\n        op(node, target, vm);\r\n      });\r\n      cb && cb();\r\n    } else {\r\n      op(vm.$el, target, vm, cb);\r\n    }\r\n    if (shouldCallHook) {\r\n      vm._callHook('attached');\r\n    }\r\n    return vm;\r\n  }\r\n\r\n  /**\r\n   * Check for selectors\r\n   *\r\n   * @param {String|Element} el\r\n   */\r\n\r\n  function query(el) {\r\n    return typeof el === 'string' ? document.querySelector(el) : el;\r\n  }\r\n\r\n  /**\r\n   * Append operation that takes a callback.\r\n   *\r\n   * @param {Node} el\r\n   * @param {Node} target\r\n   * @param {Vue} vm - unused\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  function append(el, target, vm, cb) {\r\n    target.appendChild(el);\r\n    if (cb) cb();\r\n  }\r\n\r\n  /**\r\n   * InsertBefore operation that takes a callback.\r\n   *\r\n   * @param {Node} el\r\n   * @param {Node} target\r\n   * @param {Vue} vm - unused\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  function beforeWithCb(el, target, vm, cb) {\r\n    before(el, target);\r\n    if (cb) cb();\r\n  }\r\n\r\n  /**\r\n   * Remove operation that takes a callback.\r\n   *\r\n   * @param {Node} el\r\n   * @param {Vue} vm - unused\r\n   * @param {Function} [cb]\r\n   */\r\n\r\n  function removeWithCb(el, vm, cb) {\r\n    remove(el);\r\n    if (cb) cb();\r\n  }\r\n}\r\n\r\nfunction eventsAPI (Vue) {\r\n  /**\r\n   * Listen on the given `event` with `fn`.\r\n   *\r\n   * @param {String} event\r\n   * @param {Function} fn\r\n   */\r\n\r\n  Vue.prototype.$on = function (event, fn) {\r\n    (this._events[event] || (this._events[event] = [])).push(fn);\r\n    modifyListenerCount(this, event, 1);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Adds an `event` listener that will be invoked a single\r\n   * time then automatically removed.\r\n   *\r\n   * @param {String} event\r\n   * @param {Function} fn\r\n   */\r\n\r\n  Vue.prototype.$once = function (event, fn) {\r\n    var self = this;\r\n    function on() {\r\n      self.$off(event, on);\r\n      fn.apply(this, arguments);\r\n    }\r\n    on.fn = fn;\r\n    this.$on(event, on);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Remove the given callback for `event` or all\r\n   * registered callbacks.\r\n   *\r\n   * @param {String} event\r\n   * @param {Function} fn\r\n   */\r\n\r\n  Vue.prototype.$off = function (event, fn) {\r\n    var cbs;\r\n    // all\r\n    if (!arguments.length) {\r\n      if (this.$parent) {\r\n        for (event in this._events) {\r\n          cbs = this._events[event];\r\n          if (cbs) {\r\n            modifyListenerCount(this, event, -cbs.length);\r\n          }\r\n        }\r\n      }\r\n      this._events = {};\r\n      return this;\r\n    }\r\n    // specific event\r\n    cbs = this._events[event];\r\n    if (!cbs) {\r\n      return this;\r\n    }\r\n    if (arguments.length === 1) {\r\n      modifyListenerCount(this, event, -cbs.length);\r\n      this._events[event] = null;\r\n      return this;\r\n    }\r\n    // specific handler\r\n    var cb;\r\n    var i = cbs.length;\r\n    while (i--) {\r\n      cb = cbs[i];\r\n      if (cb === fn || cb.fn === fn) {\r\n        modifyListenerCount(this, event, -1);\r\n        cbs.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Trigger an event on self.\r\n   *\r\n   * @param {String|Object} event\r\n   * @return {Boolean} shouldPropagate\r\n   */\r\n\r\n  Vue.prototype.$emit = function (event) {\r\n    var isSource = typeof event === 'string';\r\n    event = isSource ? event : event.name;\r\n    var cbs = this._events[event];\r\n    var shouldPropagate = isSource || !cbs;\r\n    if (cbs) {\r\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n      // this is a somewhat hacky solution to the question raised\r\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\r\n      // the propagation handling is somewhat broken. Therefore we\r\n      // need to treat these inline callbacks differently.\r\n      var hasParentCbs = isSource && cbs.some(function (cb) {\r\n        return cb._fromParent;\r\n      });\r\n      if (hasParentCbs) {\r\n        shouldPropagate = false;\r\n      }\r\n      var args = toArray(arguments, 1);\r\n      for (var i = 0, l = cbs.length; i < l; i++) {\r\n        var cb = cbs[i];\r\n        var res = cb.apply(this, args);\r\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\r\n          shouldPropagate = true;\r\n        }\r\n      }\r\n    }\r\n    return shouldPropagate;\r\n  };\r\n\r\n  /**\r\n   * Recursively broadcast an event to all children instances.\r\n   *\r\n   * @param {String|Object} event\r\n   * @param {...*} additional arguments\r\n   */\r\n\r\n  Vue.prototype.$broadcast = function (event) {\r\n    var isSource = typeof event === 'string';\r\n    event = isSource ? event : event.name;\r\n    // if no child has registered for this event,\r\n    // then there's no need to broadcast.\r\n    if (!this._eventsCount[event]) return;\r\n    var children = this.$children;\r\n    var args = toArray(arguments);\r\n    if (isSource) {\r\n      // use object event to indicate non-source emit\r\n      // on children\r\n      args[0] = { name: event, source: this };\r\n    }\r\n    for (var i = 0, l = children.length; i < l; i++) {\r\n      var child = children[i];\r\n      var shouldPropagate = child.$emit.apply(child, args);\r\n      if (shouldPropagate) {\r\n        child.$broadcast.apply(child, args);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Recursively propagate an event up the parent chain.\r\n   *\r\n   * @param {String} event\r\n   * @param {...*} additional arguments\r\n   */\r\n\r\n  Vue.prototype.$dispatch = function (event) {\r\n    var shouldPropagate = this.$emit.apply(this, arguments);\r\n    if (!shouldPropagate) return;\r\n    var parent = this.$parent;\r\n    var args = toArray(arguments);\r\n    // use object event to indicate non-source emit\r\n    // on parents\r\n    args[0] = { name: event, source: this };\r\n    while (parent) {\r\n      shouldPropagate = parent.$emit.apply(parent, args);\r\n      parent = shouldPropagate ? parent.$parent : null;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Modify the listener counts on all parents.\r\n   * This bookkeeping allows $broadcast to return early when\r\n   * no child has listened to a certain event.\r\n   *\r\n   * @param {Vue} vm\r\n   * @param {String} event\r\n   * @param {Number} count\r\n   */\r\n\r\n  var hookRE = /^hook:/;\r\n  function modifyListenerCount(vm, event, count) {\r\n    var parent = vm.$parent;\r\n    // hooks do not get broadcasted so no need\r\n    // to do bookkeeping for them\r\n    if (!parent || !count || hookRE.test(event)) return;\r\n    while (parent) {\r\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\r\n      parent = parent.$parent;\r\n    }\r\n  }\r\n}\r\n\r\nfunction lifecycleAPI (Vue) {\r\n  /**\r\n   * Set instance target element and kick off the compilation\r\n   * process. The passed in `el` can be a selector string, an\r\n   * existing Element, or a DocumentFragment (for block\r\n   * instances).\r\n   *\r\n   * @param {Element|DocumentFragment|string} el\r\n   * @public\r\n   */\r\n\r\n  Vue.prototype.$mount = function (el) {\r\n    if (this._isCompiled) {\r\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\r\n      return;\r\n    }\r\n    el = query(el);\r\n    if (!el) {\r\n      el = document.createElement('div');\r\n    }\r\n    this._compile(el);\r\n    this._initDOMHooks();\r\n    if (inDoc(this.$el)) {\r\n      this._callHook('attached');\r\n      ready.call(this);\r\n    } else {\r\n      this.$once('hook:attached', ready);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Mark an instance as ready.\r\n   */\r\n\r\n  function ready() {\r\n    this._isAttached = true;\r\n    this._isReady = true;\r\n    this._callHook('ready');\r\n  }\r\n\r\n  /**\r\n   * Teardown the instance, simply delegate to the internal\r\n   * _destroy.\r\n   *\r\n   * @param {Boolean} remove\r\n   * @param {Boolean} deferCleanup\r\n   */\r\n\r\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\r\n    this._destroy(remove, deferCleanup);\r\n  };\r\n\r\n  /**\r\n   * Partially compile a piece of DOM and return a\r\n   * decompile function.\r\n   *\r\n   * @param {Element|DocumentFragment} el\r\n   * @param {Vue} [host]\r\n   * @param {Object} [scope]\r\n   * @param {Fragment} [frag]\r\n   * @return {Function}\r\n   */\r\n\r\n  Vue.prototype.$compile = function (el, host, scope, frag) {\r\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\r\n  };\r\n}\r\n\r\n/**\r\n * The exposed Vue constructor.\r\n *\r\n * API conventions:\r\n * - public API methods/properties are prefixed with `$`\r\n * - internal methods/properties are prefixed with `_`\r\n * - non-prefixed properties are assumed to be proxied user\r\n *   data.\r\n *\r\n * @constructor\r\n * @param {Object} [options]\r\n * @public\r\n */\r\n\r\nfunction Vue(options) {\r\n  this._init(options);\r\n}\r\n\r\n// install internals\r\ninitMixin(Vue);\r\nstateMixin(Vue);\r\neventsMixin(Vue);\r\nlifecycleMixin(Vue);\r\nmiscMixin(Vue);\r\n\r\n// install instance APIs\r\ndataAPI(Vue);\r\ndomAPI(Vue);\r\neventsAPI(Vue);\r\nlifecycleAPI(Vue);\r\n\r\nvar slot = {\r\n\r\n  priority: SLOT,\r\n  params: ['name'],\r\n\r\n  bind: function bind() {\r\n    // this was resolved during component transclusion\r\n    var name = this.params.name || 'default';\r\n    var content = this.vm._slotContents && this.vm._slotContents[name];\r\n    if (!content || !content.hasChildNodes()) {\r\n      this.fallback();\r\n    } else {\r\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\r\n    }\r\n  },\r\n\r\n  compile: function compile(content, context, host) {\r\n    if (content && context) {\r\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\r\n        // if the inserted slot has v-if\r\n        // inject fallback content as the v-else\r\n        var elseBlock = document.createElement('template');\r\n        elseBlock.setAttribute('v-else', '');\r\n        elseBlock.innerHTML = this.el.innerHTML;\r\n        // the else block should be compiled in child scope\r\n        elseBlock._context = this.vm;\r\n        content.appendChild(elseBlock);\r\n      }\r\n      var scope = host ? host._scope : this._scope;\r\n      this.unlink = context.$compile(content, host, scope, this._frag);\r\n    }\r\n    if (content) {\r\n      replace(this.el, content);\r\n    } else {\r\n      remove(this.el);\r\n    }\r\n  },\r\n\r\n  fallback: function fallback() {\r\n    this.compile(extractContent(this.el, true), this.vm);\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    if (this.unlink) {\r\n      this.unlink();\r\n    }\r\n  }\r\n};\r\n\r\nvar partial = {\r\n\r\n  priority: PARTIAL,\r\n\r\n  params: ['name'],\r\n\r\n  // watch changes to name for dynamic partials\r\n  paramWatchers: {\r\n    name: function name(value) {\r\n      vIf.remove.call(this);\r\n      if (value) {\r\n        this.insert(value);\r\n      }\r\n    }\r\n  },\r\n\r\n  bind: function bind() {\r\n    this.anchor = createAnchor('v-partial');\r\n    replace(this.el, this.anchor);\r\n    this.insert(this.params.name);\r\n  },\r\n\r\n  insert: function insert(id) {\r\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\r\n    if (partial) {\r\n      this.factory = new FragmentFactory(this.vm, partial);\r\n      vIf.insert.call(this);\r\n    }\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    if (this.frag) {\r\n      this.frag.destroy();\r\n    }\r\n  }\r\n};\r\n\r\nvar elementDirectives = {\r\n  slot: slot,\r\n  partial: partial\r\n};\r\n\r\nvar convertArray = vFor._postProcess;\r\n\r\n/**\r\n * Limit filter for arrays\r\n *\r\n * @param {Number} n\r\n * @param {Number} offset (Decimal expected)\r\n */\r\n\r\nfunction limitBy(arr, n, offset) {\r\n  offset = offset ? parseInt(offset, 10) : 0;\r\n  n = toNumber(n);\r\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\r\n}\r\n\r\n/**\r\n * Filter filter for arrays\r\n *\r\n * @param {String} search\r\n * @param {String} [delimiter]\r\n * @param {String} ...dataKeys\r\n */\r\n\r\nfunction filterBy(arr, search, delimiter) {\r\n  arr = convertArray(arr);\r\n  if (search == null) {\r\n    return arr;\r\n  }\r\n  if (typeof search === 'function') {\r\n    return arr.filter(search);\r\n  }\r\n  // cast to lowercase string\r\n  search = ('' + search).toLowerCase();\r\n  // allow optional `in` delimiter\r\n  // because why not\r\n  var n = delimiter === 'in' ? 3 : 2;\r\n  // extract and flatten keys\r\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\r\n  var res = [];\r\n  var item, key, val, j;\r\n  for (var i = 0, l = arr.length; i < l; i++) {\r\n    item = arr[i];\r\n    val = item && item.$value || item;\r\n    j = keys.length;\r\n    if (j) {\r\n      while (j--) {\r\n        key = keys[j];\r\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\r\n          res.push(item);\r\n          break;\r\n        }\r\n      }\r\n    } else if (contains(item, search)) {\r\n      res.push(item);\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\n/**\r\n * Order filter for arrays\r\n *\r\n * @param {String|Array<String>|Function} ...sortKeys\r\n * @param {Number} [order]\r\n */\r\n\r\nfunction orderBy(arr) {\r\n  var comparator = null;\r\n  var sortKeys = undefined;\r\n  arr = convertArray(arr);\r\n\r\n  // determine order (last argument)\r\n  var args = toArray(arguments, 1);\r\n  var order = args[args.length - 1];\r\n  if (typeof order === 'number') {\r\n    order = order < 0 ? -1 : 1;\r\n    args = args.length > 1 ? args.slice(0, -1) : args;\r\n  } else {\r\n    order = 1;\r\n  }\r\n\r\n  // determine sortKeys & comparator\r\n  var firstArg = args[0];\r\n  if (!firstArg) {\r\n    return arr;\r\n  } else if (typeof firstArg === 'function') {\r\n    // custom comparator\r\n    comparator = function (a, b) {\r\n      return firstArg(a, b) * order;\r\n    };\r\n  } else {\r\n    // string keys. flatten first\r\n    sortKeys = Array.prototype.concat.apply([], args);\r\n    comparator = function (a, b, i) {\r\n      i = i || 0;\r\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\r\n    };\r\n  }\r\n\r\n  function baseCompare(a, b, sortKeyIndex) {\r\n    var sortKey = sortKeys[sortKeyIndex];\r\n    if (sortKey) {\r\n      if (sortKey !== '$key') {\r\n        if (isObject(a) && '$value' in a) a = a.$value;\r\n        if (isObject(b) && '$value' in b) b = b.$value;\r\n      }\r\n      a = isObject(a) ? getPath(a, sortKey) : a;\r\n      b = isObject(b) ? getPath(b, sortKey) : b;\r\n    }\r\n    return a === b ? 0 : a > b ? order : -order;\r\n  }\r\n\r\n  // sort on a copy to avoid mutating original array\r\n  return arr.slice().sort(comparator);\r\n}\r\n\r\n/**\r\n * String contain helper\r\n *\r\n * @param {*} val\r\n * @param {String} search\r\n */\r\n\r\nfunction contains(val, search) {\r\n  var i;\r\n  if (isPlainObject(val)) {\r\n    var keys = Object.keys(val);\r\n    i = keys.length;\r\n    while (i--) {\r\n      if (contains(val[keys[i]], search)) {\r\n        return true;\r\n      }\r\n    }\r\n  } else if (isArray(val)) {\r\n    i = val.length;\r\n    while (i--) {\r\n      if (contains(val[i], search)) {\r\n        return true;\r\n      }\r\n    }\r\n  } else if (val != null) {\r\n    return val.toString().toLowerCase().indexOf(search) > -1;\r\n  }\r\n}\r\n\r\nvar digitsRE = /(\\d{3})(?=\\d)/g;\r\n\r\n// asset collections must be a plain object.\r\nvar filters = {\r\n\r\n  orderBy: orderBy,\r\n  filterBy: filterBy,\r\n  limitBy: limitBy,\r\n\r\n  /**\r\n   * Stringify value.\r\n   *\r\n   * @param {Number} indent\r\n   */\r\n\r\n  json: {\r\n    read: function read(value, indent) {\r\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\r\n    },\r\n    write: function write(value) {\r\n      try {\r\n        return JSON.parse(value);\r\n      } catch (e) {\r\n        return value;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 'abc' => 'Abc'\r\n   */\r\n\r\n  capitalize: function capitalize(value) {\r\n    if (!value && value !== 0) return '';\r\n    value = value.toString();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  },\r\n\r\n  /**\r\n   * 'abc' => 'ABC'\r\n   */\r\n\r\n  uppercase: function uppercase(value) {\r\n    return value || value === 0 ? value.toString().toUpperCase() : '';\r\n  },\r\n\r\n  /**\r\n   * 'AbC' => 'abc'\r\n   */\r\n\r\n  lowercase: function lowercase(value) {\r\n    return value || value === 0 ? value.toString().toLowerCase() : '';\r\n  },\r\n\r\n  /**\r\n   * 12345 => $12,345.00\r\n   *\r\n   * @param {String} sign\r\n   * @param {Number} decimals Decimal places\r\n   */\r\n\r\n  currency: function currency(value, _currency, decimals) {\r\n    value = parseFloat(value);\r\n    if (!isFinite(value) || !value && value !== 0) return '';\r\n    _currency = _currency != null ? _currency : '$';\r\n    decimals = decimals != null ? decimals : 2;\r\n    var stringified = Math.abs(value).toFixed(decimals);\r\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\r\n    var i = _int.length % 3;\r\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\r\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\r\n    var sign = value < 0 ? '-' : '';\r\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\r\n  },\r\n\r\n  /**\r\n   * 'item' => 'items'\r\n   *\r\n   * @params\r\n   *  an array of strings corresponding to\r\n   *  the single, double, triple ... forms of the word to\r\n   *  be pluralized. When the number to be pluralized\r\n   *  exceeds the length of the args, it will use the last\r\n   *  entry in the array.\r\n   *\r\n   *  e.g. ['single', 'double', 'triple', 'multiple']\r\n   */\r\n\r\n  pluralize: function pluralize(value) {\r\n    var args = toArray(arguments, 1);\r\n    var length = args.length;\r\n    if (length > 1) {\r\n      var index = value % 10 - 1;\r\n      return index in args ? args[index] : args[length - 1];\r\n    } else {\r\n      return args[0] + (value === 1 ? '' : 's');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Debounce a handler function.\r\n   *\r\n   * @param {Function} handler\r\n   * @param {Number} delay = 300\r\n   * @return {Function}\r\n   */\r\n\r\n  debounce: function debounce(handler, delay) {\r\n    if (!handler) return;\r\n    if (!delay) {\r\n      delay = 300;\r\n    }\r\n    return _debounce(handler, delay);\r\n  }\r\n};\r\n\r\nfunction installGlobalAPI (Vue) {\r\n  /**\r\n   * Vue and every constructor that extends Vue has an\r\n   * associated options object, which can be accessed during\r\n   * compilation steps as `this.constructor.options`.\r\n   *\r\n   * These can be seen as the default options of every\r\n   * Vue instance.\r\n   */\r\n\r\n  Vue.options = {\r\n    directives: directives,\r\n    elementDirectives: elementDirectives,\r\n    filters: filters,\r\n    transitions: {},\r\n    components: {},\r\n    partials: {},\r\n    replace: true\r\n  };\r\n\r\n  /**\r\n   * Expose useful internals\r\n   */\r\n\r\n  Vue.util = util;\r\n  Vue.config = config;\r\n  Vue.set = set;\r\n  Vue['delete'] = del;\r\n  Vue.nextTick = nextTick;\r\n\r\n  /**\r\n   * The following are exposed for advanced usage / plugins\r\n   */\r\n\r\n  Vue.compiler = compiler;\r\n  Vue.FragmentFactory = FragmentFactory;\r\n  Vue.internalDirectives = internalDirectives;\r\n  Vue.parsers = {\r\n    path: path,\r\n    text: text,\r\n    template: template,\r\n    directive: directive,\r\n    expression: expression\r\n  };\r\n\r\n  /**\r\n   * Each instance constructor, including Vue, has a unique\r\n   * cid. This enables us to create wrapped \"child\r\n   * constructors\" for prototypal inheritance and cache them.\r\n   */\r\n\r\n  Vue.cid = 0;\r\n  var cid = 1;\r\n\r\n  /**\r\n   * Class inheritance\r\n   *\r\n   * @param {Object} extendOptions\r\n   */\r\n\r\n  Vue.extend = function (extendOptions) {\r\n    extendOptions = extendOptions || {};\r\n    var Super = this;\r\n    var isFirstExtend = Super.cid === 0;\r\n    if (isFirstExtend && extendOptions._Ctor) {\r\n      return extendOptions._Ctor;\r\n    }\r\n    var name = extendOptions.name || Super.options.name;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\r\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\r\n        name = null;\r\n      }\r\n    }\r\n    var Sub = createClass(name || 'VueComponent');\r\n    Sub.prototype = Object.create(Super.prototype);\r\n    Sub.prototype.constructor = Sub;\r\n    Sub.cid = cid++;\r\n    Sub.options = mergeOptions(Super.options, extendOptions);\r\n    Sub['super'] = Super;\r\n    // allow further extension\r\n    Sub.extend = Super.extend;\r\n    // create asset registers, so extended classes\r\n    // can have their private assets too.\r\n    config._assetTypes.forEach(function (type) {\r\n      Sub[type] = Super[type];\r\n    });\r\n    // enable recursive self-lookup\r\n    if (name) {\r\n      Sub.options.components[name] = Sub;\r\n    }\r\n    // cache constructor\r\n    if (isFirstExtend) {\r\n      extendOptions._Ctor = Sub;\r\n    }\r\n    return Sub;\r\n  };\r\n\r\n  /**\r\n   * A function that returns a sub-class constructor with the\r\n   * given name. This gives us much nicer output when\r\n   * logging instances in the console.\r\n   *\r\n   * @param {String} name\r\n   * @return {Function}\r\n   */\r\n\r\n  function createClass(name) {\r\n    /* eslint-disable no-new-func */\r\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\r\n    /* eslint-enable no-new-func */\r\n  }\r\n\r\n  /**\r\n   * Plugin system\r\n   *\r\n   * @param {Object} plugin\r\n   */\r\n\r\n  Vue.use = function (plugin) {\r\n    /* istanbul ignore if */\r\n    if (plugin.installed) {\r\n      return;\r\n    }\r\n    // additional parameters\r\n    var args = toArray(arguments, 1);\r\n    args.unshift(this);\r\n    if (typeof plugin.install === 'function') {\r\n      plugin.install.apply(plugin, args);\r\n    } else {\r\n      plugin.apply(null, args);\r\n    }\r\n    plugin.installed = true;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Apply a global mixin by merging it into the default\r\n   * options.\r\n   */\r\n\r\n  Vue.mixin = function (mixin) {\r\n    Vue.options = mergeOptions(Vue.options, mixin);\r\n  };\r\n\r\n  /**\r\n   * Create asset registration methods with the following\r\n   * signature:\r\n   *\r\n   * @param {String} id\r\n   * @param {*} definition\r\n   */\r\n\r\n  config._assetTypes.forEach(function (type) {\r\n    Vue[type] = function (id, definition) {\r\n      if (!definition) {\r\n        return this.options[type + 's'][id];\r\n      } else {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\r\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\r\n          }\r\n        }\r\n        if (type === 'component' && isPlainObject(definition)) {\r\n          if (!definition.name) {\r\n            definition.name = id;\r\n          }\r\n          definition = Vue.extend(definition);\r\n        }\r\n        this.options[type + 's'][id] = definition;\r\n        return definition;\r\n      }\r\n    };\r\n  });\r\n\r\n  // expose internal transition API\r\n  extend(Vue.transition, transition);\r\n}\r\n\r\ninstallGlobalAPI(Vue);\r\n\r\nVue.version = '1.0.28';\r\n\r\n// devtools global hook\r\n/* istanbul ignore next */\r\nsetTimeout(function () {\r\n  if (config.devtools) {\r\n    if (devtools) {\r\n      devtools.emit('init', Vue);\r\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\r\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\r\n    }\r\n  }\r\n}, 0);\r\n\r\nmodule.exports = Vue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue/dist/vue.common.js\n// module id = 23\n// module chunks = 3"],"sourceRoot":""}